[
  {
    "query": "vue-essentials",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "Essentials of Vue",
      "lessons": [
        {
          "title": "Mixins",
          "topics": []
        }
      ],
      "content": [
        {
          "Mixins": {
            "content": "<h2>\r\n\tBasics</h2>\r\n<p>\r\n\tMixins are a flexible way to distribute reusable functionalities for Vue components. A mixin object can contain any component options. When a component uses a mixin, all options in the mixin will be &ldquo;mixed&rdquo; into the component&rsquo;s own options.</p>\r\n<p>\r\n\tExample:</p>\r\n<pre>\r\n<code>// define a mixin object\r\nvar myMixin = {\r\n  created: function () {\r\n    this.hello()\r\n  },\r\n  methods: {\r\n    hello: function () {\r\n      console.log(&#39;hello from mixin!&#39;)\r\n    }\r\n  }\r\n}\r\n\r\n// define a component that uses this mixin\r\nvar Component = Vue.extend({\r\n  mixins: [myMixin]\r\n})\r\n\r\nvar component = new Component() // =&gt; &quot;hello from mixin!&quot;\r\n</code></pre>\r\n<h2>\r\n\tOption Merging</h2>\r\n<p>\r\n\tWhen a mixin and the component itself contain overlapping options, they will be &ldquo;merged&rdquo; using appropriate strategies.</p>\r\n<p>\r\n\tFor example, data objects undergo a shallow merge (one property deep), with the component&rsquo;s data taking priority in cases of conflicts.</p>\r\n<pre>\r\n<code>var mixin = {\r\n  data: function () {\r\n    return {\r\n      message: &#39;hello&#39;,\r\n      foo: &#39;abc&#39;\r\n    }\r\n  }\r\n}\r\n\r\nnew Vue({\r\n  mixins: [mixin],\r\n  data: function () {\r\n    return {\r\n      message: &#39;goodbye&#39;,\r\n      bar: &#39;def&#39;\r\n    }\r\n  },\r\n  created: function () {\r\n    console.log(this.$data)\r\n    // =&gt; { message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; }\r\n  }\r\n})\r\n</code></pre>\r\n<p>\r\n\tHook functions with the same name are merged into an array so that all of them will be called. Mixin hooks will be called before the component&rsquo;s own hooks.</p>\r\n<pre>\r\n<code>var mixin = {\r\n  created: function () {\r\n    console.log(&#39;mixin hook called&#39;)\r\n  }\r\n}\r\n\r\nnew Vue({\r\n  mixins: [mixin],\r\n  created: function () {\r\n    console.log(&#39;component hook called&#39;)\r\n  }\r\n})\r\n\r\n// =&gt; &quot;mixin hook called&quot;\r\n// =&gt; &quot;component hook called&quot;\r\n</code></pre>\r\n<p>\r\n\tOptions that expect object values, for example <code>methods</code>, <code>components </code>and <code>directives</code>, will be merged into the same object. The component&rsquo;s options will take priority when there are conflicting keys in these objects:</p>\r\n<pre>\r\n<code>var mixin = {\r\n  methods: {\r\n    foo: function () {\r\n      console.log(&#39;foo&#39;)\r\n    },\r\n    conflicting: function () {\r\n      console.log(&#39;from mixin&#39;)\r\n    }\r\n  }\r\n}\r\n\r\nvar vm = new Vue({\r\n  mixins: [mixin],\r\n  methods: {\r\n    bar: function () {\r\n      console.log(&#39;bar&#39;)\r\n    },\r\n    conflicting: function () {\r\n      console.log(&#39;from self&#39;)\r\n    }\r\n  }\r\n})\r\n\r\nvm.foo() // =&gt; &quot;foo&quot;\r\nvm.bar() // =&gt; &quot;bar&quot;\r\nvm.conflicting() // =&gt; &quot;from self&quot;\r\n</code></pre>\r\n<p>\r\n\tNote that the same merge strategies are used in <code>Vue.extend()</code>.</p>\r\n<h2>\r\n\tGlobal Mixin</h2>\r\n<p>\r\n\tYou can also apply a mixin globally. Use with caution! Once you apply a mixin globally, it will affect every Vue instance created afterwards. When used properly, this can be used to inject processing logic for custom options:</p>\r\n<pre>\r\n<code>// inject a handler for `myOption` custom option\r\nVue.mixin({\r\n  created: function () {\r\n    var myOption = this.$options.myOption\r\n    if (myOption) {\r\n      console.log(myOption)\r\n    }\r\n  }\r\n})\r\n\r\nnew Vue({\r\n  myOption: &#39;hello!&#39;\r\n})\r\n// =&gt; &quot;hello!&quot;\r\n</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tUse global mixins sparsely and carefully, because it affects every single Vue instance created, including third party components. In most cases, you should only use it for custom option handling like demonstrated in the example above. It&rsquo;s also a good idea to ship them as [[ link | vue-reusability-and-composition-plugins]]Plugins[[ endl ]] to avoid duplicate application.</p>\r\n</blockquote>\r\n<h2>\r\n\tCustom Option Merge Strategies</h2>\r\n<p>\r\n\tWhen custom options are merged, they use the default strategy which overwrites the existing value. If you want a custom option to be merged using custom logic, you need to attach a function to <code>Vue.config.optionMergeStrategies</code>:</p>\r\n<pre>\r\n<code>Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {\r\n  // return mergedVal\r\n}\r\n</code></pre>\r\n<p>\r\n\tFor most object-based options, you can use the same strategy used by <code>methods</code>:</p>\r\n<pre>\r\n<code>var strategies = Vue.config.optionMergeStrategies\r\nstrategies.myOption = strategies.methods\r\n</code></pre>\r\n<p>\r\n\tA more advanced example can be found on <a href=\"https://github.com/vuejs/vuex\" target=\"_blank\">Vuex</a>&lsquo;s 1.x merging strategy:</p>\r\n<pre>\r\n<code>const merge = Vue.config.optionMergeStrategies.computed\r\nVue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\r\n  if (!toVal) return fromVal\r\n  if (!fromVal) return toVal\r\n  return {\r\n    getters: merge(toVal.getters, fromVal.getters),\r\n    state: merge(toVal.state, fromVal.state),\r\n    actions: merge(toVal.actions, fromVal.actions)\r\n  }\r\n}</code></pre>"
          }
        }
      ]
    }
  }
]