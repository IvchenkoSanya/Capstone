[
  {
    "query": "php-getting-started",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "Getting Started with PHP",
      "lessons": [
        {
          "title": "What is PHP?",
          "topics": []
        },
        {
          "title": "What can PHP do?",
          "topics": []
        },
        {
          "title": "A simple tutorial",
          "topics": []
        },
        {
          "title": "What do I need?",
          "topics": []
        },
        {
          "title": "Your first PHP-enabled page",
          "topics": []
        },
        {
          "title": "Something Useful",
          "topics": []
        },
        {
          "title": "Dealing with Forms",
          "topics": []
        },
        {
          "title": "Using old code with new versions of PHP",
          "topics": []
        },
        {
          "title": "What's next?",
          "topics": []
        },
        {
          "title": "HTTP authentication with PHP",
          "topics": []
        },
        {
          "title": "Cookies",
          "topics": []
        }
      ],
      "content": [
        {
          "What is PHP?": {
            "content": "<p>\r\n\t<acronym>PHP</acronym> (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML.</p>\r\n<p>\r\n\tNice, but what does that mean? An example:</p>\r\n<h3>\r\n\tExample #1 An introductory example</h3>\r\n<pre>\r\n<code>&lt;!DOCTYPE HTML&gt;\r\n&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;Example&lt;/title&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n\r\n        &lt;?php\r\n            echo &quot;Hi, I&#39;m a PHP script!&quot;;\r\n        ?&gt;\r\n\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n<p>\r\n\tInstead of lots of commands to output HTML (as seen in C or Perl), PHP pages contain HTML with embedded code that does &quot;something&quot; (in this case, output &quot;Hi, I&#39;m a PHP script!&quot;). The PHP code is enclosed in special [[ link | php-language-reference-basics-escaping-from-html]]start and end processing instructions &lt;?php and ?&gt;[[ endl ]]&nbsp;that allow you to jump into and out of &quot;PHP mode.&quot;</p>\r\n<p>\r\n\tWhat distinguishes PHP from something like client-side JavaScript is that the code is executed on the server, generating HTML which is then sent to the client. The client would receive the results of running that script, but would not know what the underlying code was. You can even configure your web server to process all your HTML files with PHP, and then there&#39;s really no way that users can tell what you have up your sleeve.</p>\r\n<p>\r\n\tThe best things in using PHP are that it is extremely simple for a newcomer, but offers many advanced features for a professional programmer. Don&#39;t be afraid reading the long list of PHP&#39;s features. You can jump in, in a short time, and start writing simple scripts in a few hours.</p>\r\n<p>\r\n\tAlthough PHP&#39;s development is focused on server-side scripting, you can do much more with it. Read on, and see more in the [[ link | php-getting-started-intro-what-can-php-do]]What can PHP do?[[ endl ]]&nbsp;section, or go right to the [[ link | php-getting-started-tutorial]]introductory tutorial[[ endl ]]&nbsp;if you are only interested in web programming.</p>"
          }
        },
        {
          "What can PHP do?": {
            "content": "<p>\r\n\tAnything. PHP is mainly focused on server-side scripting, so you can do anything any other CGI program can do, such as collect form data, generate dynamic page content, or send and receive cookies. But PHP can do much more.</p>\r\n<p>\r\n\tThere are three main areas where PHP scripts are used.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<span>Server-side scripting. This is the most traditional and main target field for PHP. You need three things to make this work: the PHP parser (CGI or server module), a web server and a web browser. You need to run the web server, with a connected PHP installation. You can access the PHP program output with a web browser, viewing the PHP page through the server. All these can run on your home machine if you are just experimenting with PHP programming. See the <a href=\"http://us3.php.net/manual/en/install.php\" target=\"_blank\">installation instructions</a> section for more information. </span></li>\r\n\t<li>\r\n\t\t<span>Command line scripting. You can make a PHP script to run it without any server or browser. You only need the PHP parser to use it this way. This type of usage is ideal for scripts regularly executed using cron (on *nix or Linux) or Task Scheduler (on Windows). These scripts can also be used for simple text processing tasks. See the section about [[ link | php-features-command-line]]Command line usage of PHP[[ endl ]]&nbsp;for more information. </span></li>\r\n\t<li>\r\n\t\t<span>Writing desktop applications. PHP is probably not the very best language to create a desktop application with a graphical user interface, but if you know PHP very well, and would like to use some advanced PHP features in your client-side applications you can also use PHP-GTK to write such programs. You also have the ability to write cross-platform applications this way. PHP-GTK is an extension to PHP, not available in the main distribution. If you are interested in PHP-GTK, visit <a href=\"http://gtk.php.net/\" target=\"_blank\">its own website</a>. </span></li>\r\n</ul>\r\n<p class=\"para\">\r\n\tPHP can be <a class=\"link\" href=\"http://us3.php.net/manual/en/install.php\" target=\"_blank\">used</a> on all major operating systems, including Linux, many Unix variants (including HP-UX, Solaris and OpenBSD), Microsoft Windows, macOS, RISC OS, and probably others. PHP also has support for most of the web servers today. This includes Apache, IIS, and many others. And this includes any web server that can utilize the FastCGI PHP binary, like lighttpd and nginx. PHP works as either a module, or as a CGI processor.</p>\r\n<p>\r\n\tSo with PHP, you have the freedom of choosing an operating system and a web server. Furthermore, you also have the choice of using procedural programming or object oriented programming (OOP), or a mixture of them both.</p>\r\n<p>\r\n\tWith PHP you are not limited to output HTML. PHP&#39;s abilities includes outputting images, PDF files and even Flash movies (using libswf and Ming) generated on the fly. You can also output easily any text, such as XHTML and any other XML file. PHP can autogenerate these files, and save them in the file system, instead of printing it out, forming a server-side cache for your dynamic content.</p>\r\n<p>\r\n\tOne of the strongest and most significant features in PHP is its support for a <a href=\"http://us3.php.net/manual/en/refs.database.php\" target=\"_blank\">wide range of databases</a>. Writing a database-enabled web page is incredibly simple using one of the database specific extensions (e.g., for <a href=\"http://us3.php.net/manual/en/book.mysqli.php\" target=\"_blank\">mysql</a>), or using an abstraction layer like <a href=\"http://us3.php.net/manual/en/book.pdo.php\" target=\"_blank\">PDO</a>, or connect to any database supporting the Open Database Connection standard via the <a href=\"http://us3.php.net/manual/en/book.uodbc.php\" target=\"_blank\">ODBC</a> extension. Other databases may utilize <a href=\"http://us3.php.net/manual/en/book.curl.php\" target=\"_blank\">cURL</a> or <a href=\"http://us3.php.net/manual/en/book.sockets.php\" target=\"_blank\">sockets</a>, like CouchDB.</p>\r\n<p>\r\n\tPHP also has support for talking to other services using protocols such as LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (on Windows) and countless others. You can also open raw network sockets and interact using any other protocol. PHP has support for the WDDX complex data exchange between virtually all Web programming languages. Talking about interconnection, PHP has support for instantiation of Java objects and using them transparently as PHP objects.</p>\r\n<p>\r\n\tPHP has useful <a href=\"http://us3.php.net/manual/en/refs.basic.text.php\" target=\"_blank\">text processing</a> features, which includes the Perl compatible regular expressions (<a href=\"http://us3.php.net/manual/en/book.pcre.php\" target=\"_blank\">PCRE</a>), and many extensions and tools to <a href=\"http://us3.php.net/manual/en/refs.xml.php\" target=\"_blank\">parse and access XML documents</a>. PHP standardizes all of the XML extensions on the solid base of <a href=\"http://us3.php.net/manual/en/book.libxml.php\" target=\"_blank\">libxml2</a>, and extends the feature set adding <a href=\"http://us3.php.net/manual/en/book.simplexml.php\" target=\"_blank\">SimpleXML</a>, <a href=\"http://us3.php.net/manual/en/book.xmlreader.php\" target=\"_blank\">XMLReader</a> and <a href=\"http://us3.php.net/manual/en/book.xmlwriter.php\" target=\"_blank\">XMLWriter</a> support.</p>\r\n<p>\r\n\tAnd many other interesting extensions exist, which are categorized both <a href=\"http://us3.php.net/manual/en/extensions.php\" target=\"_blank\">alphabetically</a> and by <a href=\"http://us3.php.net/manual/en/funcref.php\" target=\"_blank\">category</a>. And there are additional PECL extensions that may or may not be documented within the PHP manual itself, like <a href=\"http://xdebug.org/\" target=\"_blank\">XDebug</a>.</p>\r\n<p>\r\n\tAs you can see this page is not enough to list all the features and benefits PHP can offer. Read on in the sections about <a href=\"http://us3.php.net/manual/en/install.php\" target=\"_blank\">installing PHP</a>, and see the <a href=\"http://us3.php.net/manual/en/funcref.php\" target=\"_blank\">function reference</a> part for explanation of the extensions mentioned here.</p>"
          }
        },
        {
          "A simple tutorial": {
            "content": "<p>\r\n\tHere we would like to show the very basics of PHP in a short, simple tutorial. This text only deals with dynamic web page creation with PHP, though PHP is not only capable of creating web pages. See the section titled&nbsp;[[ link | php-getting-started-intro-what-can-php-do]]What can PHP do[[ endl ]]&nbsp;for more information.</p>\r\n<p>\r\n\tPHP-enabled web pages are treated just like regular HTML pages and you can create and edit them the same way you normally create regular HTML pages.</p>"
          }
        },
        {
          "What do I need?": {
            "content": "<p>\r\n\tIn this tutorial we assume that your server has activated support for PHP and that all files ending in&nbsp;<var>.php</var>&nbsp;are handled by PHP. On most servers, this is the default extension for PHP files, but ask your server administrator to be sure. If your server supports PHP, then you do not need to do anything. Just create your&nbsp;<var>.php</var>&nbsp;files, put them in your web directory and the server will automatically parse them for you. There is no need to compile anything nor do you need to install any extra tools. Think of these PHP-enabled files as simple HTML files with a whole new family of magical tags that let you do all sorts of things.</p>\r\n<p>\r\n\tLet us say you want to save precious bandwidth and develop locally. In this case, you will want to install a web server, such as&nbsp;<a href=\"http://httpd.apache.org/\" target=\"_blank\">Apache</a>, and of course&nbsp;<a href=\"http://www.php.net/downloads.php\" target=\"_blank\">PHP</a>. You will most likely want to install a database as well, such as&nbsp;<a href=\"http://dev.mysql.com/doc/\" target=\"_blank\">MySQL</a>.</p>\r\n<p>\r\n\tYou can either install these individually or choose a simpler way. Our manual has&nbsp;<a href=\"http://us3.php.net/manual/en/install.php\" target=\"_blank\">installation instructions for PHP</a>&nbsp;(assuming you already have some web server set up). If you have problems with installing PHP yourself, we would suggest you ask your questions on our&nbsp;<a href=\"http://www.php.net/mailing-lists.php\" target=\"_blank\">installation mailing list</a>. If you choose to go on the simpler route, then&nbsp;<a href=\"http://wikipedia.org/wiki/List_of_AMP_packages\" target=\"_blank\">locate a pre-configured package</a>&nbsp;for your operating system, which automatically installs all of these with just a few mouse clicks. It is easy to setup a web server with PHP support on any operating system, including MacOSX, Linux and Windows. On Linux, you may find&nbsp;<a href=\"http://www.rpmfind.net/\" target=\"_blank\">rpmfind</a>&nbsp;and&nbsp;<a href=\"http://rpm.pbone.net/\" target=\"_blank\">PBone</a>helpful for locating RPMs. You may also want to visit&nbsp;<a href=\"https://packages.debian.org/index\" target=\"_blank\">apt-get</a>&nbsp;to find packages for Debian.</p>"
          }
        },
        {
          "Your first PHP-enabled page": {
            "content": "<p>\r\n\tCreate a file named <var>hello.php</var> and put it in your web server&#39;s root directory (<var><var>DOCUMENT_ROOT</var></var>) with the following content:</p>\r\n<h3>\r\n\tExample #1 Our first PHP script: <var>hello.php</var></h3>\r\n<pre>\r\n<code>&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;title&gt;PHP Test&lt;/title&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n &lt;?php echo &#39;&lt;p&gt;Hello World&lt;/p&gt;&#39;; ?&gt; \r\n &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n<p>\r\n\tUse your browser to access the file with your web server&#39;s URL, ending with the /hello.php file reference. When developing locally this URL will be something like http://localhost/hello.php or http://127.0.0.1/hello.php but this depends on the web server&#39;s configuration. If everything is configured correctly, this file will be parsed by PHP and the following output will be sent to your browser:</p>\r\n<pre>\r\n<code>&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;title&gt;PHP Test&lt;/title&gt;\r\n &lt;/head&gt;\r\n &lt;body&gt;\r\n &lt;p&gt;Hello World&lt;/p&gt;\r\n &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n<p>\r\n\tThis program is extremely simple and you really did not need to use PHP to create a page like this. All it does is display: Hello World using the PHP <span><a href=\"http://us3.php.net/manual/en/function.echo.php\" target=\"_blank\">echo</a></span> statement. Note that the file does not need to be executable or special in any way. The server finds out that this file needs to be interpreted by PHP because you used the &quot;.php&quot; extension, which the server is configured to pass on to PHP. Think of this as a normal HTML file which happens to have a set of special tags available to you that do a lot of interesting things.</p>\r\n<p>\r\n\tIf you tried this example and it did not output anything, it prompted for download, or you see the whole file as text, chances are that the server you are on does not have PHP enabled, or is not configured properly. Ask your administrator to enable it for you using the <a href=\"http://us3.php.net/manual/en/install.php\" target=\"_blank\">Installation</a> chapter of the manual. If you are developing locally, also read the installation chapter to make sure everything is configured properly. Make sure that you access the file via http with the server providing you the output. If you just call up the file from your file system, then it will not be parsed by PHP. If the problems persist anyway, do not hesitate to use one of the many <a href=\"http://www.php.net/support.php\" target=\"_blank\">PHP support</a> options.</p>\r\n<p>\r\n\tThe point of the example is to show the special PHP tag format. In this example we used &lt;?php to indicate the start of a PHP tag. Then we put the PHP statement and left PHP mode by adding the closing tag, ?&gt;. You may jump in and out of PHP mode in an HTML file like this anywhere you want. For more details, read the manual section on the [[ link | php-language-reference-basics]]basic PHP syntax[[ endl ]].</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: <span>A Note on Line Feeds</span></p>\r\n\t<p>\r\n\t\tLine feeds have little meaning in HTML, however it is still a good idea to make your HTML look nice and clean by putting line feeds in. A linefeed that follows immediately after a closing ?&gt; will be removed by PHP. This can be extremely useful when you are putting in many blocks of PHP or include files containing PHP that aren&#39;t supposed to output anything. At the same time it can be a bit confusing. You can put a space after the closing ?&gt; to force a space and a line feed to be output, or you can put an explicit line feed in the last echo/print from within your PHP block.</p>\r\n</blockquote>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: <span>A Note on Text Editors</span></p>\r\n\t<p>\r\n\t\tThere are many text editors and Integrated Development Environments (IDEs) that you can use to create, edit and manage PHP files. A partial list of these tools is maintained at <a href=\"http://en.wikipedia.org/wiki/List_of_PHP_editors\" target=\"_blank\">PHP Editors List</a>. If you wish to recommend an editor, please visit the above page and ask the page maintainer to add the editor to the list. Having an editor with syntax highlighting can be helpful.</p>\r\n</blockquote>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: <span>A Note on Word Processors</span></p>\r\n\t<p>\r\n\t\tWord processors such as StarOffice Writer, Microsoft Word and Abiword are not optimal for editing PHP files. If you wish to use one for this test script, you must ensure that you save the file as plain text or PHP will not be able to read and execute the script.</p>\r\n</blockquote>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: <span>A Note on Windows Notepad</span></p>\r\n\t<p>\r\n\t\tIf you are writing your PHP scripts using Windows Notepad, you will need to ensure that your files are saved with the <var>.php</var> extension. (Notepad adds a <var>.txt</var> extension to files automatically unless you take one of the following steps to prevent it.) When you save the file and are prompted to provide a name for the file, place the filename in quotes (i.e. &quot;<var>hello.php</var>&quot;). Alternatively, you can click on the &#39;Text Documents&#39; drop-down menu in the &#39;Save&#39; dialog box and change the setting to &quot;All Files&quot;. You can then enter your filename without quotes.</p>\r\n</blockquote>\r\n<p>\r\n\tNow that you have successfully created a working PHP script, it is time to create the most famous PHP script! Make a call to the <span><a href=\"http://us3.php.net/manual/en/function.phpinfo.php\" target=\"_blank\">phpinfo()</a></span> function and you will see a lot of useful information about your system and setup such as available [[ link | php-language-reference-variables-predefined-variables]]predefined variables[[ endl ]], loaded PHP modules, and <a href=\"http://us3.php.net/manual/en/configuration.php\" target=\"_blank\">configuration</a> settings. Take some time and review this important information.</p>\r\n<h3>\r\n\tExample #2 Get system information from PHP</h3>\r\n<pre>\r\n<code>&lt;?php phpinfo(); ?&gt;</code></pre>"
          }
        },
        {
          "Something Useful": {
            "content": "<p>\r\n\tLet us do something more useful now. We are going to check what sort of browser the visitor is using. For that, we check the user agent string the browser sends as part of the HTTP request. This information is stored in a [[ link | php-language-reference-variables]]variable[[ endl ]]. Variables always start with a dollar-sign in PHP. The variable we are interested in right now is [[ link | php-language-reference-predefined-variables-server]]$_SERVER[&#39;HTTP_USER_AGENT&#39;][[ endl ]].</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote:</p>\r\n\t<p>\r\n\t\t[[ link | php-language-reference-predefined-variables-server]]<var>$_SERVER</var>[[ endl ]]&nbsp;is a special reserved PHP variable that contains all web server information. It is known as a superglobal. See the related manual page on [[ link | php-language-reference-predefined-variables-superglobals]]superglobals[[ endl ]]&nbsp;for more information. These special variables were introduced in PHP <a href=\"http://www.php.net/releases/4_1_0.php\" target=\"_blank\">4.1.0</a>. Before this time, we used the older <var><var>$HTTP_*_VARS</var></var> arrays instead, such as <var><var>$HTTP_SERVER_VARS</var></var>. As of PHP 5.4.0 these older variables have been removed. (See also the note on [[ link | php-getting-started-tutorial-old-code]]old code[[ endl ]].)</p>\r\n</blockquote>\r\n<p>\r\n\tTo display this variable, you can simply do:</p>\r\n<h3>\r\n\tExample #1 Printing a variable (Array element)</h3>\r\n<pre>\r\n<code>&lt;?php\r\necho $_SERVER[&#39;HTTP_USER_AGENT&#39;];\r\n?&gt;\r\n</code></pre>\r\n<p>\r\n\tA sample output of this script may be:</p>\r\n<pre>\r\n<code>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n</code></pre>\r\n<p>\r\n\tThere are many [[ link | php-language-reference-types]]types[[ endl ]]&nbsp;of variables available in PHP. In the above example we printed an [[ link | php-language-reference-types-array]]Array[[ endl ]]&nbsp;element. Arrays can be very useful.</p>\r\n<p>\r\n\t[[ link | php-language-reference-predefined-variables-server]]<var>$_SERVER</var>[[ endl ]]&nbsp;is just one variable that PHP automatically makes available to you. A list can be seen in the [[ link | php-language-reference-predefined-variables]]Reserved Variables[[ endl ]]&nbsp;section of the manual or you can get a complete list of them by looking at the output of the <a href=\"http://us3.php.net/manual/en/function.phpinfo.php\" target=\"_blank\">phpinfo()</a> function used in the example in the previous section.</p>\r\n<p>\r\n\tYou can put multiple PHP statements inside a PHP tag and create little blocks of code that do more than just a single echo. For example, if you want to check for Internet Explorer you can do this:</p>\r\n<h3>\r\n\tExample #2 Example using [[ link | php-language-reference-control-structures]]control structures[[ endl ]]<span style=\"font-size: 15px;\">&nbsp;and&nbsp;</span>[[ link | php-language-reference-functions]]functions[[ endl ]]</h3>\r\n<pre>\r\n<code>&lt;?php\r\nif (strpos($_SERVER[&#39;HTTP_USER_AGENT&#39;], &#39;MSIE&#39;) !== FALSE) {\r\n    echo &#39;You are using Internet Explorer.&lt;br /&gt;&#39;;\r\n}\r\n?&gt;\r\n</code></pre>\r\n<p>\r\n\tA sample output of this script may be:</p>\r\n<pre>\r\n<code>You are using Internet Explorer.&lt;br /&gt;\r\n</code></pre>\r\n<p>\r\n\tHere we introduce a couple of new concepts. We have an [[ link | php-language-reference-control-structures-if]]if[[ endl ]]&nbsp;statement. If you are familiar with the basic syntax used by the C language, this should look logical to you. Otherwise, you should probably pick up an introductory PHP book and read the first couple of chapters, or read the [[ link | php-language-reference]]Language Reference[[ endl ]]&nbsp;part of the manual.</p>\r\n<p>\r\n\tThe second concept we introduced was the <span><a href=\"http://us3.php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos()</a></span> function call. <span><a href=\"http://us3.php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos()</a></span> is a function built into PHP which searches a string for another string. In this case we are looking for &#39;MSIE&#39; (so-called needle) inside [[ link | php-language-reference-predefined-variables-server]]$_SERVER[&#39;HTTP_USER_AGENT&#39;][[ endl ]]&nbsp;(so-called haystack). If the needle is found inside the haystack, the function returns the position of the needle relative to the start of the haystack. Otherwise, it returns <code>FALSE</code>. If it does not return <code>FALSE</code>, the [[ link | php-language-reference-control-structures-if]]if[[ endl ]]&nbsp;expression evaluates to <code>TRUE</code> and the code within its {braces} is executed. Otherwise, the code is not run. Feel free to create similar examples, with&nbsp;[[ link | php-language-reference-control-structures-if]]if[[ endl ]], [[ link | php-language-reference-control-structures-else]]else[[ endl ]], and other functions such as <a href=\"http://us3.php.net/manual/en/function.strtoupper.php\" target=\"_blank\">strtoupper()</a> and <a href=\"http://us3.php.net/manual/en/function.strlen.php\" target=\"_blank\">strlen()</a>. Each related manual page contains examples too. If you are unsure how to use functions, you will want to read both the manual page on <a href=\"http://us3.php.net/manual/en/about.prototypes.php\" target=\"_blank\">how to read a function definition</a> and the section about [[ link | php-language-reference-functions]]PHP functions[[ endl ]].</p>\r\n<p>\r\n\tWe can take this a step further and show how you can jump in and out of PHP mode even in the middle of a PHP block:</p>\r\n<h3>\r\n\tExample #3 Mixing both HTML and PHP modes</h3>\r\n<pre>\r\n<code>&lt;?php\r\nif (strpos($_SERVER[&#39;HTTP_USER_AGENT&#39;], &#39;MSIE&#39;) !== FALSE) {\r\n?&gt;\r\n&lt;h3&gt;strpos() must have returned non-false&lt;/h3&gt;\r\n&lt;p&gt;You are using Internet Explorer&lt;/p&gt;\r\n&lt;?php\r\n} else {\r\n?&gt;\r\n&lt;h3&gt;strpos() must have returned false&lt;/h3&gt;\r\n&lt;p&gt;You are not using Internet Explorer&lt;/p&gt;\r\n&lt;?php\r\n}\r\n?&gt;\r\n</code></pre>\r\n<p>\r\n\tA sample output of this script may be:</p>\r\n<pre>\r\n<code>&lt;h3&gt;strpos() must have returned non-false&lt;/h3&gt;\r\n&lt;p&gt;You are using Internet Explorer&lt;/p&gt;\r\n</code></pre>\r\n<p>\r\n\tInstead of using a PHP echo statement to output something, we jumped out of PHP mode and just sent straight HTML. The important and powerful point to note here is that the logical flow of the script remains intact. Only one of the HTML blocks will end up getting sent to the viewer depending on the result of <span><a href=\"http://us3.php.net/manual/en/function.strpos.php\" target=\"_blank\">strpos()</a></span>. In other words, it depends on whether the string MSIE was found or not.</p>"
          }
        },
        {
          "Dealing with Forms": {
            "content": "<p>\r\n\tOne of the most powerful features of PHP is the way it handles HTML forms. The basic concept that is important to understand is that any form element will automatically be available to your PHP scripts. Please read the manual section on [[ link | php-language-reference-variables-external-sources]]Variables from external sources[[ endl ]]&nbsp;for more information and examples on using forms with PHP. Here is an example HTML form:</p>\r\n<h3>\r\n\tExample #1 A simple HTML form</h3>\r\n<pre>\r\n<code>&lt;form action=&quot;action.php&quot; method=&quot;post&quot;&gt;\r\n &lt;p&gt;Your name: &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;&lt;/p&gt;\r\n &lt;p&gt;Your age: &lt;input type=&quot;text&quot; name=&quot;age&quot; /&gt;&lt;/p&gt;\r\n &lt;p&gt;&lt;input type=&quot;submit&quot; /&gt;&lt;/p&gt;\r\n&lt;/form&gt;</code></pre>\r\n<p>\r\n\tThere is nothing special about this form. It is a straight HTML form with no special tags of any kind. When the user fills in this form and hits the submit button, the <var>action.php</var> page is called. In this file you would write something like this:</p>\r\n<h3>\r\n\tExample #2 Printing data from our form</h3>\r\n<pre>\r\n<code>Hi &lt;?php echo htmlspecialchars($_POST[&#39;name&#39;]); ?&gt;.\r\nYou are &lt;?php echo (int)$_POST[&#39;age&#39;]; ?&gt; years old.\r\n</code></pre>\r\n<p>\r\n\tA sample output of this script may be:</p>\r\n<pre>\r\n<code>Hi Joe. You are 22 years old.\r\n</code></pre>\r\n<p>\r\n\tApart from the <span><a href=\"http://us3.php.net/manual/en/function.htmlspecialchars.php\" target=\"_blank\">htmlspecialchars()</a></span> and (int) parts, it should be obvious what this does. <span><a href=\"http://us3.php.net/manual/en/function.htmlspecialchars.php\" target=\"_blank\">htmlspecialchars()</a></span> makes sure any characters that are special in html are properly encoded so people can&#39;t inject HTML tags or Javascript into your page. For the age field, since we know it is a number, we can just [[ link | php-language-reference-types-juggling]]convert[[ endl ]] it to an [[ link | php-language-reference-types-int]]integer[[ endl ]]&nbsp;which will automatically get rid of any stray characters. You can also have PHP do this for you automatically by using the <a href=\"http://us3.php.net/manual/en/ref.filter.php\" target=\"_blank\">filter</a> extension. The [[ link | php-language-reference-predefined-variables-post]]<i>$_POST[&#39;name&#39;]</i>[[ endl ]]&nbsp;and [[ link | php-language-reference-predefined-variables-post]]<span style=\"font-style: italic;\">$_POST[&#39;age&#39;]</span>[[ endl ]]&nbsp;variables are automatically set for you by PHP. Earlier we used the [[ link | php-language-reference-predefined-variables-server]]<span style=\"font-style: italic;\">$_SERVER</span>[[ endl ]]&nbsp;superglobal; above we just introduced the [[ link | php-language-reference-predefined-variables-post]]<span style=\"font-style: italic;\">$_POST</span>[[ endl ]]&nbsp;superglobal which contains all POST data. Notice how the method of our form is POST. If we used the method GET then our form information would live in the [[ link | php-language-reference-predefined-variables-get]]<span style=\"font-style: italic;\">$_GET</span>[[ endl ]]&nbsp;superglobal instead. You may also use the [[ link | php-language-reference-predefined-variables-request]]<span style=\"font-style: italic;\">$_REQUEST</span>[[ endl ]]&nbsp;superglobal, if you do not care about the source of your request data. It contains the merged information of GET, POST and COOKIE data.</p>\r\n<p>\r\n\tYou can also deal with XForms input in PHP, although you will find yourself comfortable with the well supported HTML forms for quite some time. While working with XForms is not for beginners, you might be interested in them. We also have a [[ link | php-features-xforms]]short introduction to handling data received from XForms[[ endl ]]&nbsp;in our features section.</p>"
          }
        },
        {
          "Using old code with new versions of PHP": {
            "content": "<p>\r\n\tNow that PHP has grown to be a popular scripting language, there are a lot of public repositories and libraries containing code you can reuse. The PHP developers have largely tried to preserve backwards compatibility, so a script written for an older version will run (ideally) without changes in a newer version of PHP. In practice, some changes will usually be needed.</p>\r\n<p>\r\n\tTwo of the most important recent changes that affect old code are:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<span>The old <var><var>$HTTP_*_VARS</var></var> arrays are not available as of PHP 5.4.0. The following [[ link | php-language-reference-predefined-variables-superglobals]]superglobal arrays[[ endl ]]&nbsp;were introduced in PHP <a href=\"http://www.php.net/releases/4_1_0.php\" target=\"_blank\">4.1.0</a>. They are:&nbsp;[[ link | php-language-reference-predefined-variables-get]]$_GET[[ endl ]],&nbsp;[[ link | php-language-reference-predefined-variables-post]]$_POST[[ endl ]],&nbsp;[[ link | php-language-reference-predefined-variables-cookie]]$_COOKIE[[ endl ]],&nbsp;[[ link | php-language-reference-predefined-variables-server]]$_SERVER[[ endl ]],&nbsp;[[ link | php-language-reference-predefined-variables-files]]$_FILES[[ endl ]],&nbsp;[[ link | php-language-reference-predefined-variables-env]]$_ENV[[ endl ]],&nbsp;[[ link | php-language-reference-predefined-variables-request]]$_REQUEST[[ endl ]], and&nbsp;[[ link | php-language-reference-predefined-variables-session]]$_SESSION[[ endl ]]. </span></li>\r\n\t<li>\r\n\t\t<span>External variables are no longer registered in the global scope by default. In other words, as of PHP <a href=\"http://www.php.net/releases/4_2_0.php\" target=\"_blank\">4.2.0</a> the PHP directive <a href=\"http://us3.php.net/manual/en/ini.core.php#ini.register-globals\" target=\"_blank\">register_globals</a> is off by default in <var>php.ini</var>. The preferred method of accessing these values is via the superglobal arrays mentioned above. Older scripts, books, and tutorials may rely on this directive being on. If it were on, for example, one could use <var><var>$id</var></var> from the URL http://www.example.com/foo.php?id=42. Whether on or off,&nbsp;[[ link | php-language-reference-predefined-variables-get]]$_GET[&#39;id&#39;][[ endl ]]&nbsp;is available. </span></li>\r\n</ul>\r\n<p>\r\n\tFor more details on these changes, see the section on [[ link | php-language-reference-variables-predefined-variables]]predefined variables[[ endl ]]&nbsp;and links therein.</p>\r\n<p>\r\n\t&nbsp;</p>"
          }
        },
        {
          "What's next?": {
            "content": "<p>\r\n\tWith your new knowledge you should be able to understand most of the manual and also the various example scripts available in the example archives.</p>\r\n<p>\r\n\tTo view various slide presentations that show more of what PHP can do, see the PHP Conference Material Site:&nbsp;<a href=\"http://talks.php.net/\" target=\"_blank\">http://talks.php.net/</a></p>"
          }
        },
        {
          "HTTP authentication with PHP": {
            "content": "<p>\r\n\tIt is possible to use the <span><a href=\"function.header.php\" target=\"_blank\">header()</a></span> function to send an &quot;Authentication Required&quot; message to the client browser causing it to pop up a Username/Password input window. Once the user has filled in a username and a password, the URL containing the PHP script will be called again with the <a href=\"reserved.variables.php\" target=\"_blank\">predefined variables</a> <var><var>PHP_AUTH_USER</var></var>, <var><var>PHP_AUTH_PW</var></var>, and <var><var>AUTH_TYPE</var></var> set to the user name, password and authentication type respectively. These predefined variables are found in the <var><var><a href=\"reserved.variables.server.php\" target=\"_blank\">$_SERVER</a></var></var> array. Both &quot;Basic&quot; and &quot;Digest&quot; (since PHP 5.1.0) authentication methods are supported. See the <span><a href=\"function.header.php\" target=\"_blank\">header()</a></span> function for more information.</p>\r\n<p>\r\n\tAn example script fragment which would force client authentication on a page is as follows:</p>\r\n<p>\r\n\tExample #1 Basic HTTP Authentication example</p>\r\n<pre>\r\n<code>&lt;?php\r\nif (!isset($_SERVER[&#39;PHP_AUTH_USER&#39;])) {\r\n    header(&#39;WWW-Authenticate: Basic realm=&quot;My Realm&quot;&#39;);\r\n    header(&#39;HTTP/1.0 401 Unauthorized&#39;);\r\n    echo &#39;Text to send if user hits Cancel button&#39;;\r\n    exit;\r\n} else {\r\n    echo &quot;&lt;p&gt;Hello {$_SERVER[&#39;PHP_AUTH_USER&#39;]}.&lt;/p&gt;&quot;;\r\n    echo &quot;&lt;p&gt;You entered {$_SERVER[&#39;PHP_AUTH_PW&#39;]} as your password.&lt;/p&gt;&quot;;\r\n}\r\n?&gt;</code></pre>\r\n<p>\r\n\tExample #2 Digest HTTP Authentication example</p>\r\n<p>\r\n\tThis example shows you how to implement a simple Digest HTTP authentication script. For more information read the <a href=\"http://www.faqs.org/rfcs/rfc2617\" target=\"_blank\">&raquo;&nbsp;RFC 2617</a>.</p>\r\n<pre>\r\n<code>&lt;?php\r\n$realm = &#39;Restricted area&#39;;\r\n\r\n//user =&gt; password\r\n$users = array(&#39;admin&#39; =&gt; &#39;mypass&#39;, &#39;guest&#39; =&gt; &#39;guest&#39;);\r\n\r\n\r\nif (empty($_SERVER[&#39;PHP_AUTH_DIGEST&#39;])) {\r\n    header(&#39;HTTP/1.1 401 Unauthorized&#39;);\r\n    header(&#39;WWW-Authenticate: Digest realm=&quot;&#39;.$realm.\r\n           &#39;&quot;,qop=&quot;auth&quot;,nonce=&quot;&#39;.uniqid().&#39;&quot;,opaque=&quot;&#39;.md5($realm).&#39;&quot;&#39;);\r\n\r\n    die(&#39;Text to send if user hits Cancel button&#39;);\r\n}\r\n\r\n\r\n// analyze the PHP_AUTH_DIGEST variable\r\nif (!($data = http_digest_parse($_SERVER[&#39;PHP_AUTH_DIGEST&#39;])) ||\r\n    !isset($users[$data[&#39;username&#39;]]))\r\n    die(&#39;Wrong Credentials!&#39;);\r\n\r\n\r\n// generate the valid response\r\n$A1 = md5($data[&#39;username&#39;] . &#39;:&#39; . $realm . &#39;:&#39; . $users[$data[&#39;username&#39;]]);\r\n$A2 = md5($_SERVER[&#39;REQUEST_METHOD&#39;].&#39;:&#39;.$data[&#39;uri&#39;]);\r\n$valid_response = md5($A1.&#39;:&#39;.$data[&#39;nonce&#39;].&#39;:&#39;.$data[&#39;nc&#39;].&#39;:&#39;.$data[&#39;cnonce&#39;].&#39;:&#39;.$data[&#39;qop&#39;].&#39;:&#39;.$A2);\r\n\r\nif ($data[&#39;response&#39;] != $valid_response)\r\n    die(&#39;Wrong Credentials!&#39;);\r\n\r\n// ok, valid username &amp; password\r\necho &#39;You are logged in as: &#39; . $data[&#39;username&#39;];\r\n\r\n\r\n// function to parse the http auth header\r\nfunction http_digest_parse($txt)\r\n{\r\n    // protect against missing data\r\n    $needed_parts = array(&#39;nonce&#39;=&gt;1, &#39;nc&#39;=&gt;1, &#39;cnonce&#39;=&gt;1, &#39;qop&#39;=&gt;1, &#39;username&#39;=&gt;1, &#39;uri&#39;=&gt;1, &#39;response&#39;=&gt;1);\r\n    $data = array();\r\n    $keys = implode(&#39;|&#39;, array_keys($needed_parts));\r\n\r\n    preg_match_all(&#39;@(&#39; . $keys . &#39;)=(?:([\\&#39;&quot;])([^\\2]+?)\\2|([^\\s,]+))@&#39;, $txt, $matches, PREG_SET_ORDER);\r\n\r\n    foreach ($matches as $m) {\r\n        $data[$m[1]] = $m[3] ? $m[3] : $m[4];\r\n        unset($needed_parts[$m[1]]);\r\n    }\r\n\r\n    return $needed_parts ? false : $data;\r\n}\r\n?&gt;\r\n</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: Compatibility Note</p>\r\n\t<p>\r\n\t\tPlease be careful when coding the HTTP header lines. In order to guarantee maximum compatibility with all clients, the keyword &quot;Basic&quot; should be written with an uppercase &quot;B&quot;, the realm string must be enclosed in double (not single) quotes, and exactly one space should precede the 401 code in the HTTP/1.0 401 header line. Authentication parameters have to be comma-separated as seen in the digest example above.</p>\r\n</blockquote>\r\n<p>\r\n\tInstead of simply printing out <var><var>PHP_AUTH_USER</var></var> and <var><var>PHP_AUTH_PW</var></var>, as done in the above example, you may want to check the username and password for validity. Perhaps by sending a query to a database, or by looking up the user in a dbm file.</p>\r\n<p>\r\n\tWatch out for buggy Internet Explorer browsers out there. They seem very picky about the order of the headers. Sending the WWW-Authenticate header before the HTTP/1.0 401 header seems to do the trick for now.</p>\r\n<p>\r\n\tIn order to prevent someone from writing a script which reveals the password for a page that was authenticated through a traditional external mechanism, the PHP_AUTH variables will not be set if external authentication is enabled for that particular page and <a href=\"ini.sect.safe-mode.php#ini.safe-mode\" target=\"_blank\">safe mode</a> is enabled. Regardless, <var><var>REMOTE_USER</var></var> can be used to identify the externally-authenticated user. So, you can use <var><var><a href=\"reserved.variables.server.php\" target=\"_blank\">$_SERVER[&#39;REMOTE_USER&#39;]</a></var></var>.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: Configuration Note</p>\r\n\t<p>\r\n\t\tPHP uses the presence of an AuthType directive to determine whether external authentication is in effect.</p>\r\n</blockquote>\r\n<p>\r\n\tNote, however, that the above does not prevent someone who controls a non-authenticated URL from stealing passwords from authenticated URLs on the same server.</p>\r\n<p>\r\n\tBoth Netscape Navigator and Internet Explorer will clear the local browser window&#39;s authentication cache for the realm upon receiving a server response of 401. This can effectively &quot;log out&quot; a user, forcing them to re-enter their username and password. Some people use this to &quot;time out&quot; logins, or provide a &quot;log-out&quot; button.</p>\r\n<p>\r\n\tExample #3 HTTP Authentication example forcing a new name/password</p>\r\n<pre>\r\n<code>&lt;?php\r\nfunction authenticate() {\r\n    header(&#39;WWW-Authenticate: Basic realm=&quot;Test Authentication System&quot;&#39;);\r\n    header(&#39;HTTP/1.0 401 Unauthorized&#39;);\r\n    echo &quot;You must enter a valid login ID and password to access this resource\\n&quot;;\r\n    exit;\r\n}\r\n \r\nif (!isset($_SERVER[&#39;PHP_AUTH_USER&#39;]) ||\r\n    ($_POST[&#39;SeenBefore&#39;] == 1 &amp;&amp; $_POST[&#39;OldAuth&#39;] == $_SERVER[&#39;PHP_AUTH_USER&#39;])) {\r\n    authenticate();\r\n} else {\r\n    echo &quot;&lt;p&gt;Welcome: &quot; . htmlspecialchars($_SERVER[&#39;PHP_AUTH_USER&#39;]) . &quot;&lt;br /&gt;&quot;;\r\n    echo &quot;Old: &quot; . htmlspecialchars($_REQUEST[&#39;OldAuth&#39;]);\r\n    echo &quot;&lt;form action=&#39;&#39; method=&#39;post&#39;&gt;\\n&quot;;\r\n    echo &quot;&lt;input type=&#39;hidden&#39; name=&#39;SeenBefore&#39; value=&#39;1&#39; /&gt;\\n&quot;;\r\n    echo &quot;&lt;input type=&#39;hidden&#39; name=&#39;OldAuth&#39; value=\\&quot;&quot; . htmlspecialchars($_SERVER[&#39;PHP_AUTH_USER&#39;]) . &quot;\\&quot; /&gt;\\n&quot;;\r\n    echo &quot;&lt;input type=&#39;submit&#39; value=&#39;Re Authenticate&#39; /&gt;\\n&quot;;\r\n    echo &quot;&lt;/form&gt;&lt;/p&gt;\\n&quot;;\r\n}\r\n?&gt;\r\n</code></pre>\r\n<p>\r\n\tThis behavior is not required by the HTTP Basic authentication standard, so you should never depend on this. Testing with Lynx has shown that Lynx does not clear the authentication credentials with a 401 server response, so pressing back and then forward again will open the resource as long as the credential requirements haven&#39;t changed. The user can press the &#39;_&#39; key to clear their authentication information, however.</p>\r\n<p>\r\n\tIn order to get HTTP Authentication to work using IIS server with the CGI version of PHP you must edit your IIS configuration &quot;Directory Security&quot;. Click on &quot;Edit&quot; and only check &quot;Anonymous Access&quot;, all other fields should be left unchecked.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: IIS Note:<br />\r\n\t\t<span> For HTTP Authentication to work with IIS, the PHP directive <a href=\"ini.core.php#ini.cgi.rfc2616-headers\" target=\"_blank\">cgi.rfc2616_headers</a> must be set to 0 (the default value). </span></p>\r\n</blockquote>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote:</p>\r\n\t<p>\r\n\t\tIf <a href=\"ini.sect.safe-mode.php#ini.safe-mode\" target=\"_blank\">safe mode</a> is enabled, the uid of the script is added to the realm part of the WWW-Authenticate header.</p>\r\n</blockquote>"
          }
        },
        {
          "Cookies": {
            "content": "<p>\r\n\tPHP transparently supports <acronym>HTTP</acronym> cookies. Cookies are a mechanism for storing data in the remote browser and thus tracking or identifying return users. You can set cookies using the <span><a href=\"function.setcookie.php\" target=\"_blank\">setcookie()</a></span> or <span><a href=\"function.setrawcookie.php\" target=\"_blank\">setrawcookie()</a></span> function. Cookies are part of the <acronym>HTTP</acronym> header, so <span><a href=\"function.setcookie.php\" target=\"_blank\">setcookie()</a></span> must be called before any output is sent to the browser. This is the same limitation that <span><a href=\"function.header.php\" target=\"_blank\">header()</a></span> has. You can use the <a href=\"ref.outcontrol.php\" target=\"_blank\">output buffering functions</a> to delay the script output until you have decided whether or not to set any cookies or send any headers.</p>\r\n<p>\r\n\tAny cookies sent to server from the client will automatically be included into a <var><var><a href=\"reserved.variables.cookies.php\" target=\"_blank\">$_COOKIE</a></var></var> auto-global array if <a href=\"ini.core.php#ini.variables-order\" target=\"_blank\">variables_order</a> contains &quot;C&quot;. If you wish to assign multiple values to a single cookie, just add <em>[]</em> to the cookie name.</p>\r\n<p>\r\n\tOn older PHP systems (5.3 or earlier), <a href=\"ini.core.php#ini.register-globals\" target=\"_blank\">register_globals</a> may be enabled, which may cause undesirable and insecure operation. If this is enabled, cookies will be registered as global variables.</p>\r\n<p>\r\n\tFor more details, including notes on browser bugs, see the <span><a href=\"function.setcookie.php\" target=\"_blank\">setcookie()</a></span> and <span><a href=\"function.setrawcookie.php\" target=\"_blank\">setrawcookie()</a></span> function.</p>"
          }
        }
      ]
    }
  }
]