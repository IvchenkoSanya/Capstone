[
  {
    "query": "math-for-data-science",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "Math for data science",
      "lessons": [
        {
          "title": "Introduction to Machine Learning",
          "topics": []
        },
        {
          "title": "Linear Regression with One Variable",
          "topics": []
        }
      ],
      "content": [
        {
          "Introduction to Machine Learning": {
            "content": "<h4>\r\n\tA machine learning algorithm is an algorithm that is able to learn from data.</h4>\r\n<p>\r\n\tBut what do we mean by learning?</p>\r\n<p>\r\n\tTom Mitchell provides a succinct de\ufb01nition:</p>\r\n<blockquote>\r\n\t<h4>\r\n\t\t&ldquo;A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.&rdquo;</h4>\r\n</blockquote>\r\n<h2>\r\n\tThe Task, T</h2>\r\n<p>\r\n\tMachine learning enables us to tackle tasks that are too di\ufb03cult to solve with \ufb01xed programs written and designed by human beings. From a scienti\ufb01c and philosophical point of view, machine learning is interesting because developing our understanding of it entails developing our understanding of the principles that underlie intelligence.</p>\r\n<p>\r\n\tIn this relatively formal de\ufb01nition of the word &ldquo;task,&rdquo; the process of learning itself is not the task. Learning is our means of attaining the ability to perform the task.</p>\r\n<p>\r\n\tMany kinds of tasks can be solved with machine learning. Some of the most common machine learning tasks include the following:</p>\r\n<ul>\r\n\t<li>\r\n\t\tClassification</li>\r\n\t<li>\r\n\t\tClassification with missing inputs</li>\r\n\t<li>\r\n\t\tRegression</li>\r\n\t<li>\r\n\t\tTranscription</li>\r\n\t<li>\r\n\t\tMachine translation</li>\r\n\t<li>\r\n\t\tAnomaly detection</li>\r\n\t<li>\r\n\t\tDenoising</li>\r\n</ul>\r\n<p>\r\n\tOf course, many other tasks and types of tasks are possible. The types of tasks we list here are intended only to provide examples of what machine learning can do, not to de\ufb01ne a rigid taxonomy of tasks.</p>\r\n<h2>\r\n\tThe Performance Measure, P</h2>\r\n<p>\r\n\tTo evaluate the abilities of a machine learning algorithm, we must design a quantitative measure of its performance. Usually this performance measure P is speci\ufb01c to the task T being carried out by the system.</p>\r\n<h2>\r\n\tThe Experience, E</h2>\r\n<p>\r\n\tMachine learning algorithms can be broadly categorized as [[link | ml-unsupervised]]unsupervised[[endl]] or [[link | ml-supervised]]supervised[[endl]] by what kind of experience they are allowed to have during the learning process.</p>\r\n<h4>\r\n\tIn [[link | ml-supervised]]supervised learning[[endl]], we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</h4>\r\n<h4>\r\n\t[[link | ml-unsupervised]]Unsupervised learning[[endl]] allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don&#39;t necessarily know the effect of the variables.</h4>\r\n<p>\r\n\tThough unsupervised learning and supervised learning are not completely formal or distinct concepts, they do help roughly categorize some of the things we do with machine learning algorithms. Traditionally, people refer to regression, classi\ufb01cationand structured output problems as supervised learning. Density estimation in support of other tasks is usually considered unsupervised learning.</p>"
          }
        },
        {
          "Linear Regression with One Variable": {
            "content": "<p>\r\n\tLinear regression is one of the most famous way to describe your data and make predictions on it. As the name implies, linear regression solves a regression problem. In other words, the goal is to build a system that can take a vector <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x \\in R^n\" /> as input and predict the value of a scalar <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y \\in R\" /> as its output. The output of linear regression is a linear function of the input.</p>\r\n<h3>\r\n\t&nbsp; Model representation</h3>\r\n<p>\r\n\tTo establish notation for future use, we will use <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x^{(i)}\" /> to denote the &ldquo;input&rdquo; variables (living area in this example), also called input features, and <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y^{(i)}\" /> to denote the &ldquo;output&rdquo; or target variable that we are trying to predict (price). A pair <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? (x^{(i)},y^{(i)}) \" /> is called a training example, and the dataset that we&rsquo;ll be using to learn - a list of m training examples <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? (x^{(i)},y^{(i)}); i=1,\\dots,m \" /> - is called a training set. Note that the superscript <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? (i)\" />; in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? X\" /> to denote the space of input values, and <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? Y\" /> to denote the space of output values. In this example, <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? X=Y=R\" />.</p>\r\n<p>\r\n\tTo describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? h: X \\rightarrow Y\" /> so that <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? h(x)\" /> is a &ldquo;good&rdquo; predictor for the corresponding value of <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y\" />. For historical reasons, this function <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? h\" /> is called a hypothesis. Seen pictorially, the process is therefore like this:</p>\r\n<div>\r\n\t[[ image(data-science/base-machine-learning/lr-model-representation.png, center) ]]</div>\r\n<h3>\r\n\tThe Hypothesis Function</h3>\r\n<p>\r\n\tThe hypothesis function must have a formula, like any other function in the world. That is:</p>\r\n<blockquote>\r\n\t<p>\r\n\t\t<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? h_\\theta(x)=\\theta_0+\\theta_1(x)\" /></p>\r\n</blockquote>\r\n<p>\r\n\tTheta&#39;s (<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_i\" /> in general) are the parameters of the function. Usually the theta subscript gets dropped and the hypothesis function is simply written as <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? h(x)\" /></p>\r\n<p>\r\n\tIn our humble hypothesis function there is only one variable, that is <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x\" />. For this reason our task is often called linear regression with one variable. Experts call it also univariate linear regression, where univariate means &quot;one variable&quot;.</p>\r\n<h3>\r\n\tCost Function</h3>\r\n<p>\r\n\tWe can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x's\" /> and the actual output <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y's\" />.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\t<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? J(\\theta_0, \\theta_1)=\\frac{1}{2m}\\sum_{i=1}^{m}(\\widehat{y_i}-y_i)^2=\\frac{1}{2m}\\sum_{i=1}^{m}(h_\\theta(x_i)-y_i)^2 \" /></p>\r\n</blockquote>\r\n<p>\r\n\tThis function is otherwise called the &quot;Squared error function&quot;, or &quot;Mean squared error&quot;. The mean is halved as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the 1/2 term.</p>\r\n<h3>\r\n\tGradient Descent</h3>\r\n<p>\r\n\tSo we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That&#39;s where gradient descent comes in.</p>\r\n<p>\r\n\tImagine that we graph our hypothesis function based on its fields <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_0\" /> and <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_1\" /> (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x\" /> and <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y\" /> itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters.</p>\r\n<p>\r\n\tWe put <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_0\" /> on the <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x\" /> axis and <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_1\" /> on the <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y\" /> axis, with the cost function on the vertical <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? z\" /> axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup.&nbsp;</p>\r\n<div>\r\n\t[[ image(data-science/base-machine-learning/lr-grad1.png, center) ]]</div>\r\n<p>\r\n\tWe will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum. The red arrows show the minimum points in the graph.</p>\r\n<p>\r\n\tThe way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\alpha\" />, which is called the learning rate.</p>\r\n<p>\r\n\tFor example, the distance between each &#39;star&#39; in the graph above represents a step determined by our parameter <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\alpha\" />. A smaller <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\alpha\" /> would result in a smaller step and a larger <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\alpha\" /> results in a larger step. The direction in which the step is taken is determined by the partial derivative of <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? J(\\theta_0, \\theta_1)\" />. Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tThe gradient descent algorithm is:</p>\r\n\t<p>\r\n\t\trepeat until convergence:</p>\r\n\t<p>\r\n\t\t<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_j:=\\theta_j-\\alpha \\frac{\\delta}{\\delta \\theta_j}J(\\theta_0,\\theta_1)\" /></p>\r\n</blockquote>\r\n<p>\r\n\twhere <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? j=0,1\" /> represents the feature index number.</p>\r\n<p>\r\n\tAt each iteration <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? j \" />, one should simultaneously update the parameters <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_1,\\theta_2,\\dots,\\theta_n\" />. Updating a specific parameter prior to calculating another one on the <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? j^{th}\" /> iteration would yield to a wrong implementation.</p>\r\n<h3>\r\n\tGradient Descent For Linear Regression</h3>\r\n<p>\r\n\tWhen specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to :</p>\r\n<blockquote>\r\n\t<p>\r\n\t\trepeat until convergence: <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\{\" /></p>\r\n\t<p>\r\n\t\t<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_0:=\\theta_0-\\alpha\\frac{1}{m}\\sum_{i=1}^{m}(h_\\theta(x_i)-y_i)\" /></p>\r\n\t<p>\r\n\t\t<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_1:=\\theta_1-\\alpha\\frac{1}{m}\\sum_{i=1}^{m}((h_\\theta(x_i)-y_i)x_i)\" /></p>\r\n\t<p>\r\n\t\t<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\}\" /></p>\r\n</blockquote>\r\n<p>\r\n\twhere <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? m\" /> is the size of the training set,&nbsp;<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_0\" /> a constant that will be changing simultaneously with&nbsp;<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta_1\" /> and <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x_i\" />,&nbsp;<img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? y_i\" /> are values of the given training set (data).</p>\r\n<p>\r\n\tThe point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate.</p>\r\n<p>\r\n\tSo, this is simply gradient descent on the original cost function <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? J\" />. This method looks at every example in the entire training set on every step, and is called batch gradient descent. Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima; thus gradient descent always converges (assuming the learning rate &alpha; is not too large) to the global minimum. Indeed, <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? J\" /> is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function.</p>\r\n<div>\r\n\t[[ image(data-science/base-machine-learning/grad4.png, center) ]]</div>\r\n<p>\r\n\tThe ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? x's\" /> in the figure (joined by straight lines) mark the successive values of <img a=\"\" be=\"\" border=\"0\" discrete=\"\" distribution=\"\" img=\"\" probability=\"\" src=\"http://latex.codecogs.com/svg.latex? \\theta\" /> that gradient descent went through as it converged to its minimum.<br />\r\n\t&nbsp;</p>"
          }
        }
      ]
    }
  }
]