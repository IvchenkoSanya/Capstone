[
  {
    "query": "angular",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "Getting Started Angular",
      "lessons": [
        {
          "title": "NgModules Introduction",
          "topics": []
        },
        {
          "title": "JavaScript Modules vs. NgModules",
          "topics": []
        },
        {
          "title": "Frequently Used NgModules",
          "topics": []
        },
        {
          "title": "Types of Feature Modules",
          "topics": []
        },
        {
          "title": "Entry Components",
          "topics": []
        },
        {
          "title": "Feature Modules",
          "topics": []
        },
        {
          "title": "Providers",
          "topics": []
        },
        {
          "title": "Singleton services",
          "topics": []
        },
        {
          "title": "HttpClient",
          "topics": []
        },
        {
          "title": "Component styles",
          "topics": []
        },
        {
          "title": "Dynamic component loader",
          "topics": []
        },
        {
          "title": "Angular elements overview",
          "topics": []
        }
      ],
      "content": [
        {
          "NgModules Introduction": {
            "content": "<p>\r\n\tNgModules&nbsp;configure the injector and the compiler and help organize related things together.</p>\r\n<p>\r\n\tAn NgModule is a class marked by the&nbsp;<code>@NgModule</code>&nbsp;decorator.&nbsp;<code>@NgModule</code>&nbsp;takes a metadata object that describes how to compile a component&#39;s template and how to create an injector at runtime. It identifies the module&#39;s own components, directives, and pipes, making some of them public, through the&nbsp;<code>exports</code>&nbsp;property, so that external components can use them.&nbsp;<code>@NgModule</code>&nbsp;can also add service providers to the application dependency injectors.</p>\r\n<h2>\r\n\tAngular modularity</h2>\r\n<p>\r\n\tModules are a great way to organize an application and extend it with capabilities from external libraries.</p>\r\n<p>\r\n\tAngular libraries are NgModules, such as&nbsp;<code>FormsModule</code>,&nbsp;<code>HttpClientModule</code>, and&nbsp;<code>RouterModule</code>. Many third-party libraries are available as NgModules such as&nbsp;Material Design,&nbsp;Ionic, and&nbsp;AngularFire2.</p>\r\n<p>\r\n\tNgModules consolidate components, directives, and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common collection of utilities.</p>\r\n<p>\r\n\tModules can also add services to the application. Such services might be internally developed, like something you&#39;d develop yourself or come from outside sources, such as the Angular router and HTTP client.</p>\r\n<p>\r\n\tModules can be loaded eagerly when the application starts or lazy loaded asynchronously by the router.</p>\r\n<p>\r\n\tNgModule metadata does the following:</p>\r\n<ul>\r\n\t<li>\r\n\t\tDeclares which components, directives, and pipes belong to the module.</li>\r\n\t<li>\r\n\t\tMakes some of those components, directives, and pipes public so that other module&#39;s component templates can use them.</li>\r\n\t<li>\r\n\t\tImports other modules with the components, directives, and pipes that components in the current module need.</li>\r\n\t<li>\r\n\t\tProvides services that the other application components can use.</li>\r\n</ul>\r\n<p>\r\n\tEvery Angular app has at least one module, the root module. You&nbsp;bootstrap&nbsp;that module to launch the application.</p>\r\n<p>\r\n\tThe root module is all you need in a simple application with a few components. As the app grows, you refactor the root module into&nbsp;feature modules&nbsp;that represent collections of related functionality. You then import these modules into the root module.</p>\r\n<h2>\r\n\tThe basic NgModule</h2>\r\n<p>\r\n\tThe&nbsp;Angular CLI&nbsp;generates the following basic&nbsp;<code>AppModule</code>&nbsp;when creating a new app.</p>\r\n<p>\r\n\tsrc/app/app.module.ts (default AppModule)</p>\r\n<pre class=\"prettyprint lang-\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">// imports</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">import</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/platform-browser/BrowserModule\" style=\"font-size: inherit; line-height: 2.4rem; letter-spacing: 0.03rem; font-weight: inherit; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">BrowserModule</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">from</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;@angular/platform-browser&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">import</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/NgModule\" style=\"font-size: inherit; line-height: 2.4rem; letter-spacing: 0.03rem; font-weight: inherit; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">NgModule</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">from</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;@angular/core&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">import</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AppComponent</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">from</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;./app.component&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n</span><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">// @</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/NgModule\" style=\"font-size: inherit; line-height: 2.4rem; letter-spacing: 0.03rem; font-weight: inherit; text-decoration-line: none; cursor: pointer;\"><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">NgModule</span></a><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\"> decorator with its metadata</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/NgModule\" style=\"font-size: inherit; line-height: 2.4rem; letter-spacing: 0.03rem; font-weight: inherit; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">NgModule</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">({</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  declarations</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AppComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">],</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  imports</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><a class=\"code-anchor\" href=\"https://angular.io/api/platform-browser/BrowserModule\" style=\"font-size: inherit; line-height: 2.4rem; letter-spacing: 0.03rem; font-weight: inherit; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">BrowserModule</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">],</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  providers</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[],</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  bootstrap</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AppComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">]</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">export</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">class</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AppModule</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{}</span></code></pre>\r\n<p>\r\n\tAt the top are the import statements. The next section is where you configure the&nbsp;<code>@NgModule</code>&nbsp;by stating what components and directives belong to it (<code>declarations</code>) as well as which other modules it uses (<code>imports</code>). For more information on the structure of an&nbsp;<code>@NgModule</code>, be sure to read&nbsp;Bootstrapping.</p>"
          }
        },
        {
          "JavaScript Modules vs. NgModules": {
            "content": "<p>\r\n\tJavaScript and Angular use modules to organize code, and though they organize it differently, Angular apps rely on both.</p>\r\n<h2>\r\n\tJavaScript modules</h2>\r\n<p>\r\n\tIn JavaScript, modules are individual files with JavaScript code in them. To make what&rsquo;s in them available, you write an export statement, usually after the relevant code, like this:</p>\r\n<pre>\r\n<code><span>export</span><span> </span><span>class</span><span> </span><span>AppComponent</span><span> </span><span>{</span><span> </span><span>...</span><span> </span><span>}</span></code></pre>\r\n<p>\r\n\tThen, when you need that file&rsquo;s code in another file, you import it like this:</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>AppComponent</span><span> </span><span>}</span><span> from </span><span>&#39;./app.component&#39;</span><span>;</span></code></pre>\r\n<p>\r\n\tJavaScript modules help you namespace, preventing accidental global variables.</p>\r\n<p>\r\n\tFor more information on JavaScript modules, see&nbsp;JavaScript/ECMAScript modules.</p>\r\n<h2>\r\n\tNgModules</h2>\r\n<p>\r\n\tNgModules are classes decorated with&nbsp;<code>@NgModule</code>. The&nbsp;<code>@NgModule</code>&nbsp;decorator&rsquo;s&nbsp;<code>imports</code>&nbsp;array tells Angular what other NgModules the current module needs. The modules in the&nbsp;<code>imports</code>&nbsp;array are different than JavaScript modules because they are NgModules rather than regular JavaScript modules. Classes with an&nbsp;<code>@NgModule</code>&nbsp;decorator are by convention kept in their own files, but what makes them an&nbsp;<code>NgModule</code>&nbsp;isn&rsquo;t being in their own file, like JavaScript modules; it&rsquo;s the presence of&nbsp;<code>@NgModule</code>&nbsp;and its metadata.</p>\r\n<p>\r\n\tThe&nbsp;<code>AppModule</code>&nbsp;generated from the&nbsp;Angular CLI&nbsp;demonstrates both kinds of modules in action:</p>\r\n<pre>\r\n<code><span>/* These are JavaScript import statements. Angular doesn&rsquo;t know anything about these. */</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>BrowserModule</span><span> </span><span>}</span><span> from </span><span>&#39;@angular/platform-browser&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>NgModule</span><span> </span><span>}</span><span> from </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>AppComponent</span><span> </span><span>}</span><span> from </span><span>&#39;./app.component&#39;</span><span>;</span><span>\r\n\r\n</span><span>/* The @</span><span>NgModule</span><span> decorator lets Angular know that this is an NgModule. */</span><span>\r\n</span><span>@</span><span>NgModule</span><span>({</span><span>\r\n  declarations</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>AppComponent</span><span>\r\n  </span><span>],</span><span>\r\n  imports</span><span>:</span><span> </span><span>[</span><span>     </span><span>/* These are </span><span>NgModule</span><span> imports. */</span><span>\r\n    </span><span>BrowserModule</span><span>\r\n  </span><span>],</span><span>\r\n  providers</span><span>:</span><span> </span><span>[],</span><span>\r\n  bootstrap</span><span>:</span><span> </span><span>[</span><span>AppComponent</span><span>]</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>AppModule</span><span> </span><span>{</span><span> </span><span>}</span></code></pre>\r\n<p>\r\n\tThe NgModule classes differ from JavaScript module in the following key ways:</p>\r\n<ul>\r\n\t<li>\r\n\t\tAn NgModule bounds&nbsp;declarable classes&nbsp;only. Declarables are the only classes that matter to the&nbsp;Angular compiler.</li>\r\n\t<li>\r\n\t\tInstead of defining all member classes in one giant file as in a JavaScript module, you list the module&#39;s classes in the&nbsp;<code>@NgModule.declarations</code>&nbsp;list.</li>\r\n\t<li>\r\n\t\tAn NgModule can only export the&nbsp;declarable classes&nbsp;it owns or imports from other modules. It doesn&#39;t declare or export any other kind of class.</li>\r\n\t<li>\r\n\t\tUnlike JavaScript modules, an NgModule can extend the&nbsp;<em>entire</em>&nbsp;application with services by adding providers to the&nbsp;<code>@NgModule.providers</code>&nbsp;list.</li>\r\n</ul>"
          }
        },
        {
          "Frequently Used NgModules": {
            "content": "<p>\r\n\tAn Angular app needs at least one module that serves as the root module. As you add features to your app, you can add them in modules. The following are frequently used Angular modules with examples of some of the things they contain:</p>\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th>\r\n\t\t\t\tNgModule</th>\r\n\t\t\t<th>\r\n\t\t\t\tImport it from</th>\r\n\t\t\t<th>\r\n\t\t\t\tWhy you use it</th>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>BrowserModule</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>@angular/platform-browser</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhen you want to run your app in a browser</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>CommonModule</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>@angular/common</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhen you want to use&nbsp;<code>NgIf</code>,&nbsp;<code>NgFor</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>FormsModule</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>@angular/forms</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhen you want to build template driven forms (includes&nbsp;<code>NgModel</code>)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>ReactiveFormsModule</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>@angular/forms</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhen you want to build reactive forms</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>RouterModule</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>@angular/router</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhen you want to use&nbsp;<code>RouterLink</code>,&nbsp;<code>.forRoot()</code>, and&nbsp;<code>.forChild()</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>HttpClientModule</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>@angular/common/http</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhen you want to talk to a server</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n<h2>\r\n\tImporting modules</h2>\r\n<p>\r\n\tWhen you use these Angular modules, import them in&nbsp;<code>AppModule</code>, or your feature module as appropriate, and list them in the&nbsp;<code>@NgModule</code>&nbsp;<code>imports</code>&nbsp;array. For example, in the basic app generated by the&nbsp;Angular CLI,&nbsp;<code>BrowserModule</code>&nbsp;is the first import at the top of the&nbsp;<code>AppModule</code>,&nbsp;<code>app.module.ts</code>.</p>\r\n<pre>\r\n<code><span>/* import modules so that AppModule can access them */</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>BrowserModule</span><span> </span><span>}</span><span> from </span><span>&#39;@angular/platform-browser&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>NgModule</span><span> </span><span>}</span><span> from </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>AppComponent</span><span> </span><span>}</span><span> from </span><span>&#39;./app.component&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>NgModule</span><span>({</span><span>\r\n  declarations</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>AppComponent</span><span>\r\n  </span><span>],</span><span>\r\n  imports</span><span>:</span><span> </span><span>[</span><span> </span><span>/* add modules here so Angular knows to use them */</span><span>\r\n    </span><span>BrowserModule</span><span>,</span><span>\r\n  </span><span>],</span><span>\r\n  providers</span><span>:</span><span> </span><span>[],</span><span>\r\n  bootstrap</span><span>:</span><span> </span><span>[</span><span>AppComponent</span><span>]</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>AppModule</span><span> </span><span>{</span><span> </span><span>}</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe imports at the top of the array are JavaScript import statements while the&nbsp;<code>imports</code>&nbsp;array within&nbsp;<code>@NgModule</code>&nbsp;is Angular specific. For more information on the difference, see&nbsp;JavaScript Modules vs. NgModules.</p>\r\n<h2>\r\n\t<code>BrowserModule</code>&nbsp;and&nbsp;<code>CommonModule</code></h2>\r\n<p>\r\n\t<code>BrowserModule</code>&nbsp;imports&nbsp;<code>CommonModule</code>, which contributes many common directives such as&nbsp;<code>ngIf</code>&nbsp;and&nbsp;<code>ngFor</code>. Additionally,&nbsp;<code>BrowserModule</code>&nbsp;re-exports&nbsp;<code>CommonModule</code>&nbsp;making all of its directives available to any module that imports&nbsp;<code>BrowserModule</code>.</p>\r\n<p>\r\n\tFor apps that run in the browser, import&nbsp;<code>BrowserModule</code>&nbsp;in the root&nbsp;<code>AppModule</code>&nbsp;because it provides services that are essential to launch and run a browser app.&nbsp;BrowserModule&rsquo;s providers are for the whole app so it should only be in the root module, not in feature modules. Feature modules only need the common directives in&nbsp;<code>CommonModule</code>; they don&rsquo;t need to re-install app-wide providers.</p>\r\n<p>\r\n\tIf you do import&nbsp;<code>BrowserModule</code>&nbsp;into a lazy loaded feature module, Angular returns an error telling you to use&nbsp;<code>CommonModule</code>&nbsp;instead.</p>\r\n<p>\r\n\t<figure>\r\n\t<div>\r\n\t\t<img alt=\"BrowserModule error\" src=\"https://angular.io/generated/images/guide/frequent-ngmodules/browser-module-error.gif\" style=\"max-width: 100%; height: auto;\" width=\"750\" /></div>\r\n\t</figure></p>"
          }
        },
        {
          "Types of Feature Modules": {
            "content": "<p>\r\n\tThere are five general categories of feature modules which tend to fall into the following groups:</p>\r\n<ul>\r\n\t<li>\r\n\t\tDomain feature modules.</li>\r\n\t<li>\r\n\t\tRouted feature modules.</li>\r\n\t<li>\r\n\t\tRouting modules.</li>\r\n\t<li>\r\n\t\tService feature modules.</li>\r\n\t<li>\r\n\t\tWidget feature modules.</li>\r\n</ul>\r\n<p>\r\n\tWhile the following guidelines describe the use of each type and their typical characteristics, in real world apps, you may see hybrids.</p>\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th>\r\n\t\t\t\tFeature Module</th>\r\n\t\t\t<th>\r\n\t\t\t\tGuidelines</th>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tDomain</td>\r\n\t\t\t<td>\r\n\t\t\t\tDomain feature modules deliver a user experience dedicated to a particular application domain like editing a customer or placing an order.\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThey typically have a top component that acts as the feature root and private, supporting sub-components descend from it.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDomain feature modules consist mostly of declarations. Only the top component is exported.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDomain feature modules rarely have providers. When they do, the lifetime of the provided services should be the same as the lifetime of the module.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tDomain feature modules are typically imported exactly once by a larger feature module.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThey might be imported by the root&nbsp;<code>AppModule</code>&nbsp;of a small application that lacks routing.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tRouted</td>\r\n\t\t\t<td>\r\n\t\t\t\tRouted feature modules are domain feature modules whose top components are the targets of router navigation routes.\r\n\t\t\t\t<p>\r\n\t\t\t\t\tAll lazy-loaded modules are routed feature modules by definition.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tRouted feature modules don&rsquo;t export anything because their components never appear in the template of an external component.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA lazy-loaded routed feature module should not be imported by any module. Doing so would trigger an eager load, defeating the purpose of lazy loading.That means you won&rsquo;t see them mentioned among the&nbsp;<code>AppModule</code>&nbsp;imports. An eager loaded routed feature module must be imported by another module so that the compiler learns about its components.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tRouted feature modules rarely have providers for reasons explained in&nbsp;Lazy Loading Feature Modules. When they do, the lifetime of the provided services should be the same as the lifetime of the module. Don&#39;t provide application-wide singleton services in a routed feature module or in a module that the routed module imports.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tRouting</td>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA routing module provides routing configuration for another module and separates routing concerns from its companion module.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA routing module typically does the following:</p>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tDefines routes.</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tAdds router configuration to the module&#39;s imports.</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tAdds guard and resolver service providers to the module&#39;s providers.</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tThe name of the routing module should parallel the name of its companion module, using the suffix &quot;Routing&quot;. For example,&nbsp;<code>FooModule</code>&nbsp;in&nbsp;<code>foo.module.ts</code>&nbsp;has a routing module named&nbsp;<code>FooRoutingModule</code>&nbsp;in&nbsp;<code>foo-routing.module.ts</code>. If the companion module is the root&nbsp;<code>AppModule</code>, the&nbsp;<code>AppRoutingModule</code>&nbsp;adds router configuration to its imports with&nbsp;<code>RouterModule.forRoot(routes)</code>. All other routing modules are children that import&nbsp;<code>RouterModule.forChild(routes)</code>.</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tA routing module re-exports the&nbsp;<code>RouterModule</code>&nbsp;as a convenience so that components of the companion module have access to router directives such as&nbsp;<code>RouterLink</code>&nbsp;and&nbsp;<code>RouterOutlet</code>.</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tA routing module does not have its own declarations. Components, directives, and pipes are the responsibility of the feature module, not the routing module.</li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA routing module should only be imported by its companion module.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tService</td>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tService modules provide utility services such as data access and messaging. Ideally, they consist entirely of providers and have no declarations. Angular&#39;s&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClientModule\" target=\"_blank\">HttpClientModule</a></code>&nbsp;is a good example of a service module.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tThe root&nbsp;<code>AppModule</code>&nbsp;is the only module that should import service modules.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tWidget</td>\r\n\t\t\t<td>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA widget module makes components, directives, and pipes available to external modules. Many third-party UI component libraries are widget modules.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA widget module should consist entirely of declarations, most of them exported.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tA widget module should rarely have providers.</p>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tImport widget modules in any module whose component templates need the widgets.</p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n<p>\r\n\tThe following table summarizes the key characteristics of each feature module group.</p>\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th>\r\n\t\t\t\tFeature Module</th>\r\n\t\t\t<th>\r\n\t\t\t\tDeclarations</th>\r\n\t\t\t<th>\r\n\t\t\t\tProviders</th>\r\n\t\t\t<th>\r\n\t\t\t\tExports</th>\r\n\t\t\t<th>\r\n\t\t\t\tImported by</th>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tDomain</td>\r\n\t\t\t<td>\r\n\t\t\t\tYes</td>\r\n\t\t\t<td>\r\n\t\t\t\tRare</td>\r\n\t\t\t<td>\r\n\t\t\t\tTop component</td>\r\n\t\t\t<td>\r\n\t\t\t\tFeature, AppModule</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tRouted</td>\r\n\t\t\t<td>\r\n\t\t\t\tYes</td>\r\n\t\t\t<td>\r\n\t\t\t\tRare</td>\r\n\t\t\t<td>\r\n\t\t\t\tNo</td>\r\n\t\t\t<td>\r\n\t\t\t\tNone</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tRouting</td>\r\n\t\t\t<td>\r\n\t\t\t\tNo</td>\r\n\t\t\t<td>\r\n\t\t\t\tYes (Guards)</td>\r\n\t\t\t<td>\r\n\t\t\t\tRouterModule</td>\r\n\t\t\t<td>\r\n\t\t\t\tFeature (for routing)</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tService</td>\r\n\t\t\t<td>\r\n\t\t\t\tNo</td>\r\n\t\t\t<td>\r\n\t\t\t\tYes</td>\r\n\t\t\t<td>\r\n\t\t\t\tNo</td>\r\n\t\t\t<td>\r\n\t\t\t\tAppModule</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tWidget</td>\r\n\t\t\t<td>\r\n\t\t\t\tYes</td>\r\n\t\t\t<td>\r\n\t\t\t\tRare</td>\r\n\t\t\t<td>\r\n\t\t\t\tYes</td>\r\n\t\t\t<td>\r\n\t\t\t\tFeature<br />\r\n\t\t\t\t&nbsp;</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>"
          }
        },
        {
          "Entry Components": {
            "content": "<p>\r\n\tAn entry component is any component that Angular loads imperatively, (which means you&rsquo;re not referencing it in the template), by type. You specify an entry component by bootstrapping it in an NgModule, or including it in a routing definition.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tTo contrast the two types of components, there are components which are included in the template, which are declarative. Additionally, there are components which you load imperatively; that is, entry components.</p>\r\n</blockquote>\r\n<p>\r\n\tThere are two main kinds of entry components:</p>\r\n<ul>\r\n\t<li>\r\n\t\tThe bootstrapped root component.</li>\r\n\t<li>\r\n\t\tA component you specify in a route definition.</li>\r\n</ul>\r\n<h2>\r\n\tA bootstrapped entry component</h2>\r\n<p>\r\n\tThe following is an example of specifying a bootstrapped component,&nbsp;<code>AppComponent</code>, in a basic&nbsp;<code>app.module.ts</code>:</p>\r\n<pre>\r\n<code><span>@</span><span>NgModule</span><span>({</span><span>\r\n  declarations</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>AppComponent</span><span>\r\n  </span><span>],</span><span>\r\n  imports</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>BrowserModule</span><span>,</span><span>\r\n    </span><span>FormsModule</span><span>,</span><span>\r\n    </span><span>HttpClientModule</span><span>,</span><span>\r\n    </span><span>AppRoutingModule</span><span>\r\n  </span><span>],</span><span>\r\n  providers</span><span>:</span><span> </span><span>[],</span><span>\r\n  bootstrap</span><span>:</span><span> </span><span>[</span><span>AppComponent</span><span>]</span><span> </span><span>// bootstrapped entry component</span><span>\r\n</span><span>})</span></code></pre>\r\n<p>\r\n\tA bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</p>\r\n<p>\r\n\tAngular loads a root&nbsp;<code>AppComponent</code>&nbsp;dynamically because it&#39;s listed by type in&nbsp;<code>@NgModule.bootstrap</code>.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tA component can also be bootstrapped imperatively in the module&#39;s&nbsp;<code>ngDoBootstrap()</code>&nbsp;method. The&nbsp;<code>@NgModule.bootstrap</code>&nbsp;property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</p>\r\n</blockquote>\r\n<p>\r\n\tA bootstrapped component is necessarily an entry component because bootstrapping is an imperative process, thus it needs to have an entry component.</p>\r\n<h2>\r\n\tA routed entry component</h2>\r\n<p>\r\n\tThe second kind of entry component occurs in a route definition like this:</p>\r\n<pre>\r\n<code><span>const</span><span> routes</span><span>:</span><span> </span><span>Routes</span><span> </span><span>=</span><span> </span><span>[</span><span>\r\n  </span><span>{</span><span>\r\n    path</span><span>:</span><span> </span><span>&#39;&#39;</span><span>,</span><span>\r\n    component</span><span>:</span><span> </span><span>CustomerListComponent</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>];</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tA route definition refers to a component by its type with&nbsp;<code>component: CustomerListComponent</code>.</p>\r\n<p>\r\n\tAll router components must be entry components. Because this would require you to add the component in two places (router and&nbsp;<code>entryComponents</code>) the Compiler is smart enough to recognize that this is a router definition and automatically add the router component into&nbsp;<code>entryComponents</code>.</p>\r\n<h2>\r\n\tThe&nbsp;<code>entryComponents</code>&nbsp;array</h2>\r\n<p>\r\n\tThough the&nbsp;<code>@NgModule</code>&nbsp;decorator has an&nbsp;<code>entryComponents</code>&nbsp;array, most of the time you won&#39;t have to explicitly set any entry components because Angular adds components listed in&nbsp;<code>@NgModule.bootstrap</code>&nbsp;and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to&nbsp;<code>entryComponents</code>&nbsp;explicitly.</p>\r\n<h3>\r\n\t<code>entryComponents</code>&nbsp;and the compiler</h3>\r\n<p>\r\n\tFor production apps you want to load the smallest code possible. The code should contain only the classes that you actually need and exclude components that are never used. For this reason, the Angular compiler only generates code for components which are reachable from the&nbsp;<code>entryComponents</code>; This means that adding more references to&nbsp;<code>@NgModule.declarations</code>&nbsp;does not imply that they will necessarily be included in the final bundle.</p>\r\n<p>\r\n\tIn fact, many libraries declare and export components you&#39;ll never use. For example, a material design library will export all components because it doesn&rsquo;t know which ones you will use. However, it is unlikely that you will use them all. For the ones you don&#39;t reference, the tree shaker drops these components from the final code package.</p>\r\n<p>\r\n\tIf a component isn&#39;t an&nbsp;<em>entry component</em>&nbsp;and isn&#39;t found in a template, the tree shaker will throw it away. So, it&#39;s best to add only the components that are truly entry components to help keep your app as trim as possible.</p>"
          }
        },
        {
          "Feature Modules": {
            "content": "<p>\r\n\tFeature modules are NgModules for the purpose of organizing code.</p>\r\n<p>\r\n\tFor the final sample app with a feature module that this page describes, see the&nbsp;<live-example>live example&nbsp;/&nbsp;download example</live-example>.</p>\r\n<hr />\r\n<p>\r\n\tAs your app grows, you can organize code relevant for a specific feature. This helps apply clear boundaries for features. With feature modules, you can keep code related to a specific functionality or feature separate from other code. Delineating areas of your app helps with collaboration between developers and teams, separating directives, and managing the size of the root module.</p>\r\n<h2>\r\n\tFeature modules vs. root modules</h2>\r\n<p>\r\n\tA feature module is an organizational best practice, as opposed to a concept of the core Angular API. A feature module delivers a cohesive set of functionality focused on a specific application need such as a user workflow, routing, or forms. While you can do everything within the root module, feature modules help you partition the app into focused areas. A feature module collaborates with the root module and with other modules through the services it provides and the components, directives, and pipes that it shares.</p>\r\n<h2>\r\n\tHow to make a feature module</h2>\r\n<p>\r\n\tAssuming you already have an app that you created with the&nbsp;Angular CLI, create a feature module using the CLI by entering the following command in the root project directory. Replace&nbsp;<code>CustomerDashboard</code>&nbsp;with the name of your module. You can omit the &quot;Module&quot; suffix from the name because the CLI appends it:</p>\r\n<pre>\r\n<code>ng generate module CustomerDashboard</code></pre>\r\n<p>\r\n\tThis causes the CLI to create a folder called&nbsp;<code>customer-dashboard</code>&nbsp;with a file inside called&nbsp;<code>customer-dashboard.module.ts</code>&nbsp;with the following contents:</p>\r\n<pre>\r\n<code>import { NgModule } from &#39;@angular/core&#39;;\r\nimport { CommonModule } from &#39;@angular/common&#39;;\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: []\r\n})\r\nexport class CustomerDashboardModule { }</code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports&nbsp;<code>NgModule</code>, which, like the root module, lets you use the&nbsp;<code>@NgModule</code>&nbsp;decorator; the second imports&nbsp;<code>CommonModule</code>, which contributes many common directives such as&nbsp;<code>ngIf</code>&nbsp;and&nbsp;<code>ngFor</code>. Feature modules import&nbsp;<code>CommonModule</code>&nbsp;instead of&nbsp;<code>BrowserModule</code>, which is only imported once in the root module.&nbsp;<code>CommonModule</code>&nbsp;only contains information for common directives such as&nbsp;<code>ngIf</code>&nbsp;and&nbsp;<code>ngFor</code>&nbsp;which are needed in most templates, whereas&nbsp;<code>BrowserModule</code>&nbsp;configures the Angular app for the browser which needs to be done only once.</p>\r\n<p>\r\n\tThe&nbsp;<code>declarations</code>&nbsp;array is available for you to add declarables, which are components, directives, and pipes that belong exclusively to this particular module. To add a component, enter the following command at the command line where&nbsp;<code>customer-dashboard</code>&nbsp;is the directory where the CLI generated the feature module and&nbsp;<code>CustomerDashboard</code>&nbsp;is the name of the component:</p>\r\n<pre>\r\n<code>ng generate component customer-dashboard/CustomerDashboard</code></pre>\r\n<p>\r\n\tThis generates a folder for the new component within the customer-dashboard folder and updates the feature module with the&nbsp;<code>CustomerDashboardComponent</code>&nbsp;info:</p>\r\n<pre>\r\n<code>// import the new component\r\nimport { CustomerDashboardComponent } from &#39;./customer-dashboard/customer-dashboard.component&#39;;\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    CustomerDashboardComponent\r\n  ],\r\n})</code></pre>\r\n<p>\r\n\tThe&nbsp;<code>CustomerDashboardComponent</code>&nbsp;is now in the JavaScript import list at the top and added to the&nbsp;<code>declarations</code>&nbsp;array, which lets Angular know to associate this new component with this feature module.</p>\r\n<h2>\r\n\tImporting a feature module</h2>\r\n<p>\r\n\tTo incorporate the feature module into your app, you have to let the root module,&nbsp;<code>app.module.ts</code>, know about it. Notice the&nbsp;<code>CustomerDashboardModule</code>&nbsp;export at the bottom of&nbsp;<code>customer-dashboard.module.ts</code>. This exposes it so that other modules can get to it. To import it into the&nbsp;<code>AppModule</code>, add it to the imports in&nbsp;<code>app.module.ts</code>&nbsp;and to the&nbsp;<code>imports</code>&nbsp;array:</p>\r\n<pre>\r\n<code>import { HttpClientModule } from &#39;@angular/common/http&#39;;\r\nimport { NgModule } from &#39;@angular/core&#39;;\r\nimport { FormsModule } from &#39;@angular/forms&#39;;\r\nimport { BrowserModule } from &#39;@angular/platform-browser&#39;;\r\n\r\nimport { AppComponent } from &#39;./app.component&#39;;\r\n// import the feature module here so you can add it to the imports array below\r\nimport { CustomerDashboardModule } from &#39;./customer-dashboard/customer-dashboard.module&#39;;\r\n\r\n@<a href=\"https://angular.io/api/core/NgModule\" target=\"_blank\">NgModule</a>({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    CustomerDashboardModule // add the feature module here\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\r\n<p>\r\n\tNow the&nbsp;<code>AppModule</code>&nbsp;knows about the feature module. If you were to add any service providers to the feature module,&nbsp;<code>AppModule</code>&nbsp;would know about those too, as would any other feature modules. However, NgModules don&rsquo;t expose their components.</p>\r\n<h2>\r\n\tRendering a feature module&rsquo;s component template</h2>\r\n<p>\r\n\tWhen the CLI generated the&nbsp;<code>CustomerDashboardComponent</code>&nbsp;for the feature module, it included a template,&nbsp;<code>customer-dashboard.component.html</code>, with the following markup:</p>\r\n<pre>\r\n<code>&lt;p&gt;\r\n  customer-dashboard works!\r\n&lt;/p&gt;</code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tTo see this HTML in the&nbsp;<code>AppComponent</code>, you first have to export the&nbsp;<code>CustomerDashboardComponent</code>&nbsp;in the&nbsp;<code>CustomerDashboardModule</code>. In&nbsp;<code>customer-dashboard.module.ts</code>, just beneath the&nbsp;<code>declarations</code>&nbsp;array, add an&nbsp;<code>exports</code>&nbsp;array containing&nbsp;<code>CustomerDashboardComponent</code>:</p>\r\n<pre>\r\n<code>exports: [\r\n  CustomerDashboardComponent\r\n]</code></pre>\r\n<p>\r\n\tNext, in the&nbsp;<code>AppComponent</code>,&nbsp;<code>app.component.html</code>, add the tag&nbsp;<code>&lt;app-customer-dashboard&gt;</code>:</p>\r\n<pre>\r\n<code>&lt;h1&gt;\r\n  {{title}}\r\n&lt;/h1&gt;\r\n\r\n&lt;!-- add the selector from the CustomerDashboardComponent --&gt;\r\n&lt;app-customer-dashboard&gt;&lt;/app-customer-dashboard&gt;</code></pre>\r\n<p>\r\n\tNow, in addition to the title that renders by default, the&nbsp;<code>CustomerDashboardComponent</code>&nbsp;template renders too:</p>\r\n<p>\r\n\t[[ image(angular/feature-modules/feature-module.png, center) ]]</p>"
          }
        },
        {
          "Providers": {
            "content": "<p>\r\n\tA provider is an instruction to the&nbsp;Dependency Injection&nbsp;system on how to obtain a value for a dependency. Most of the time, these dependencies are services that you create and provide.</p>\r\n<p>\r\n\tFor the final sample app using the provider that this page describes, see the&nbsp;<live-example><span>live example<span>&nbsp;/&nbsp;download example</span></span></live-example>.</p>\r\n<h2>\r\n\tProviding a service</h2>\r\n<p>\r\n\tIf you already have an app that was created with the&nbsp;Angular CLI, you can create a service using the&nbsp;<code>ng generate</code>&nbsp;CLI command in the root project directory. Replace&nbsp;<em>User</em>&nbsp;with the name of your service.</p>\r\n<pre>\r\n<code><span>ng generate service </span><span>User</span></code></pre>\r\n<p>\r\n\tThis command creates the following&nbsp;<code>UserService</code>&nbsp;skeleton:</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>Injectable</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>Injectable</span><span>({</span><span>\r\n  </span><span>providedIn</span><span>:</span><span> </span><span>&#39;root&#39;</span><span>,</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>UserService</span><span> </span><span>{</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tYou can now inject&nbsp;<code>UserService</code>&nbsp;anywhere in your application.</p>\r\n<p>\r\n\tThe service itself is a class that the CLI generated and that&#39;s decorated with&nbsp;<code>@Injectable()</code>. By default, this decorator has a&nbsp;<code>providedIn</code>&nbsp;property, which creates a provider for the service. In this case,&nbsp;<code>providedIn: &#39;root&#39;</code>&nbsp;specifies that Angular should provide the service in the root injector.</p>\r\n<h2>\r\n\tProvider scope</h2>\r\n<p>\r\n\tWhen you add a service provider to the root application injector, it&rsquo;s available throughout the app. Additionally, these providers are also available to all the classes in the app as long they have the lookup token.</p>\r\n<p>\r\n\tYou should always provide your service in the root injector unless there is a case where you want the service to be available only if the consumer imports a particular&nbsp;<code>@NgModule</code>.</p>\r\n<h2>\r\n\t<code>providedIn</code>&nbsp;and NgModules</h2>\r\n<p>\r\n\tIt&#39;s also possible to specify that a service should be provided in a particular&nbsp;<code>@NgModule</code>. For example, if you don&#39;t want&nbsp;<code>UserService</code>&nbsp;to be available to applications unless they import a&nbsp;<code>UserModule</code>&nbsp;you&#39;ve created, you can specify that the service should be provided in the module:</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>Injectable</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>UserModule</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;./user.module&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>Injectable</span><span>({</span><span>\r\n  </span><span>providedIn</span><span>:</span><span> </span><span>UserModule</span><span>,</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>UserService</span><span> </span><span>{</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe example above shows the preferred way to provide a service in a module. This method is preferred because it enables tree-shaking of the service if nothing injects it. If it&#39;s not possible to specify in the service which module should provide it, you can also declare a provider for the service within the module:</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>NgModule</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>UserService</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;./user.service&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>NgModule</span><span>({</span><span>\r\n  providers</span><span>:</span><span> </span><span>[</span><span>UserService</span><span>],</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>UserModule</span><span> </span><span>{</span><span>\r\n</span><span>}</span></code></pre>\r\n<h2>\r\n\tLimiting provider scope by lazy loading modules</h2>\r\n<p>\r\n\tIn the basic CLI-generated app, modules are eagerly loaded which means that they are all loaded when the app launches. Angular uses an injector system to make things available between modules. In an eagerly loaded app, the root application injector makes all of the providers in all of the modules available throughout the app.</p>\r\n<p>\r\n\tThis behavior necessarily changes when you use lazy loading. Lazy loading is when you load modules only when you need them; for example, when routing. They aren&rsquo;t loaded right away like with eagerly loaded modules. This means that any services listed in their provider arrays aren&rsquo;t available because the root injector doesn&rsquo;t know about these modules.</p>\r\n<p>\r\n\tWhen the Angular router lazy-loads a module, it creates a new injector. This injector is a child of the root application injector. Imagine a tree of injectors; there is a single root injector and then a child injector for each lazy loaded module. The router adds all of the providers from the root injector to the child injector. When the router creates a component within the lazy-loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</p>\r\n<p>\r\n\tAny component created within a lazy loaded module&rsquo;s context, such as by router navigation, gets the local instance of the service, not the instance in the root application injector. Components in external modules continue to receive the instance created for the application root.</p>\r\n<p>\r\n\tThough you can provide services by lazy loading modules, not all services can be lazy loaded. For instance, some modules only work in the root module, such as the Router. The Router works with the global location object in the browser.</p>\r\n<h2>\r\n\tLimiting provider scope with components</h2>\r\n<p>\r\n\tAnother way to limit provider scope is by adding the service you want to limit to the component&rsquo;s&nbsp;<code>providers</code>&nbsp;array. Component providers and NgModule providers are independent of each other. This method is helpful for when you want to eagerly load a module that needs a service all to itself. Providing a service in the component limits the service only to that component (other components in the same module can&rsquo;t access it.)</p>\r\n<pre>\r\n<code><span>@</span><span>Component</span><span>({</span><span>\r\n</span><span>/* . . . */</span><span>\r\n  providers</span><span>:</span><span> </span><span>[</span><span>UserService</span><span>]</span><span>\r\n</span><span>})</span></code></pre>\r\n<h2>\r\n\tProviding services in modules vs. components</h2>\r\n<p>\r\n\tGenerally, provide services the whole app needs in the root module and scope services by providing them in lazy loaded modules.</p>\r\n<p>\r\n\tThe router works at the root level so if you put providers in a component, even&nbsp;<code>AppComponent</code>, lazy loaded modules, which rely on the router, can&rsquo;t see them.</p>\r\n<p>\r\n\tRegister a provider with a component when you must limit a service instance to a component and its component tree, that is, its child components. For example, a user editing component,&nbsp;<code>UserEditorComponent</code>, that needs a private copy of a caching&nbsp;<code>UserService</code>&nbsp;should register the&nbsp;<code>UserService</code>&nbsp;with the&nbsp;<code>UserEditorComponent</code>. Then each new instance of the&nbsp;<code>UserEditorComponent</code>&nbsp;gets its own cached service instance.</p>"
          }
        },
        {
          "Singleton services": {
            "content": "<p>\r\n\tA singleton service is a service for which only one instance exists in an app.</p>\r\n<p>\r\n\tFor a sample app using the app-wide singleton service that this page describes, see the&nbsp;<live-example>live example&nbsp;/&nbsp;download example</live-example>&nbsp;showcasing all the documented features of NgModules.</p>\r\n<h2>\r\n\tProviding a singleton service</h2>\r\n<p>\r\n\tThere are two ways to make a service a singleton in Angular:</p>\r\n<ul>\r\n\t<li>\r\n\t\tDeclare&nbsp;<code>root</code>&nbsp;for the value of the&nbsp;<code>@Injectable()</code>&nbsp;<code>providedIn</code>&nbsp;property</li>\r\n\t<li>\r\n\t\tInclude the service in the&nbsp;<code>AppModule</code>&nbsp;or in a module that is only imported by the&nbsp;<code>AppModule</code></li>\r\n</ul>\r\n<h2>\r\n\tUsing&nbsp;<code>providedIn</code></h2>\r\n<p>\r\n\tBeginning with Angular 6.0, the preferred way to create a singleton service is to set&nbsp;<code>providedIn</code>&nbsp;to&nbsp;<code>root</code>&nbsp;on the service&#39;s&nbsp;<code>@Injectable()</code>&nbsp;decorator. This tells Angular to provide the service in the application root.</p>\r\n<pre>\r\n<code>import { Injectable } from &#39;@angular/core&#39;;\r\n\r\n@Injectable({\r\n  providedIn: &#39;root&#39;,\r\n})\r\nexport class UserService {\r\n}</code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tFor more detailed information on services, see the&nbsp;Services&nbsp;chapter of the&nbsp;Tour of Heroes tutorial.</p>\r\n<h2>\r\n\tNgModule&nbsp;<code>providers</code>&nbsp;array</h2>\r\n<p>\r\n\tIn apps built with Angular versions prior to 6.0, services are registered NgModule&nbsp;<code>providers</code>&nbsp;arrays as follows:</p>\r\n<pre>\r\n<code>@NgModule({\r\n  ...\r\n  providers: [UserService],\r\n  ...\r\n})</code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tIf this NgModule were the root&nbsp;<code>AppModule</code>, the&nbsp;<code>UserService</code>&nbsp;would be a singleton and available throughout the app. Though you may see it coded this way, using the&nbsp;<code><a href=\"https://angular.io/api/core/Injectable#providedIn\" target=\"_blank\">providedIn</a></code>&nbsp;property of the&nbsp;<code>@<a href=\"https://angular.io/api/core/Injectable\" target=\"_blank\">Injectable</a>()</code>&nbsp;decorator on the service itself is preferable as of Angular 6.0 as it makes your services tree-shakable.</p>\r\n<h2>\r\n\tThe&nbsp;<code>forRoot()</code>&nbsp;pattern</h2>\r\n<p>\r\n\tGenerally, you&#39;ll only need&nbsp;<code>providedIn</code>&nbsp;for providing services and&nbsp;<code>forRoot()</code>/<code>forChild()</code>&nbsp;for routing. However, understanding how&nbsp;<code>forRoot()</code>&nbsp;works to make sure a service is a singleton will inform your development at a deeper level.</p>\r\n<p>\r\n\tIf a module defines both providers and declarations (components, directives, pipes), then loading the module in multiple feature modules would duplicate the registration of the service. This could result in multiple service instances and the service would no longer behave as a singleton.</p>\r\n<p>\r\n\tThere are multiple ways to prevent this:</p>\r\n<ul>\r\n\t<li>\r\n\t\tUse the&nbsp;<code>providedIn</code>&nbsp;syntax&nbsp;instead of registering the service in the module.</li>\r\n\t<li>\r\n\t\tSeparate your services into their own module.</li>\r\n\t<li>\r\n\t\tDefine&nbsp;<code>forRoot()</code>&nbsp;and&nbsp;<code>forChild()</code>&nbsp;methods in the module.</li>\r\n</ul>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote:&nbsp;There are two example apps where you can see this scenario; the more advanced&nbsp;<live-example>NgModules live example</live-example>, which contains&nbsp;<code>forRoot()</code>&nbsp;and&nbsp;<code>forChild()</code>&nbsp;in the routing modules and the&nbsp;<code>GreetingModule</code>, and the simpler&nbsp;<live-example>Lazy Loading live example</live-example>. For an introductory explanation see the&nbsp;Lazy Loading Feature Modules&nbsp;guide.</p>\r\n</blockquote>\r\n<p>\r\n\tUse&nbsp;<code>forRoot()</code>&nbsp;to separate providers from a module so you can import that module into the root module with&nbsp;<code>providers</code>&nbsp;and child modules without&nbsp;<code>providers</code>.</p>\r\n<ol>\r\n\t<li>\r\n\t\tCreate a static method&nbsp;<code>forRoot()</code>&nbsp;on the module.</li>\r\n\t<li>\r\n\t\tPlace the providers into the&nbsp;<code>forRoot()</code>&nbsp;method.</li>\r\n</ol>\r\n<pre>\r\n<code>static forRoot(config: UserServiceConfig): ModuleWithProviders {\r\n  return {\r\n    ngModule: GreetingModule,\r\n    providers: [\r\n      {provide: UserServiceConfig, useValue: config }\r\n    ]\r\n  };\r\n}</code></pre>\r\n<h2>\r\n\t<code>forRoot()</code>&nbsp;and the&nbsp;<code>Router</code></h2>\r\n<p>\r\n\t<code>RouterModule</code>&nbsp;provides the&nbsp;<code>Router</code>&nbsp;service, as well as router directives, such as&nbsp;<code>RouterOutlet</code>&nbsp;and&nbsp;<code>routerLink</code>. The root application module imports&nbsp;<code>RouterModule</code>&nbsp;so that the application has a&nbsp;<code>Router</code>&nbsp;and the root application components can access the router directives. Any feature modules must also import&nbsp;<code>RouterModule</code>&nbsp;so that their components can place router directives into their templates.</p>\r\n<p>\r\n\tIf the&nbsp;<code>RouterModule</code>&nbsp;didn&rsquo;t have&nbsp;<code>forRoot()</code>&nbsp;then each feature module would instantiate a new&nbsp;<code>Router</code>&nbsp;instance, which would break the application as there can only be one&nbsp;<code>Router</code>. By using the&nbsp;<code>forRoot()</code>&nbsp;method, the root application module imports&nbsp;<code>RouterModule.forRoot(...)</code>&nbsp;and gets a&nbsp;<code>Router</code>, and all feature modules import&nbsp;<code>RouterModule.forChild(...)</code>&nbsp;which does not instantiate another&nbsp;<code>Router</code>.</p>\r\n<div>\r\n\t<p>\r\n\t\tNote:&nbsp;If you have a module which has both providers and declarations, you&nbsp;<em>can</em>&nbsp;use this technique to separate them out and you may see this pattern in legacy apps. However, since Angular 6.0, the best practice for providing services is with the&nbsp;<code>@<a href=\"https://angular.io/api/core/Injectable\" target=\"_blank\">Injectable</a>()</code>&nbsp;<code><a href=\"https://angular.io/api/core/Injectable#providedIn\" target=\"_blank\">providedIn</a></code>&nbsp;property.</p>\r\n</div>\r\n<h2>\r\n\tHow&nbsp;<code>forRoot()</code>&nbsp;works</h2>\r\n<p>\r\n\t<code>forRoot()</code>&nbsp;takes a service configuration object and returns a&nbsp;ModuleWithProviders, which is a simple object with the following properties:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<code>ngModule</code>: in this example, the&nbsp;<code>GreetingModule</code>&nbsp;class</li>\r\n\t<li>\r\n\t\t<code>providers</code>: the configured providers</li>\r\n</ul>\r\n<p>\r\n\tIn the&nbsp;<live-example>live example&nbsp;/&nbsp;download example</live-example>&nbsp;the root&nbsp;<code>AppModule</code>&nbsp;imports the&nbsp;<code>GreetingModule</code>&nbsp;and adds the&nbsp;<code>providers</code>&nbsp;to the&nbsp;<code>AppModule</code>&nbsp;providers. Specifically, Angular accumulates all imported providers before appending the items listed in&nbsp;<code>@NgModule.providers</code>. This sequence ensures that whatever you add explicitly to the&nbsp;<code>AppModule</code>&nbsp;providers takes precedence over the providers of imported modules.</p>\r\n<p>\r\n\tThe sample app imports&nbsp;<code>GreetingModule</code>&nbsp;and uses its&nbsp;<code>forRoot()</code>&nbsp;method one time, in&nbsp;<code>AppModule</code>. Registering it once like this prevents multiple instances.</p>\r\n<p>\r\n\tYou can also add a&nbsp;<code>forRoot()</code>&nbsp;method in the&nbsp;<code>GreetingModule</code>&nbsp;that configures the greeting&nbsp;<code>UserService</code>.</p>\r\n<p>\r\n\tIn the following example, the optional, injected&nbsp;<code>UserServiceConfig</code>&nbsp;extends the greeting&nbsp;<code>UserService</code>. If a&nbsp;<code>UserServiceConfig</code>&nbsp;exists, the&nbsp;<code>UserService</code>&nbsp;sets the user name from that config.</p>\r\n<pre>\r\n<code>constructor(@Optional() config: UserServiceConfig) {\r\n  if (config) { this._userName = config.userName; }\r\n}</code></pre>\r\n<p>\r\n\tHere&#39;s&nbsp;<code>forRoot()</code>&nbsp;that takes a&nbsp;<code>UserServiceConfig</code>&nbsp;object:</p>\r\n<pre>\r\n<code>static forRoot(config: UserServiceConfig): ModuleWithProviders {\r\n  return {\r\n    ngModule: GreetingModule,\r\n    providers: [\r\n      {provide: UserServiceConfig, useValue: config }\r\n    ]\r\n  };\r\n}</code></pre>\r\n<p>\r\n\tLastly, call it within the&nbsp;<code>imports</code>&nbsp;list of the&nbsp;<code>AppModule</code>. In the following snippet, other parts of the file are left out. For the complete file, see the&nbsp;<live-example>live example&nbsp;/&nbsp;download example</live-example>, or continue to the next section of this document.</p>\r\n<pre>\r\n<code>import { GreetingModule } from &#39;./greeting/greeting.module&#39;;\r\n@NgModule({\r\n  imports: [\r\n    GreetingModule.forRoot({userName: &#39;Miss Marple&#39;}),\r\n  ],\r\n})</code></pre>\r\n<p>\r\n\tThe app displays &quot;Miss Marple&quot; as the user instead of the default &quot;Sherlock Holmes&quot;.</p>\r\n<p>\r\n\tRemember to import&nbsp;<code>GreetingModule</code>&nbsp;as a Javascript import at the top of the file and don&#39;t add it to more than one&nbsp;<code>@NgModule</code>&nbsp;<code>imports</code>&nbsp;list.</p>\r\n<h2>\r\n\tPrevent reimport of the&nbsp;<code>GreetingModule</code></h2>\r\n<p>\r\n\tOnly the root&nbsp;<code>AppModule</code>&nbsp;should import the&nbsp;<code>GreetingModule</code>. If a lazy-loaded module imports it too, the app can generate&nbsp;multiple instances&nbsp;of a service.</p>\r\n<p>\r\n\tTo guard against a lazy loaded module re-importing&nbsp;<code>GreetingModule</code>, add the following&nbsp;<code>GreetingModule</code>&nbsp;constructor.</p>\r\n<pre>\r\n<code>constructor (@Optional() @SkipSelf() parentModule: GreetingModule) {\r\n  if (parentModule) {\r\n    throw new Error(\r\n      &#39;GreetingModule is already loaded. Import it in the AppModule only&#39;);\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tThe constructor tells Angular to inject the&nbsp;<code>GreetingModule</code>&nbsp;into itself. The injection would be circular if Angular looked for&nbsp;<code>GreetingModule</code>&nbsp;in the&nbsp;<em>current</em>&nbsp;injector, but the&nbsp;<code>@SkipSelf()</code>&nbsp;decorator means &quot;look for&nbsp;<code>GreetingModule</code>&nbsp;in an ancestor injector, above me in the injector hierarchy.&quot;</p>\r\n<p>\r\n\tBy default, the injector throws an error when it can&#39;t find a requested provider. The&nbsp;<code>@Optional()</code>&nbsp;decorator means not finding the service is OK. The injector returns&nbsp;<code>null</code>, the&nbsp;<code>parentModule</code>&nbsp;parameter is null, and the constructor concludes uneventfully.</p>\r\n<p>\r\n\tIt&#39;s a different story if you improperly import&nbsp;<code>GreetingModule</code>&nbsp;into a lazy loaded module such as&nbsp;<code>CustomersModule</code>.</p>\r\n<p>\r\n\tAngular creates a lazy loaded module with its own injector, a child of the root injector.&nbsp;<code>@SkipSelf()</code>&nbsp;causes Angular to look for a&nbsp;<code>GreetingModule</code>&nbsp;in the parent injector, which this time is the root injector. Of course it finds the instance imported by the root&nbsp;<code>AppModule</code>. Now&nbsp;<code>parentModule</code>&nbsp;exists and the constructor throws the error.</p>\r\n<p>\r\n\tHere are the two files in their entirety for reference</p>\r\n<p>\r\n\t<mat-tab-body><aio-code> </aio-code></mat-tab-body></p>\r\n<pre>\r\n<code>import { BrowserModule } from &#39;@angular/platform-browser&#39;;\r\nimport { NgModule } from &#39;@angular/core&#39;;\r\n\r\n/* App Root */\r\nimport { AppComponent } from &#39;./app.component&#39;;\r\n\r\n/* Feature Modules */\r\nimport { ContactModule } from &#39;./contact/contact.module&#39;;\r\nimport { GreetingModule } from &#39;./greeting/greeting.module&#39;;\r\n\r\n/* Routing Module */\r\nimport { AppRoutingModule } from &#39;./app-routing.module&#39;;\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    ContactModule,\r\n    GreetingModule.forRoot({userName: &#39;Miss Marple&#39;}),\r\n    AppRoutingModule\r\n  ],\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>"
          }
        },
        {
          "HttpClient": {
            "content": "<p>\r\n\tMost front-end applications communicate with backend services over the HTTP protocol. Modern browsers support two different APIs for making HTTP requests: the&nbsp;<code>XMLHttpRequest</code>&nbsp;interface and the&nbsp;<code>fetch()</code>&nbsp;API.</p>\r\n<p>\r\n\tThe&nbsp;<code>HttpClient</code>&nbsp;in&nbsp;<code>@angular/common/http</code>&nbsp;offers a simplified client HTTP API for Angular applications that rests on the&nbsp;<code>XMLHttpRequest</code>&nbsp;interface exposed by browsers. Additional benefits of&nbsp;<code>HttpClient</code>&nbsp;include testability features, typed request and response objects, request and response interception,&nbsp;<code>Observable</code>&nbsp;apis, and streamlined error handling.</p>\r\n<p>\r\n\tYou can run the&nbsp;<live-example><span>live example<span>&nbsp;/&nbsp;download example</span></span></live-example>&nbsp;that accompanies this guide.</p>\r\n<div>\r\n\t<p>\r\n\t\tThe sample app does not require a data server. It relies on the&nbsp;Angular&nbsp;<em>in-memory-web-api</em>, which replaces the&nbsp;<em>HttpClient</em>&nbsp;module&#39;s&nbsp;<code>HttpBackend</code>. The replacement service simulates the behavior of a REST-like backend.</p>\r\n\t<p>\r\n\t\tLook at the&nbsp;<code>AppModule</code>&nbsp;<em>imports</em>&nbsp;to see how it is configured.</p>\r\n</div>\r\n<h2>\r\n\tSetup</h2>\r\n<p>\r\n\tBefore you can use the&nbsp;<code>HttpClient</code>, you need to import the Angular&nbsp;<code>HttpClientModule</code>. Most apps do so in the root&nbsp;<code>AppModule</code>.</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>NgModule</span><span> </span><span>}</span><span>         </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>BrowserModule</span><span> </span><span>}</span><span>    </span><span>from</span><span> </span><span>&#39;@angular/platform-browser&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>HttpClientModule</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>NgModule</span><span>({</span><span>\r\n  imports</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>BrowserModule</span><span>,</span><span>\r\n    </span><span>// import </span><span>HttpClientModule</span><span> after BrowserModule.</span><span>\r\n    </span><span>HttpClientModule</span><span>,</span><span>\r\n  </span><span>],</span><span>\r\n  declarations</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>AppComponent</span><span>,</span><span>\r\n  </span><span>],</span><span>\r\n  bootstrap</span><span>:</span><span> </span><span>[</span><span> </span><span>AppComponent</span><span> </span><span>]</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>AppModule</span><span> </span><span>{}</span></code></pre>\r\n<p>\r\n\tHaving imported&nbsp;<code>HttpClientModule</code>&nbsp;into the&nbsp;<code>AppModule</code>, you can inject the&nbsp;<code>HttpClient</code>&nbsp;into an application class as shown in the following&nbsp;<code>ConfigService</code>&nbsp;example.</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>Injectable</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>HttpClient</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>Injectable</span><span>()</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>ConfigService</span><span> </span><span>{</span><span>\r\n  </span><span>constructor</span><span>(</span><span>private</span><span> </span><span>http</span><span>:</span><span> </span><span>HttpClient</span><span>)</span><span> </span><span>{</span><span> </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<h2>\r\n\tRequesting data from server</h2>\r\n<p>\r\n\tApplications often request JSON data from the server. For example, the app might need a configuration file on the server,&nbsp;<code>config.json</code>, that specifies resource URLs.</p>\r\n<pre>\r\n<code><span>{</span><span>\r\n  </span><span>&quot;heroesUrl&quot;</span><span>:</span><span> </span><span>&quot;api/heroes&quot;</span><span>,</span><span>\r\n  </span><span>&quot;textfile&quot;</span><span>:</span><span> </span><span>&quot;assets/textfile.txt&quot;</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<code>ConfigService</code>&nbsp;fetches this file with a&nbsp;<code>get()</code>&nbsp;method on&nbsp;<code>HttpClient</code>.</p>\r\n<pre>\r\n<code><span>configUrl </span><span>=</span><span> </span><span>&#39;assets/config.json&#39;</span><span>;</span><span>\r\n\r\ngetConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>(</span><span>this</span><span>.</span><span>configUrl</span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tA component, such as&nbsp;<code>ConfigComponent</code>, injects the&nbsp;<code>ConfigService</code>&nbsp;and calls the&nbsp;<code>getConfig</code>&nbsp;service method.</p>\r\n<pre>\r\n<code><span>showConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>configService</span><span>.</span><span>getConfig</span><span>()</span><span>\r\n    </span><span>.</span><span>subscribe</span><span>((</span><span>data</span><span>:</span><span> </span><span>Config</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>config </span><span>=</span><span> </span><span>{</span><span>\r\n        heroesUrl</span><span>:</span><span> data</span><span>[</span><span>&#39;heroesUrl&#39;</span><span>],</span><span>\r\n        textfile</span><span>:</span><span>  data</span><span>[</span><span>&#39;textfile&#39;</span><span>]</span><span>\r\n    </span><span>});</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tBecause the service method returns an&nbsp;<code>Observable</code>&nbsp;of configuration data, the component&nbsp;subscribes&nbsp;to the method&#39;s return value. The subscription callback copies the data fields into the component&#39;s&nbsp;<code>config</code>&nbsp;object, which is data-bound in the component template for display.</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t<header> </header></p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<h3>\r\n\tWHY WRITE A SERVICE?</h3>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThis example is so simple that it is tempting to write the&nbsp;<code>Http.get()</code>&nbsp;inside the component itself and skip the service. In practice, however, data access rarely stays this simple. You typically need to post-process the data, add error handling, and maybe some retry logic to cope with intermittent connectivity.</p>\r\n<p>\r\n\tThe component quickly becomes cluttered with data access minutia. The component becomes harder to understand, harder to test, and the data access logic can&#39;t be re-used or standardized.</p>\r\n<p>\r\n\tThat&#39;s why it&#39;s a best practice to separate presentation of data from data access by encapsulating data access in a separate service and delegating to that service in the component, even in simple cases like this one.</p>\r\n<h3>\r\n\tRequesting a typed response</h3>\r\n<p>\r\n\tYou can structure your&nbsp;<code>HttpClient</code>&nbsp;request to declare the type of the response object, to make consuming the output easier and more obvious. Specifying the response type acts as a type assertion during the compile time.</p>\r\n<p>\r\n\tTo specify the response object type, first define an interface with the required properties. (Use an interface rather than a class; a response cannot be automatically converted to an instance of a class.)</p>\r\n<pre>\r\n<code><span>export</span><span> </span><span>interface</span><span> </span><span>Config</span><span> </span><span>{</span><span>\r\n  heroesUrl</span><span>:</span><span> </span><span>string</span><span>;</span><span>\r\n  textfile</span><span>:</span><span> </span><span>string</span><span>;</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tNext, specify that interface as the&nbsp;<code>HttpClient.get()</code>&nbsp;call&#39;s type parameter in the service.</p>\r\n<pre>\r\n<code><span>getConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>// now returns an Observable of Config</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>&lt;</span><span>Config</span><span>&gt;(</span><span>this</span><span>.</span><span>configUrl</span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tWhen you pass an interface as a type parameter to the&nbsp;<code>HttpClient.get()</code>&nbsp;method, use the RxJS&nbsp;<code>map</code>&nbsp;operator to transform the response data as needed by the UI. You can then pass the transformed data to the&nbsp;async pipe.</p>\r\n<p>\r\n\tThe callback in the updated component method receives a typed data object, which is easier and safer to consume:</p>\r\n<pre>\r\n<code><span>config</span><span>:</span><span> </span><span>Config</span><span>;</span><span>\r\n\r\nshowConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>configService</span><span>.</span><span>getConfig</span><span>()</span><span>\r\n    </span><span>// clone the data object, using its known Config shape</span><span>\r\n    </span><span>.</span><span>subscribe</span><span>((</span><span>data</span><span>:</span><span> </span><span>Config</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>config </span><span>=</span><span> </span><span>{</span><span> </span><span>...</span><span>data </span><span>});</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tSpecifying the response type is a declaration to TypeScript that it should expect your response to be of the given type. This is a build-time check and doesn&#39;t guarantee that the server will actually respond with an object of this type. It is up to the server to ensure that the type specified by the server API is returned.</p>\r\n<p>\r\n\tTo access properties that are defined in an interface, you must explicitly convert the Object you get from the JSON to the required response type. For example, the following&nbsp;<code>subscribe</code>&nbsp;callback receives&nbsp;<code>data</code>&nbsp;as an Object, and then type-casts it in order to access the properties.</p>\r\n<pre>\r\n<code><span>.</span><span>subscribe</span><span>(</span><span>data </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>config </span><span>=</span><span> </span><span>{</span><span>\r\n heroesUrl</span><span>:</span><span> </span><span>(</span><span>data </span><span>as</span><span> any</span><span>).</span><span>heroesUrl</span><span>,</span><span>\r\n textfile</span><span>:</span><span>  </span><span>(</span><span>data </span><span>as</span><span> any</span><span>).</span><span>textfile</span><span>,</span><span>\r\n</span><span>});</span></code></pre>\r\n<h3>\r\n\tReading the full response</h3>\r\n<p>\r\n\tThe response body doesn&#39;t return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</p>\r\n<p>\r\n\tTell&nbsp;<code>HttpClient</code>&nbsp;that you want the full response with the&nbsp;<code>observe</code>&nbsp;option:</p>\r\n<pre>\r\n<code><span>getConfigResponse</span><span>():</span><span> </span><span>Observable</span><span>&lt;</span><span>HttpResponse</span><span>&lt;</span><span>Config</span><span>&gt;&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>&lt;</span><span>Config</span><span>&gt;(</span><span>\r\n    </span><span>this</span><span>.</span><span>configUrl</span><span>,</span><span> </span><span>{</span><span> observe</span><span>:</span><span> </span><span>&#39;response&#39;</span><span> </span><span>});</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tNow&nbsp;<code>HttpClient.get()</code>&nbsp;returns an&nbsp;<code>Observable</code>&nbsp;of type&nbsp;<code>HttpResponse</code>&nbsp;rather than just the JSON data.</p>\r\n<p>\r\n\tThe component&#39;s&nbsp;<code>showConfigResponse()</code>&nbsp;method displays the response headers as well as the configuration:</p>\r\n<pre>\r\n<code><span>showConfigResponse</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>configService</span><span>.</span><span>getConfigResponse</span><span>()</span><span>\r\n    </span><span>// resp is of type `</span><span>HttpResponse</span><span>&lt;Config&gt;`</span><span>\r\n    </span><span>.</span><span>subscribe</span><span>(</span><span>resp </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n      </span><span>// display its headers</span><span>\r\n      </span><span>const</span><span> </span><span>keys</span><span> </span><span>=</span><span> resp</span><span>.</span><span>headers</span><span>.</span><span>keys</span><span>();</span><span>\r\n      </span><span>this</span><span>.</span><span>headers </span><span>=</span><span> keys</span><span>.</span><span>map</span><span>(</span><span>key </span><span>=&gt;</span><span>\r\n        </span><span>`${key}: ${resp.headers.get(key)}`</span><span>);</span><span>\r\n\r\n      </span><span>// access the body directly, which is typed as `Config`.</span><span>\r\n      </span><span>this</span><span>.</span><span>config </span><span>=</span><span> </span><span>{</span><span> </span><span>...</span><span> resp</span><span>.</span><span>body </span><span>};</span><span>\r\n    </span><span>});</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tAs you can see, the response object has a&nbsp;<code>body</code>&nbsp;property of the correct type.</p>\r\n<h3>\r\n\tMaking a JSONP request</h3>\r\n<p>\r\n\tApps can use the the&nbsp;<code>HttpClient</code>&nbsp;to make&nbsp;JSONP&nbsp;requests across domains when the server doesn&#39;t support&nbsp;CORS protocol.</p>\r\n<p>\r\n\tAngular JSONP requests return an&nbsp;<code>Observable</code>. Follow the pattern for subscribing to observables and use the RxJS&nbsp;<code>map</code>&nbsp;operator to transform the response before using the&nbsp;<a href=\"https://angular.io/api/common/AsyncPipe\" target=\"_blank\">async pipe</a>&nbsp;to manage the results.</p>\r\n<p>\r\n\tIn Angular, use JSONP by including&nbsp;<code>HttpClientJsonpModule</code>&nbsp;in the&nbsp;<code>NgModule</code>&nbsp;imports. In the following example, the&nbsp;<code>searchHeroes()</code>&nbsp;method uses a JSONP request to query for heroes whose names contain the search term.</p>\r\n<pre>\r\n<code><span>/* GET heroes whose name contains search term */</span><span>\r\nsearchHeroes</span><span>(</span><span>term</span><span>:</span><span> string</span><span>):</span><span> </span><span>Observable</span><span> </span><span>{</span><span>\r\n  term </span><span>=</span><span> term</span><span>.</span><span>trim</span><span>();</span><span>\r\n\r\n  </span><span>let</span><span> heroesURL </span><span>=</span><span> </span><span>`</span><span>$</span><span>{</span><span>this</span><span>.</span><span>heroesURL</span><span>}?</span><span>$</span><span>{</span><span>term</span><span>}`;</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>jsonp</span><span>(</span><span>heroesUrl</span><span>,</span><span> </span><span>&#39;</span><span>callback</span><span>&#39;</span><span>).</span><span>pipe</span><span>(</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>(</span><span>&#39;searchHeroes&#39;</span><span>,</span><span> </span><span>[])</span><span> </span><span>// then handle the error</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>};</span></code></pre>\r\n<p>\r\n\tThis request passes the&nbsp;<code>heroesURL</code>&nbsp;as the first parameter and the callback function name as the second parameter. The response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</p>\r\n<h3>\r\n\tRequesting non-JSON data</h3>\r\n<p>\r\n\tNot all APIs return JSON data. In this next example, a&nbsp;<code>DownloaderService</code>&nbsp;method reads a text file from the server and logs the file contents, before returning those contents to the caller as an&nbsp;<code>Observable&lt;string&gt;</code>.</p>\r\n<pre>\r\n<code><span>getTextFile</span><span>(</span><span>filename</span><span>:</span><span> </span><span>string</span><span>)</span><span> </span><span>{</span><span>\r\n  </span><span>// The Observable returned by get() is of type Observable&lt;string&gt;</span><span>\r\n  </span><span>// because </span><a href=\"https://angular.io/api/router/RouterLinkWithHref\" target=\"_blank\"><span>a</span></a><span> text response was specified.</span><span>\r\n  </span><span>// There&#39;s no need to pass </span><a href=\"https://angular.io/api/router/RouterLinkWithHref\" target=\"_blank\"><span>a</span></a><span> &lt;string&gt; type parameter to get().</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>(</span><span>filename</span><span>,</span><span> </span><span>{</span><span>responseType</span><span>:</span><span> </span><span>&#39;text&#39;</span><span>})</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      tap</span><span>(</span><span> </span><span>// Log the result or error</span><span>\r\n        data </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>log</span><span>(</span><span>filename</span><span>,</span><span> data</span><span>),</span><span>\r\n        error </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>logError</span><span>(</span><span>filename</span><span>,</span><span> error</span><span>)</span><span>\r\n      </span><span>)</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t<code>HttpClient.get()</code>&nbsp;returns a string rather than the default JSON because of the&nbsp;<code>responseType</code>&nbsp;option.</p>\r\n<p>\r\n\tThe RxJS&nbsp;<code>tap</code>&nbsp;operator (as in &quot;wiretap&quot;) lets the code inspect both success and error values passing through the observable without disturbing them.</p>\r\n<p>\r\n\tA&nbsp;<code>download()</code>&nbsp;method in the&nbsp;<code>DownloaderComponent</code>&nbsp;initiates the request by subscribing to the service method.</p>\r\n<pre>\r\n<code><span>download</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>downloaderService</span><span>.</span><span>getTextFile</span><span>(</span><span>&#39;assets/textfile.txt&#39;</span><span>)</span><span>\r\n    </span><span>.</span><span>subscribe</span><span>(</span><span>results </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>contents </span><span>=</span><span> results</span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<h2>\r\n\tError handling</h2>\r\n<p>\r\n\tWhat happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server?&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;will return an&nbsp;<em>error</em>&nbsp;object instead of a successful response.</p>\r\n<p>\r\n\tYou&nbsp;<em>could</em>&nbsp;handle in the component by adding a second callback to the&nbsp;<code>.subscribe()</code>:</p>\r\n<pre>\r\n<code><span>showConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>configService</span><span>.</span><span>getConfig</span><span>()</span><span>\r\n    </span><span>.</span><span>subscribe</span><span>(</span><span>\r\n      </span><span>(</span><span>data</span><span>:</span><span> </span><span>Config</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>config </span><span>=</span><span> </span><span>{</span><span> </span><span>...</span><span>data </span><span>},</span><span> </span><span>// success path</span><span>\r\n      error </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>error </span><span>=</span><span> error </span><span>// error path</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tIt&#39;s certainly a good idea to give the user some kind of feedback when data access fails. But displaying the raw error object returned by&nbsp;<code>HttpClient</code>&nbsp;is far from the best way to do it.</p>\r\n<h3>\r\n\tGetting error details</h3>\r\n<p>\r\n\tDetecting that an error occurred is one thing. Interpreting that error and composing a user-friendly response is a bit more involved.</p>\r\n<p>\r\n\tTwo types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error&nbsp;<em>responses</em>.</p>\r\n<p>\r\n\tOr something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator. These errors produce JavaScript&nbsp;<code>ErrorEvent</code>&nbsp;objects.</p>\r\n<p>\r\n\tThe&nbsp;<code>HttpClient</code>&nbsp;captures both kinds of errors in its&nbsp;<code>HttpErrorResponse</code>&nbsp;and you can inspect that response to figure out what really happened.</p>\r\n<p>\r\n\tError inspection, interpretation, and resolution is something you want to do in the&nbsp;<em>service</em>, not in the&nbsp;<em>component</em>.</p>\r\n<p>\r\n\tYou might first devise an error handler like this one:</p>\r\n<pre>\r\n<code><span>private</span><span> handleError</span><span>(</span><span>error</span><span>:</span><span> </span><span>HttpErrorResponse</span><span>)</span><span> </span><span>{</span><span>\r\n  </span><span>if</span><span> </span><span>(</span><span>error</span><span>.</span><span>error </span><span>instanceof</span><span> </span><span>ErrorEvent</span><span>)</span><span> </span><span>{</span><span>\r\n    </span><span>// A client-side or network error occurred. Handle it accordingly.</span><span>\r\n    console</span><span>.</span><span>error</span><span>(</span><span>&#39;An error occurred:&#39;</span><span>,</span><span> error</span><span>.</span><span>error</span><span>.</span><span>message</span><span>);</span><span>\r\n  </span><span>}</span><span> </span><span>else</span><span> </span><span>{</span><span>\r\n    </span><span>// The backend returned an unsuccessful response code.</span><span>\r\n    </span><span>// The response body may contain clues as to what went wrong,</span><span>\r\n    console</span><span>.</span><span>error</span><span>(</span><span>\r\n      </span><span>`Backend returned code ${error.status}, `</span><span> </span><span>+</span><span>\r\n      </span><span>`body was: ${error.error}`</span><span>);</span><span>\r\n  </span><span>}</span><span>\r\n  </span><span>// return an observable with </span><span>a</span><span> user-facing error </span><span>message</span><span>\r\n  </span><span>return</span><span> throwError</span><span>(</span><span>\r\n    </span><span>&#39;Something bad happened; please try again later.&#39;</span><span>);</span><span>\r\n</span><span>};</span></code></pre>\r\n<p>\r\n\tNotice that this handler returns an RxJS&nbsp;<code>ErrorObservable</code>&nbsp;with a user-friendly error message. Consumers of the service expect service methods to return an&nbsp;<code>Observable</code>&nbsp;of some kind, even a &quot;bad&quot; one.</p>\r\n<p>\r\n\tNow you take the&nbsp;<code>Observables</code>&nbsp;returned by the&nbsp;<code>HttpClient</code>&nbsp;methods and&nbsp;<em>pipe them through</em>&nbsp;to the error handler.</p>\r\n<pre>\r\n<code><span>getConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>&lt;</span><span>Config</span><span>&gt;(</span><span>this</span><span>.</span><span>configUrl</span><span>)</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>)</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<h3>\r\n\tRetrying</h3>\r\n<p>\r\n\tSometimes the error is transient and will go away automatically if you try again. For example, network interruptions are common in mobile scenarios, and trying again may produce a successful result.</p>\r\n<p>\r\n\tThe&nbsp;RxJS library&nbsp;offers several&nbsp;<em>retry</em>&nbsp;operators that are worth exploring. The simplest is called&nbsp;<code>retry()</code>&nbsp;and it automatically re-subscribes to a failed&nbsp;<code>Observable</code>&nbsp;a specified number of times.&nbsp;<em>Re-subscribing</em>&nbsp;to the result of an&nbsp;<code>HttpClient</code>&nbsp;method call has the effect of reissuing the HTTP request.</p>\r\n<p>\r\n\t<em>Pipe</em>&nbsp;it onto the&nbsp;<code>HttpClient</code>&nbsp;method result just before the error handler.</p>\r\n<pre>\r\n<code><span>getConfig</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>&lt;</span><span>Config</span><span>&gt;(</span><span>this</span><span>.</span><span>configUrl</span><span>)</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      </span><span>retry</span><span>(</span><span>3</span><span>),</span><span> </span><span>// retry </span><span>a</span><span> failed </span><span>request</span><span> up to 3 times</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>)</span><span> </span><span>// then handle the error</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<h2>\r\n\tObservables and operators</h2>\r\n<p>\r\n\tThe previous sections of this guide referred to RxJS&nbsp;<code>Observables</code>&nbsp;and operators such as&nbsp;<code>catchError</code>&nbsp;and&nbsp;<code>retry</code>. You will encounter more RxJS artifacts as you continue below.</p>\r\n<p>\r\n\tRxJS&nbsp;is a library for composing asynchronous and callback-based code in a&nbsp;<em>functional, reactive style</em>. Many Angular APIs, including&nbsp;<code>HttpClient</code>, produce and consume RxJS&nbsp;<code>Observables</code>.</p>\r\n<p>\r\n\tRxJS itself is out-of-scope for this guide. You will find many learning resources on the web. While you can get by with a minimum of RxJS knowledge, you&#39;ll want to grow your RxJS skills over time in order to use&nbsp;<code>HttpClient</code>&nbsp;effectively.</p>\r\n<p>\r\n\tIf you&#39;re following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These&nbsp;<code>ConfigService</code>&nbsp;imports are typical.</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>Observable</span><span>,</span><span> throwError </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;rxjs&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> catchError</span><span>,</span><span> </span><span>retry</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;rxjs/operators&#39;</span><span>;</span></code></pre>\r\n<h2>\r\n\tHTTP headers</h2>\r\n<p>\r\n\tMany servers require extra headers for save operations. For example, they may require a &quot;Content-Type&quot; header to explicitly declare the MIME type of the request body; or the server may require an authorization token.</p>\r\n<h3>\r\n\tAdding headers</h3>\r\n<p>\r\n\tThe&nbsp;<code>HeroesService</code>&nbsp;defines such headers in an&nbsp;<code>httpOptions</code>&nbsp;object that will be passed to every&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;save method.</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>HttpHeaders</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>&#39;</span><span>;</span><span>\r\n\r\n</span><span>const</span><span> httpOptions </span><span>=</span><span> </span><span>{</span><span>\r\n  headers</span><span>:</span><span> </span><span>new</span><span> </span><span>HttpHeaders</span><span>({</span><span>\r\n    </span><span>&#39;Content-Type&#39;</span><span>:</span><span>  </span><span>&#39;application/json&#39;</span><span>,</span><span>\r\n    </span><span>&#39;Authorization&#39;</span><span>:</span><span> </span><span>&#39;my-auth-token&#39;</span><span>\r\n  </span><span>})</span><span>\r\n</span><span>};</span></code></pre>\r\n<h3>\r\n\tUpdating headers</h3>\r\n<p>\r\n\tYou can&#39;t directly modify the existing headers within the previous options object because instances of the&nbsp;<code>HttpHeaders</code>&nbsp;class are immutable.</p>\r\n<p>\r\n\tUse the&nbsp;<code>set()</code>&nbsp;method instead, to return a clone of the current instance with the new changes applied.</p>\r\n<p>\r\n\tHere&#39;s how you might update the authorization header (after the old token expired) before making the next request.</p>\r\n<pre>\r\n<code><span>httpOptions</span><span>.</span><span>headers </span><span>=</span><span>\r\n  httpOptions</span><span>.</span><span>headers</span><span>.</span><span>set</span><span>(</span><span>&#39;Authorization&#39;</span><span>,</span><span> </span><span>&#39;my-new-auth-token&#39;</span><span>);</span></code></pre>\r\n<h2>\r\n\tSending data to the server</h2>\r\n<p>\r\n\tIn addition to fetching data from the server,&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;supports mutating requests, that is, sending data to the server with other HTTP methods such as PUT, POST, and DELETE.</p>\r\n<p>\r\n\tThe sample app for this guide includes a simplified version of the &quot;Tour of Heroes&quot; example that fetches heroes and enables users to add, delete, and update them.</p>\r\n<p>\r\n\tThe following sections excerpt methods of the sample&#39;s&nbsp;<code>HeroesService</code>.</p>\r\n<h3>\r\n\tMaking a POST request</h3>\r\n<p>\r\n\tApps often POST data to a server. They POST when submitting a form. In the following example, the&nbsp;<code>HeroesService</code>&nbsp;posts when adding a hero to the database.</p>\r\n<pre>\r\n<code><span>/** POST: add </span><span>a</span><span> new hero to the database */</span><span>\r\naddHero </span><span>(</span><span>hero</span><span>:</span><span> </span><span>Hero</span><span>):</span><span> </span><span>Observable</span><span>&lt;</span><span>Hero</span><span>&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>post</span><span>&lt;</span><span>Hero</span><span>&gt;(</span><span>this</span><span>.</span><span>heroesUrl</span><span>,</span><span> hero</span><span>,</span><span> httpOptions</span><span>)</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>(</span><span>&#39;addHero&#39;</span><span>,</span><span> hero</span><span>))</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe&nbsp;<code>HttpClient.post()</code>&nbsp;method is similar to&nbsp;<code>get()</code>&nbsp;in that it has a type parameter (you&#39;re expecting the server to return the new hero) and it takes a resource URL.</p>\r\n<p>\r\n\tIt takes two more parameters:</p>\r\n<ol>\r\n\t<li>\r\n\t\t<code>hero</code>&nbsp;- the data to POST in the body of the request.</li>\r\n\t<li>\r\n\t\t<code>httpOptions</code>&nbsp;- the method options which, in this case,&nbsp;specify required headers.</li>\r\n</ol>\r\n<p>\r\n\tOf course it catches errors in much the same manner&nbsp;described above.</p>\r\n<p>\r\n\tThe&nbsp;<code>HeroesComponent</code>&nbsp;initiates the actual POST operation by subscribing to the&nbsp;<code>Observable</code>&nbsp;returned by this service method.</p>\r\n<pre>\r\n<code><span>this</span><span>.</span><span>heroesService\r\n  </span><span>.</span><span>addHero</span><span>(</span><span>newHero</span><span>)</span><span>\r\n  </span><span>.</span><span>subscribe</span><span>(</span><span>hero </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>heroes</span><span>.</span><span>push</span><span>(</span><span>hero</span><span>));</span></code></pre>\r\n<p>\r\n\tWhen the server responds successfully with the newly added hero, the component adds that hero to the displayed&nbsp;<code>heroes</code>&nbsp;list.</p>\r\n<h3>\r\n\tMaking a DELETE request</h3>\r\n<p>\r\n\tThis application deletes a hero with the&nbsp;<code>HttpClient.delete</code>&nbsp;method by passing the hero&#39;s id in the request URL.</p>\r\n<pre>\r\n<code><span>/** DELETE: delete the hero from the server */</span><span>\r\ndeleteHero </span><span>(</span><span>id</span><span>:</span><span> number</span><span>):</span><span> </span><span>Observable</span><span>&lt;{}&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>const</span><span> url </span><span>=</span><span> </span><span>`${this.heroesUrl}/${id}`</span><span>;</span><span> </span><span>// DELETE api/heroes/42</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>delete</span><span>(</span><span>url</span><span>,</span><span> httpOptions</span><span>)</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>(</span><span>&#39;deleteHero&#39;</span><span>))</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<code>HeroesComponent</code>&nbsp;initiates the actual DELETE operation by subscribing to the&nbsp;<code>Observable</code>&nbsp;returned by this service method.</p>\r\n<pre>\r\n<code><span>this</span><span>.</span><span>heroesService\r\n  </span><span>.</span><span>deleteHero</span><span>(</span><span>hero</span><span>.</span><span>id</span><span>)</span><span>\r\n  </span><span>.</span><span>subscribe</span><span>();</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe component isn&#39;t expecting a result from the delete operation, so it subscribes without a callback. Even though you are not using the result, you still have to subscribe. Calling the&nbsp;<code>subscribe()</code>&nbsp;method&nbsp;<em>executes</em>&nbsp;the observable, which is what initiates the DELETE request.</p>\r\n<p>\r\n\tYou must call&nbsp;<em>subscribe()</em>&nbsp;or nothing happens. Just calling&nbsp;<code>HeroesService.deleteHero()</code>&nbsp;does not initiate the DELETE request.</p>\r\n<pre>\r\n<code><span>// oops ... subscribe() is missing so nothing happens</span><span>\r\n</span><span>this</span><span>.</span><span>heroesService</span><span>.</span><span>deleteHero</span><span>(</span><span>hero</span><span>.</span><span>id</span><span>);</span></code></pre>\r\n<p>\r\n\tAlways&nbsp;<em>subscribe</em>!</p>\r\n<p>\r\n\tAn&nbsp;<code>HttpClient</code>&nbsp;method does not begin its HTTP request until you call&nbsp;<code>subscribe()</code>&nbsp;on the observable returned by that method. This is true for&nbsp;<em>all</em>&nbsp;<code>HttpClient</code>&nbsp;<em>methods</em>.</p>\r\n<p>\r\n\tThe&nbsp;<code>AsyncPipe</code>&nbsp;subscribes (and unsubscribes) for you automatically.</p>\r\n<p>\r\n\tAll observables returned from&nbsp;<code>HttpClient</code>&nbsp;methods are&nbsp;<em>cold</em>&nbsp;by design. Execution of the HTTP request is&nbsp;<em>deferred</em>, allowing you to extend the observable with additional operations such as&nbsp;<code>tap</code>&nbsp;and&nbsp;<code>catchError</code>&nbsp;before anything actually happens.</p>\r\n<p>\r\n\tCalling&nbsp;<code>subscribe(...)</code>&nbsp;triggers execution of the observable and causes&nbsp;<code>HttpClient</code>&nbsp;to compose and send the HTTP request to the server.</p>\r\n<p>\r\n\tYou can think of these observables as&nbsp;<em>blueprints</em>&nbsp;for actual HTTP requests.</p>\r\n<p>\r\n\tIn fact, each&nbsp;<code>subscribe()</code>&nbsp;initiates a separate, independent execution of the observable. Subscribing twice results in two HTTP requests.</p>\r\n<p>\r\n\t<code-example><aio-code> </aio-code></code-example></p>\r\n<pre>\r\n<code><span>const</span><span> req </span><span>=</span><span> http</span><span>.</span><span>get</span><span>&lt;</span><span>Heroes</span><span>&gt;(</span><span>&#39;/api/heroes&#39;</span><span>);</span><span>\r\n</span><span>// 0 requests made - .subscribe() not called.</span><span>\r\nreq</span><span>.</span><span>subscribe</span><span>();</span><span>\r\n</span><span>// 1 </span><span>request</span><span> made.</span><span>\r\nreq</span><span>.</span><span>subscribe</span><span>();</span><span>\r\n</span><span>// 2 requests made.</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<h3>\r\n\tMaking a PUT request</h3>\r\n<p>\r\n\tAn app will send a PUT request to completely replace a resource with updated data. The following&nbsp;<code>HeroesService</code>&nbsp;example is just like the POST example.</p>\r\n<pre>\r\n<code><span>/** PUT: </span><span>update</span><span> the hero on the server. Returns the updated hero upon success. */</span><span>\r\nupdateHero </span><span>(</span><span>hero</span><span>:</span><span> </span><span>Hero</span><span>):</span><span> </span><span>Observable</span><span>&lt;</span><span>Hero</span><span>&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>put</span><span>&lt;</span><span>Hero</span><span>&gt;(</span><span>this</span><span>.</span><span>heroesUrl</span><span>,</span><span> hero</span><span>,</span><span> httpOptions</span><span>)</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>(</span><span>&#39;updateHero&#39;</span><span>,</span><span> hero</span><span>))</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tFor the reasons&nbsp;explained above, the caller (<code>HeroesComponent.update()</code>&nbsp;in this case) must&nbsp;<code>subscribe()</code>&nbsp;to the observable returned from the&nbsp;<code>HttpClient.put()</code>&nbsp;in order to initiate the request.<span>Most front-end applications communicate with backend services over the HTTP protocol. Modern browsers support two different APIs for making HTTP requests: the&nbsp;</span><code>XMLHttpRequest</code><span>&nbsp;</span><span>interface and the</span><span>&nbsp;</span><code>fetch()</code><span>&nbsp;</span><span>API.</span></p>\r\n<p>\r\n\tThe&nbsp;<code>HttpClient</code>&nbsp;in&nbsp;<code>@angular/common/http</code>&nbsp;offers a simplified client HTTP API for Angular applications that rests on the&nbsp;<code>XMLHttpRequest</code>&nbsp;interface exposed by browsers. Additional benefits of&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;include testability features, typed request and response objects, request and response interception,&nbsp;<code>Observable</code>&nbsp;apis, and streamlined error handling.</p>\r\n<p>\r\n\tThe sample app does not require a data server. It relies on the&nbsp;Angular&nbsp;<em>in-memory-web-api</em>, which replaces the&nbsp;<em>HttpClient</em>&nbsp;module&#39;s&nbsp;<code>HttpBackend</code>. The replacement service simulates the behavior of a REST-like backend.</p>\r\n<p>\r\n\tLook at the&nbsp;<code>AppModule</code>&nbsp;<em>imports</em>&nbsp;to see how it is configured.</p>\r\n<h2>\r\n\tAdvanced usage</h2>\r\n<p>\r\n\tWe have discussed the basic HTTP functionality in&nbsp;<code>@angular/common/http</code>, but sometimes you need to do more than make simple requests and get data back.</p>\r\n<h3>\r\n\tHTTP interceptors</h3>\r\n<p>\r\n\t<em>HTTP Interception</em>&nbsp;is a major feature of&nbsp;<code>@angular/common/http</code>. With interception, you declare&nbsp;<em>interceptors</em>&nbsp;that inspect and transform HTTP requests from your application to the server. The same interceptors may also inspect and transform the server&#39;s responses on their way back to the application. Multiple interceptors form a&nbsp;<em>forward-and-backward</em>&nbsp;chain of request/response handlers.</p>\r\n<p>\r\n\tInterceptors can perform a variety of&nbsp;<em>implicit</em>&nbsp;tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response.</p>\r\n<p>\r\n\tWithout interception, developers would have to implement these tasks&nbsp;<em>explicitly</em>&nbsp;for each&nbsp;<code>HttpClient</code>&nbsp;method call.</p>\r\n<h4>\r\n\tWrite an interceptor</h4>\r\n<p>\r\n\tTo implement an interceptor, declare a class that implements the&nbsp;<code>intercept()</code>&nbsp;method of the&nbsp;<code>HttpInterceptor</code>&nbsp;interface.</p>\r\n<p>\r\n\tHere is a do-nothing&nbsp;<em>noop</em>&nbsp;interceptor that simply passes the request through without touching it:<code-example></code-example></p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>Injectable</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span>\r\n  </span><span>HttpEvent</span><span>,</span><span> </span><span>HttpInterceptor</span><span>,</span><span> </span><span>HttpHandler</span><span>,</span><span> </span><span>HttpRequest</span><span>\r\n</span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>&#39;</span><span>;</span><span>\r\n\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>Observable</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;rxjs&#39;</span><span>;</span><span>\r\n\r\n</span><span>/** Pass untouched </span><span>request</span><span> through to the next </span><span>request</span><span> handler. */</span><span>\r\n</span><span>@</span><span>Injectable</span><span>()</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>NoopInterceptor</span><span> </span><span>implements</span><span> </span><span>HttpInterceptor</span><span> </span><span>{</span><span>\r\n\r\n  intercept</span><span>(</span><span>req</span><span>:</span><span> </span><span>HttpRequest</span><span>&lt;any&gt;</span><span>,</span><span> </span><span>next</span><span>:</span><span> </span><span>HttpHandler</span><span>):</span><span>\r\n    </span><span>Observable</span><span>&lt;</span><span>HttpEvent</span><span>&lt;any&gt;</span><span>&gt;</span><span> </span><span>{</span><span>\r\n    </span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>req</span><span>);</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe&nbsp;<code>intercept</code>&nbsp;method transforms a request into an&nbsp;<code>Observable</code>&nbsp;that eventually returns the HTTP response. In this sense, each interceptor is fully capable of handling the request entirely by itself.</p>\r\n<p>\r\n\tMost interceptors inspect the request on the way in and forward the (perhaps altered) request to the&nbsp;<code>handle()</code>&nbsp;method of the&nbsp;<code>next</code>&nbsp;object which implements the&nbsp;<code>HttpHandler</code>&nbsp;interface.</p>\r\n<pre>\r\n<code><span>export</span><span> </span><span>abstract</span><span> </span><span>class</span><span> </span><span>HttpHandler</span><span> </span><span>{</span><span>\r\n  </span><span>abstract</span><span> handle</span><span>(</span><span>req</span><span>:</span><span> </span><span>HttpRequest</span><span>&lt;</span><span>any</span><span>&gt;):</span><span> </span><span>Observable</span><span>&lt;</span><span>HttpEvent</span><span>&lt;</span><span>any</span><span>&gt;&gt;;</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tLike&nbsp;<code>intercept()</code>, the&nbsp;<code>handle()</code>&nbsp;method transforms an HTTP request into an&nbsp;<code>Observable</code>&nbsp;of&nbsp;<code>HttpEvents</code>&nbsp;which ultimately include the server&#39;s response. The&nbsp;<code>intercept()</code>&nbsp;method could inspect that observable and alter it before returning it to the caller.</p>\r\n<p>\r\n\tThis&nbsp;<em>no-op</em>&nbsp;interceptor simply calls&nbsp;<code>next.handle()</code>&nbsp;with the original request and returns the observable without doing a thing.</p>\r\n<h4>\r\n\tThe&nbsp;<em>next</em>&nbsp;object</h4>\r\n<p>\r\n\tThe&nbsp;<code>next</code>&nbsp;object represents the next interceptor in the chain of interceptors. The final&nbsp;<code>next</code>&nbsp;in the chain is the&nbsp;<code>HttpClient</code>&nbsp;backend handler that sends the request to the server and receives the server&#39;s response.</p>\r\n<p>\r\n\tMost interceptors call&nbsp;<code>next.handle()</code>&nbsp;so that the request flows through to the next interceptor and, eventually, the backend handler. An interceptor&nbsp;<em>could</em>&nbsp;skip calling&nbsp;<code>next.handle()</code>, short-circuit the chain, and&nbsp;return its own&nbsp;<code>Observable</code>&nbsp;with an artificial server response.</p>\r\n<p>\r\n\tThis is a common middleware pattern found in frameworks such as Express.js.</p>\r\n<h4>\r\n\tProvide the interceptor</h4>\r\n<p>\r\n\tThe&nbsp;<code>NoopInterceptor</code>&nbsp;is a service managed by Angular&#39;s&nbsp;dependency injection (DI)&nbsp;system. Like other services, you must provide the interceptor class before the app can use it.</p>\r\n<p>\r\n\tBecause interceptors are (optional) dependencies of the&nbsp;<code>HttpClient</code>&nbsp;service, you must provide them in the same injector (or a parent of the injector) that provides&nbsp;<code>HttpClient</code>. Interceptors provided&nbsp;<em>after</em>&nbsp;DI creates the&nbsp;<code>HttpClient</code>&nbsp;are ignored.</p>\r\n<p>\r\n\tThis app provides&nbsp;<code>HttpClient</code>&nbsp;in the app&#39;s root injector, as a side-effect of importing the&nbsp;<code>HttpClientModule</code>&nbsp;in&nbsp;<code>AppModule</code>. You should provide interceptors in&nbsp;<code>AppModule</code>&nbsp;as well.</p>\r\n<p>\r\n\tAfter importing the&nbsp;<code>HTTP_INTERCEPTORS</code>&nbsp;injection token from&nbsp;<code>@angular/common/http</code>, write the&nbsp;<code>NoopInterceptor</code>&nbsp;provider like this:</p>\r\n<pre>\r\n<code><span>{</span><span> provide</span><span>:</span><span> </span><span>HTTP_INTERCEPTORS</span><span>,</span><span> useClass</span><span>:</span><span> </span><span>NoopInterceptor</span><span>,</span><span> multi</span><span>:</span><span> </span><span>true</span><span> </span><span>},</span></code></pre>\r\n<p>\r\n\tNote the&nbsp;<code>multi: true</code>&nbsp;option. This required setting tells Angular that&nbsp;<code>HTTP_INTERCEPTORS</code>&nbsp;is a token for a&nbsp;<em>multiprovider</em>&nbsp;that injects an array of values, rather than a single value.</p>\r\n<p>\r\n\tYou&nbsp;<em>could</em>&nbsp;add this provider directly to the providers array of the&nbsp;<code>AppModule</code>. However, it&#39;s rather verbose and there&#39;s a good chance that you&#39;ll create more interceptors and provide them in the same way. You must also pay&nbsp;close attention to the order&nbsp;in which you provide these interceptors.</p>\r\n<p>\r\n\tConsider creating a &quot;barrel&quot; file that gathers all the interceptor providers into an&nbsp;<code>httpInterceptorProviders</code>&nbsp;array, starting with this first one, the&nbsp;<code>NoopInterceptor</code>.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>/* &quot;Barrel&quot; of Http Interceptors */</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>HTTP_INTERCEPTORS</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>&#39;</span><span>;</span><span>\r\n\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>NoopInterceptor</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;./noop-interceptor&#39;</span><span>;</span><span>\r\n\r\n</span><span>/** Http interceptor providers in outside-in order */</span><span>\r\n</span><span>export</span><span> </span><span>const</span><span> httpInterceptorProviders </span><span>=</span><span> </span><span>[</span><span>\r\n  </span><span>{</span><span> provide</span><span>:</span><span> </span><span>HTTP_INTERCEPTORS</span><span>,</span><span> useClass</span><span>:</span><span> </span><span>NoopInterceptor</span><span>,</span><span> multi</span><span>:</span><span> </span><span>true</span><span> </span><span>},</span><span>\r\n</span><span>];</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThen import and add it to the&nbsp;<code>AppModule</code>&nbsp;<em>providers array</em>&nbsp;like this:</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>providers</span><span>:</span><span> </span><span>[</span><span>\r\n  httpInterceptorProviders\r\n</span><span>],</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tAs you create new interceptors, add them to the&nbsp;<code>httpInterceptorProviders</code>&nbsp;array and you won&#39;t have to revisit the&nbsp;<code>AppModule</code>.</p>\r\n<p>\r\n\tThere are many more interceptors in the complete sample code.</p>\r\n<h4>\r\n\tInterceptor order</h4>\r\n<p>\r\n\tAngular applies interceptors in the order that you provide them. If you provide interceptors&nbsp;<em>A</em>, then&nbsp;<em>B</em>, then&nbsp;<em>C</em>, requests will flow in&nbsp;<em>A-&gt;B-&gt;C</em>&nbsp;and responses will flow out&nbsp;<em>C-&gt;B-&gt;A</em>.</p>\r\n<p>\r\n\tYou cannot change the order or remove interceptors later. If you need to enable and disable an interceptor dynamically, you&#39;ll have to build that capability into the interceptor itself.</p>\r\n<h4>\r\n\t<em>HttpEvents</em></h4>\r\n<p>\r\n\tYou may have expected the&nbsp;<code>intercept()</code>&nbsp;and&nbsp;<code>handle()</code>&nbsp;methods to return observables of&nbsp;<code>HttpResponse&lt;any&gt;</code>&nbsp;as most&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;methods do.</p>\r\n<p>\r\n\tInstead they return observables of&nbsp;<code>HttpEvent&lt;any&gt;</code>.</p>\r\n<p>\r\n\tThat&#39;s because interceptors work at a lower level than those&nbsp;<code>HttpClient</code>&nbsp;methods. A single HTTP request can generate multiple&nbsp;<em>events</em>, including upload and download progress events. The&nbsp;<code>HttpResponse</code>&nbsp;class itself is actually an event, whose type is&nbsp;<code>HttpEventType.Response</code>.</p>\r\n<p>\r\n\tMany interceptors are only concerned with the outgoing request and simply return the event stream from&nbsp;<code>next.handle()</code>&nbsp;without modifying it.</p>\r\n<p>\r\n\tBut interceptors that examine and modify the response from&nbsp;<code>next.handle()</code>&nbsp;will see all of these events. Your interceptor should return&nbsp;<em>every event untouched</em>&nbsp;unless it has a&nbsp;<em>compelling reason to do otherwise</em>.</p>\r\n<h4>\r\n\tImmutability</h4>\r\n<p>\r\n\tAlthough interceptors are capable of mutating requests and responses, the&nbsp;<code>HttpRequest</code>&nbsp;and&nbsp;<code>HttpResponse</code>&nbsp;instance properties are&nbsp;<code>readonly</code>, rendering them largely immutable.</p>\r\n<p>\r\n\tThey are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times. If an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</p>\r\n<p>\r\n\tTypeScript will prevent you from setting&nbsp;<code>HttpRequest</code>&nbsp;readonly properties.</p>\r\n<pre>\r\n<code><span>// Typescript disallows the following assignment because req.url is readonly</span><span>\r\nreq</span><span>.</span><span>url </span><span>=</span><span> req</span><span>.</span><span>url</span><span>.</span><span>replace</span><span>(</span><span>&#39;</span><span>http</span><span>://&#39;</span><span>,</span><span> </span><span>&#39;https://&#39;</span><span>);</span></code></pre>\r\n<p>\r\n\tTo alter the request, clone it first and modify the clone before passing it to&nbsp;<code>next.handle()</code>. You can clone and modify the request in a single step as in this example.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>// clone </span><span>request</span><span> and replace &#39;</span><span>http</span><span>://&#39; with &#39;https://&#39; at the same </span><a href=\"https://angular.io/\" target=\"_blank\"><span>time</span></a><span>\r\n</span><span>const</span><span> secureReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span>\r\n  url</span><span>:</span><span> req</span><span>.</span><span>url</span><span>.</span><span>replace</span><span>(</span><span>&#39;</span><span>http</span><span>://&#39;</span><span>,</span><span> </span><span>&#39;https://&#39;</span><span>)</span><span>\r\n</span><span>});</span><span>\r\n</span><span>// send the cloned, &quot;secure&quot; </span><span>request</span><span> to the next handler.</span><span>\r\n</span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>secureReq</span><span>);</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe&nbsp;<code>clone()</code>&nbsp;method&#39;s hash argument allows you to mutate specific properties of the request while copying the others.</p>\r\n<h5>\r\n\tThe request body</h5>\r\n<p>\r\n\tThe&nbsp;<code>readonly</code>&nbsp;assignment guard can&#39;t prevent deep updates and, in particular, it can&#39;t prevent you from modifying a property of a request body object.</p>\r\n<pre>\r\n<code><span>req</span><span>.</span><span>body</span><span>.</span><span>name </span><span>=</span><span> req</span><span>.</span><span>body</span><span>.</span><span>name</span><span>.</span><span>trim</span><span>();</span><span> </span><span>// bad idea!</span></code></pre>\r\n<p>\r\n\tIf you must mutate the request body, copy it first, change the copy,&nbsp;<code>clone()</code>&nbsp;the request, and set the clone&#39;s body with the new body, as in the following example.</p>\r\n<br />\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t<header></header><aio-code> </aio-code></p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<pre>\r\n<code><span>// copy the body and trim whitespace from the name property</span><span>\r\n</span><span>const</span><span> newBody </span><span>=</span><span> </span><span>{</span><span> </span><span>...</span><span>body</span><span>,</span><span> name</span><span>:</span><span> body</span><span>.</span><span>name</span><span>.</span><span>trim</span><span>()</span><span> </span><span>};</span><span>\r\n</span><span>// clone </span><span>request</span><span> and set its body</span><span>\r\n</span><span>const</span><span> newReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span> body</span><span>:</span><span> newBody </span><span>});</span><span>\r\n</span><span>// send the cloned </span><span>request</span><span> to the next handler.</span><span>\r\n</span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>newReq</span><span>);</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<h5>\r\n\tClearing the request body</h5>\r\n<p>\r\n\tSometimes you need to clear the request body rather than replace it. If you set the cloned request body to&nbsp;<code>undefined</code>, Angular assumes you intend to leave the body as is. That is not what you want. If you set the cloned request body to&nbsp;<code>null</code>, Angular knows you intend to clear the request body.</p>\r\n<pre>\r\n<code><span>newReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span> </span><span>...</span><span> </span><span>});</span><span> </span><span>// body not mentioned =&gt; preserve original body</span><span>\r\nnewReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span> body</span><span>:</span><span> </span><span>undefined</span><span> </span><span>});</span><span> </span><span>// preserve original body</span><span>\r\nnewReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span> body</span><span>:</span><span> </span><span>null</span><span> </span><span>});</span><span> </span><span>// clear the body</span></code></pre>\r\n<h4>\r\n\tSet default headers</h4>\r\n<p>\r\n\tApps often use an interceptor to set default headers on outgoing requests.</p>\r\n<p>\r\n\tThe sample app has an&nbsp;<code>AuthService</code>&nbsp;that produces an authorization token. Here is its&nbsp;<code>AuthInterceptor</code>&nbsp;that injects that service to get the token and adds an authorization header with that token to every outgoing request:</p>\r\n<br />\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t<header></header><aio-code> </aio-code></p>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>AuthService</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;../auth.service&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>Injectable</span><span>()</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>AuthInterceptor</span><span> </span><span>implements</span><span> </span><span>HttpInterceptor</span><span> </span><span>{</span><span>\r\n\r\n  </span><span>constructor</span><span>(</span><span>private</span><span> auth</span><span>:</span><span> </span><span>AuthService</span><span>)</span><span> </span><span>{}</span><span>\r\n\r\n  intercept</span><span>(</span><span>req</span><span>:</span><span> </span><span>HttpRequest</span><span>&lt;any&gt;</span><span>,</span><span> </span><span>next</span><span>:</span><span> </span><span>HttpHandler</span><span>)</span><span> </span><span>{</span><span>\r\n    </span><span>// Get the auth token from the service.</span><span>\r\n    </span><span>const</span><span> authToken </span><span>=</span><span> </span><span>this</span><span>.</span><span>auth</span><span>.</span><span>getAuthorizationToken</span><span>();</span><span>\r\n\r\n    </span><span>// Clone the </span><span>request</span><span> and replace the original headers with</span><span>\r\n    </span><span>// cloned headers, updated with the authorization.</span><span>\r\n    </span><span>const</span><span> authReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span>\r\n      headers</span><span>:</span><span> req</span><span>.</span><span>headers</span><span>.</span><span>set</span><span>(</span><span>&#39;Authorization&#39;</span><span>,</span><span> authToken</span><span>)</span><span>\r\n    </span><span>});</span><span>\r\n\r\n    </span><span>// send cloned </span><span>request</span><span> with header to the next handler.</span><span>\r\n    </span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>authReq</span><span>);</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe practice of cloning a request to set new headers is so common that there&#39;s a&nbsp;<code>setHeaders</code>&nbsp;shortcut for it:</p>\r\n<pre>\r\n<code><span>// Clone the </span><span>request</span><span> and set the new header in one step.</span><span>\r\n</span><span>const</span><span> authReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span> setHeaders</span><span>:</span><span> </span><span>{</span><span> </span><span>Authorization</span><span>:</span><span> authToken </span><span>}</span><span> </span><span>});</span></code></pre>\r\n<p>\r\n\tAn interceptor that alters headers can be used for a number of different operations, including:</p>\r\n<ul>\r\n\t<li>\r\n\t\tAuthentication/authorization</li>\r\n\t<li>\r\n\t\tCaching behavior; for example,&nbsp;<code>If-Modified-Since</code></li>\r\n\t<li>\r\n\t\tXSRF protection</li>\r\n</ul>\r\n<h4>\r\n\tLogging</h4>\r\n<p>\r\n\tBecause interceptors can process the request and response&nbsp;<em>together</em>, they can do things like time and log an entire HTTP operation.</p>\r\n<p>\r\n\tConsider the following&nbsp;<code>LoggingInterceptor</code>, which captures the time of the request, the time of the response, and logs the outcome with the elapsed time with the injected&nbsp;<code>MessageService</code>.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> finalize</span><span>,</span><span> tap </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;rxjs/operators&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>MessageService</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;../message.service&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><a href=\"https://angular.io/api/core/Injectable\" target=\"_blank\"><span>Injectable</span></a><span>()</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>LoggingInterceptor</span><span> </span><span>implements</span><span> </span><span>HttpInterceptor</span><span> </span><span>{</span><span>\r\n  </span><span>constructor</span><span>(</span><span>private</span><span> messenger</span><span>:</span><span> </span><span>MessageService</span><span>)</span><span> </span><span>{}</span><span>\r\n\r\n  intercept</span><span>(</span><span>req</span><span>:</span><span> </span><span>HttpRequest</span><span>&lt;any&gt;</span><span>,</span><span> </span><span>next</span><span>:</span><span> </span><span>HttpHandler</span><span>)</span><span> </span><span>{</span><span>\r\n    </span><span>const</span><span> started </span><span>=</span><span> </span><span>Date</span><span>.</span><span>now</span><span>();</span><span>\r\n    </span><span>let</span><span> ok</span><span>:</span><span> </span><span>string</span><span>;</span><span>\r\n\r\n    </span><span>// extend server response observable with logging</span><span>\r\n    </span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>req</span><span>)</span><span>\r\n      </span><span>.</span><span>pipe</span><span>(</span><span>\r\n        tap</span><span>(</span><span>\r\n          </span><span>// Succeeds when there is </span><span>a</span><span> response; ignore other events</span><span>\r\n          </span><span>event</span><span> </span><span>=&gt;</span><span> ok </span><span>=</span><span> </span><span>event</span><span> </span><span>instanceof</span><span> </span><span>HttpResponse</span><span> </span><span>?</span><span> </span><span>&#39;succeeded&#39;</span><span> </span><span>:</span><span> </span><span>&#39;&#39;</span><span>,</span><span>\r\n          </span><span>// Operation failed; error is an </span><span>HttpErrorResponse</span><span>\r\n          error </span><span>=&gt;</span><span> ok </span><span>=</span><span> </span><span>&#39;failed&#39;</span><span>\r\n        </span><span>),</span><span>\r\n        </span><span>// Log when response observable either completes or errors</span><span>\r\n        finalize</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n          </span><span>const</span><span> elapsed </span><span>=</span><span> </span><span>Date</span><span>.</span><span>now</span><span>()</span><span> </span><span>-</span><span> started</span><span>;</span><span>\r\n          </span><span>const</span><span> msg </span><span>=</span><span> </span><span>`${req.method} &quot;${req.urlWithParams}&quot;\r\n             ${ok} in ${elapsed} ms.`</span><span>;</span><span>\r\n          </span><span>this</span><span>.</span><span>messenger</span><span>.</span><span>add</span><span>(</span><span>msg</span><span>);</span><span>\r\n        </span><span>})</span><span>\r\n      </span><span>);</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe RxJS&nbsp;<code>tap</code>&nbsp;operator captures whether the request succeeded or failed. The RxJS&nbsp;<code>finalize</code>&nbsp;operator is called when the response observable either errors or completes (which it must), and reports the outcome to the&nbsp;<code>MessageService</code>.</p>\r\n<p>\r\n\tNeither&nbsp;<code>tap</code>&nbsp;nor&nbsp;<code>finalize</code>&nbsp;touch the values of the observable stream returned to the caller.</p>\r\n<h4>\r\n\tCaching</h4>\r\n<p>\r\n\tInterceptors can handle requests by themselves, without forwarding to&nbsp;<code>next.handle()</code>.</p>\r\n<p>\r\n\tFor example, you might decide to cache certain requests and responses to improve performance. You can delegate caching to an interceptor without disturbing your existing data services.</p>\r\n<p>\r\n\tThe&nbsp;<code>CachingInterceptor</code>&nbsp;demonstrates this approach.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>@</span><span>Injectable</span><span>()</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>CachingInterceptor</span><span> </span><span>implements</span><span> </span><span>HttpInterceptor</span><span> </span><span>{</span><span>\r\n  </span><span>constructor</span><span>(</span><span>private</span><span> cache</span><span>:</span><span> </span><span>RequestCache</span><span>)</span><span> </span><span>{}</span><span>\r\n\r\n  intercept</span><span>(</span><span>req</span><span>:</span><span> </span><span>HttpRequest</span><span>&lt;any&gt;</span><span>,</span><span> </span><span>next</span><span>:</span><span> </span><span>HttpHandler</span><span>)</span><span> </span><span>{</span><span>\r\n    </span><span>// continue if not cachable.</span><span>\r\n    </span><span>if</span><span> </span><span>(!</span><span>isCachable</span><span>(</span><span>req</span><span>))</span><span> </span><span>{</span><span> </span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>req</span><span>);</span><span> </span><span>}</span><span>\r\n\r\n    </span><span>const</span><span> cachedResponse </span><span>=</span><span> </span><span>this</span><span>.</span><span>cache</span><span>.</span><span>get</span><span>(</span><span>req</span><span>);</span><span>\r\n    </span><span>return</span><span> cachedResponse </span><span>?</span><span>\r\n      of</span><span>(</span><span>cachedResponse</span><span>)</span><span> </span><span>:</span><span> sendRequest</span><span>(</span><span>req</span><span>,</span><span> </span><span>next</span><span>,</span><span> </span><span>this</span><span>.</span><span>cache</span><span>);</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe&nbsp;<code>isCachable()</code>&nbsp;function determines if the request is cachable. In this sample, only GET requests to the npm package search api are cachable.</p>\r\n<p>\r\n\tIf the request is not cachable, the interceptor simply forwards the request to the next handler in the chain.</p>\r\n<p>\r\n\tIf a cachable request is found in the cache, the interceptor returns an&nbsp;<code>of()</code>&nbsp;<em>observable</em>&nbsp;with the cached response, by-passing the&nbsp;<code>next</code>&nbsp;handler (and all other interceptors downstream).</p>\r\n<p>\r\n\tIf a cachable request is not in cache, the code calls&nbsp;<code>sendRequest</code>.</p>\r\n<pre>\r\n<code><span>/**\r\n * Get server response observable by sending </span><span>request</span><span> to `next()`.\r\n * Will add the response to the cache on the way out.\r\n */</span><span>\r\n</span><span>function</span><span> sendRequest</span><span>(</span><span>\r\n  req</span><span>:</span><span> </span><span>HttpRequest</span><span>&lt;any&gt;</span><span>,</span><span>\r\n  </span><span>next</span><span>:</span><span> </span><span>HttpHandler</span><span>,</span><span>\r\n  cache</span><span>:</span><span> </span><span>RequestCache</span><span>):</span><span> </span><span>Observable</span><span>&lt;</span><span>HttpEvent</span><span>&lt;any&gt;</span><span>&gt;</span><span> </span><span>{</span><span>\r\n\r\n  </span><span>// No headers allowed in npm search </span><span>request</span><span>\r\n  </span><span>const</span><span> noHeaderReq </span><span>=</span><span> req</span><span>.</span><span>clone</span><span>({</span><span> headers</span><span>:</span><span> </span><span>new</span><span> </span><span>HttpHeaders</span><span>()</span><span> </span><span>});</span><span>\r\n\r\n  </span><span>return</span><span> </span><span>next</span><span>.</span><span>handle</span><span>(</span><span>noHeaderReq</span><span>).</span><span>pipe</span><span>(</span><span>\r\n    tap</span><span>(</span><span>event</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n      </span><span>// There may be other events besides the response.</span><span>\r\n      </span><span>if</span><span> </span><span>(</span><span>event</span><span> </span><span>instanceof</span><span> </span><span>HttpResponse</span><span>)</span><span> </span><span>{</span><span>\r\n        cache</span><span>.</span><span>put</span><span>(</span><span>req</span><span>,</span><span> </span><span>event</span><span>);</span><span> </span><span>// </span><a href=\"https://angular.io/\" target=\"_blank\"><span>Update</span></a><span> the cache.</span><span>\r\n      </span><span>}</span><span>\r\n    </span><span>})</span><span>\r\n  </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<code>sendRequest</code>&nbsp;function creates a&nbsp;request clone&nbsp;without headers because the npm api forbids them.</p>\r\n<p>\r\n\tIt forwards that request to&nbsp;<code>next.handle()</code>&nbsp;which ultimately calls the server and returns the server&#39;s response.</p>\r\n<p>\r\n\tNote how&nbsp;<code>sendRequest</code>&nbsp;<em>intercepts the response</em>&nbsp;on its way back to the application. It&nbsp;<em>pipes</em>&nbsp;the response through the&nbsp;<code>tap()</code>&nbsp;operator, whose callback adds the response to the cache.</p>\r\n<p>\r\n\tThe original response continues untouched back up through the chain of interceptors to the application caller.</p>\r\n<p>\r\n\tData services, such as&nbsp;<code>PackageSearchService</code>, are unaware that some of their&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;requests actually return cached responses.</p>\r\n<h4>\r\n\tReturn a multi-valued&nbsp;<em>Observable</em></h4>\r\n<p>\r\n\tThe&nbsp;<code>HttpClient.get()</code>&nbsp;method normally returns an&nbsp;<em>observable</em>&nbsp;that either emits the data or an error. Some folks describe it as a &quot;<em>one and done</em>&quot; observable.</p>\r\n<p>\r\n\tBut an interceptor can change this to an&nbsp;<em>observable</em>&nbsp;that emits more than once.</p>\r\n<p>\r\n\tA revised version of the&nbsp;<code>CachingInterceptor</code>&nbsp;optionally returns an&nbsp;<em>observable</em>&nbsp;that immediately emits the cached response, sends the request to the NPM web API anyway, and emits again later with the updated search results.</p>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<pre>\r\n<code><span>// cache-then-refresh</span><span>\r\n</span><span>if</span><span> </span><span>(</span><span>req</span><span>.</span><span>headers</span><span>.</span><span>get</span><span>(</span><span>&#39;x-refresh&#39;</span><span>))</span><span> </span><span>{</span><span>\r\n  </span><span>const</span><span> results$ </span><span>=</span><span> sendRequest</span><span>(</span><span>req</span><span>,</span><span> </span><span>next</span><span>,</span><span> </span><span>this</span><span>.</span><span>cache</span><span>);</span><span>\r\n  </span><span>return</span><span> cachedResponse </span><span>?</span><span>\r\n    results$</span><span>.</span><span>pipe</span><span>(</span><span> startWith</span><span>(</span><span>cachedResponse</span><span>)</span><span> </span><span>)</span><span> </span><span>:</span><span>\r\n    results$</span><span>;</span><span>\r\n</span><span>}</span><span>\r\n</span><span>// cache-or-fetch</span><span>\r\n</span><span>return</span><span> cachedResponse </span><span>?</span><span>\r\n  of</span><span>(</span><span>cachedResponse</span><span>)</span><span> </span><span>:</span><span> sendRequest</span><span>(</span><span>req</span><span>,</span><span> </span><span>next</span><span>,</span><span> </span><span>this</span><span>.</span><span>cache</span><span>);</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<em>cache-then-refresh</em>&nbsp;option is triggered by the presence of a&nbsp;custom&nbsp;<code>x-refresh</code>&nbsp;header.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tA checkbox on the&nbsp;<code>PackageSearchComponent</code>&nbsp;toggles a&nbsp;<code>withRefresh</code>&nbsp;flag, which is one of the arguments to&nbsp;<code>PackageSearchService.search()</code>. That&nbsp;<code><a href=\"https://angular.io/api/common/upgrade/$locationShim#search\" target=\"_blank\">search()</a></code>&nbsp;method creates the custom&nbsp;<code>x-refresh</code>&nbsp;header and adds it to the request before calling&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient#get\" target=\"_blank\">HttpClient.get()</a></code>.</p>\r\n</blockquote>\r\n<p>\r\n\tThe revised&nbsp;<code>CachingInterceptor</code>&nbsp;sets up a server request whether there&#39;s a cached value or not, using the same&nbsp;<code>sendRequest()</code>&nbsp;method described&nbsp;above. The&nbsp;<code>results$</code>&nbsp;observable will make the request when subscribed.</p>\r\n<p>\r\n\tIf there&#39;s no cached value, the interceptor returns&nbsp;<code>results$</code>.</p>\r\n<p>\r\n\tIf there is a cached value, the code&nbsp;<em>pipes</em>&nbsp;the cached response onto&nbsp;<code>results$</code>, producing a recomposed observable that emits twice, the cached response first (and immediately), followed later by the response from the server. Subscribers see a sequence of&nbsp;<em>two</em>&nbsp;responses.</p>\r\n<h3>\r\n\tConfiguring the request</h3>\r\n<p>\r\n\tOther aspects of an outgoing request can be configured via the options object passed as the last argument to the&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;method.</p>\r\n<p>\r\n\tIn&nbsp;Adding headers, the&nbsp;<code>HeroesService</code>&nbsp;set the default headers by passing an options object (<code>httpOptions</code>) to its save methods. You can do more.</p>\r\n<h4>\r\n\tURL query strings</h4>\r\n<p>\r\n\tIn this section, you will see how to use the&nbsp;<code>HttpParams</code>&nbsp;class to add URL query strings in your&nbsp;<code>HttpRequest</code>.</p>\r\n<p>\r\n\tThe following&nbsp;<code>searchHeroes</code>&nbsp;method queries for heroes whose names contain the search term. Start by importing&nbsp;<code>HttpParams</code>&nbsp;class.</p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span>HttpParams</span><span>}</span><span> from </span><span>&quot;@angular/common/</span><span>http</span><span>&quot;</span><span>;</span></code></pre>\r\n<pre>\r\n<code><span>/* GET heroes whose name contains search term */</span><span>\r\nsearchHeroes</span><span>(</span><span>term</span><span>:</span><span> </span><span>string</span><span>):</span><span> </span><span>Observable</span><span>&lt;</span><span>Hero</span><span>[]&gt;</span><span> </span><span>{</span><span>\r\n  term </span><span>=</span><span> term</span><span>.</span><span>trim</span><span>();</span><span>\r\n\r\n  </span><span>// Add safe, </span><span>URL</span><span> encoded search parameter if there is </span><a href=\"https://angular.io/api/router/RouterLinkWithHref\" target=\"_blank\"><span>a</span></a><span> search term</span><span>\r\n  </span><span>const</span><span> options </span><span>=</span><span> term </span><span>?</span><span>\r\n   </span><span>{</span><span> </span><span>params</span><span>:</span><span> </span><span>new</span><span> </span><span>HttpParams</span><span>().</span><span>set</span><span>(</span><span>&#39;name&#39;</span><span>,</span><span> term</span><span>)</span><span> </span><span>}</span><span> </span><span>:</span><span> </span><span>{};</span><span>\r\n\r\n  </span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>get</span><span>&lt;</span><span>Hero</span><span>[]&gt;(</span><span>this</span><span>.</span><span>heroesUrl</span><span>,</span><span> options</span><span>)</span><span>\r\n    </span><span>.</span><span>pipe</span><span>(</span><span>\r\n      catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>&lt;</span><span>Hero</span><span>[]&gt;(</span><span>&#39;searchHeroes&#39;</span><span>,</span><span> </span><span>[]))</span><span>\r\n    </span><span>);</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tIf there is a search term, the code constructs an options object with an HTML URL-encoded search parameter. If the term were &quot;foo&quot;, the GET request URL would be&nbsp;<code>api/heroes?name=foo</code>.</p>\r\n<p>\r\n\tThe&nbsp;<code>HttpParams</code>&nbsp;are immutable so you&#39;ll have to save the returned value of the&nbsp;<code>.set()</code>&nbsp;method in order to update the options.</p>\r\n<h4>\r\n\tUse&nbsp;<code>fromString</code>&nbsp;to create HttpParams</h4>\r\n<p>\r\n\tYou can also create HTTP parameters directly from a query string by using the&nbsp;<code>fromString</code>&nbsp;variable:</p>\r\n<pre>\r\n<code><span>const</span><span> params </span><span>=</span><span> </span><span>new</span><span> </span><span>HttpParams</span><span>({</span><span>fromString</span><span>:</span><span> </span><span>&#39;name=foo&#39;</span><span>});</span></code></pre>\r\n<h3>\r\n\tDebouncing requests</h3>\r\n<p>\r\n\tThe sample includes an&nbsp;<em>npm package search</em>&nbsp;feature.</p>\r\n<p>\r\n\tWhen the user enters a name in a search-box, the&nbsp;<code>PackageSearchComponent</code>&nbsp;sends a search request for a package with that name to the NPM web API.</p>\r\n<p>\r\n\tHere&#39;s a pertinent excerpt from the template:</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>&lt;input</span><span> (</span><span>keyup</span><span>)</span><span>=</span><span>&quot;search($event.target.value)&quot;</span><span> </span><span>id</span><span>=</span><span>&quot;name&quot;</span><span> </span><span>placeholder</span><span>=</span><span>&quot;Search&quot;</span><span>/&gt;</span><span>\r\n\r\n</span><span>&lt;ul&gt;</span><span>\r\n  </span><span>&lt;li</span><span> *</span><span>ngFor</span><span>=</span><span>&quot;let package of packages$ | </span><span>async</span><span>&quot;</span><span>&gt;</span><span>\r\n    </span><span>&lt;b&gt;</span><span>{{package.name}} v.{{package.version}}</span><span>&lt;/b&gt;</span><span> -\r\n    </span><span>&lt;i&gt;</span><span>{{package.description}}</span><span>&lt;/i&gt;</span><span>\r\n  </span><span>&lt;/li&gt;</span><span>\r\n</span><span>&lt;/ul&gt;</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe&nbsp;<code>keyup</code>&nbsp;event binding sends every keystroke to the component&#39;s&nbsp;<code>search()</code>&nbsp;method.</p>\r\n<p>\r\n\tSending a request for every keystroke could be expensive. It&#39;s better to wait until the user stops typing and then send a request. That&#39;s easy to implement with RxJS operators, as shown in this excerpt.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>withRefresh </span><span>=</span><span> </span><span>false</span><span>;</span><span>\r\npackages$</span><span>:</span><span> </span><span>Observable</span><span>&lt;</span><span>NpmPackageInfo</span><span>[]&gt;;</span><span>\r\n</span><span>private</span><span> searchText$ </span><span>=</span><span> </span><span>new</span><span> </span><span>Subject</span><span>&lt;string&gt;</span><span>();</span><span>\r\n\r\nsearch</span><span>(</span><span>packageName</span><span>:</span><span> </span><span>string</span><span>)</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>searchText$</span><span>.</span><span>next</span><span>(</span><span>packageName</span><span>);</span><span>\r\n</span><span>}</span><span>\r\n\r\nngOnInit</span><span>()</span><span> </span><span>{</span><span>\r\n  </span><span>this</span><span>.</span><span>packages$ </span><span>=</span><span> </span><span>this</span><span>.</span><span>searchText$</span><span>.</span><span>pipe</span><span>(</span><span>\r\n    debounceTime</span><span>(</span><span>500</span><span>),</span><span>\r\n    distinctUntilChanged</span><span>(),</span><span>\r\n    switchMap</span><span>(</span><span>packageName </span><span>=&gt;</span><span>\r\n      </span><span>this</span><span>.</span><span>searchService</span><span>.</span><span>search</span><span>(</span><span>packageName</span><span>,</span><span> </span><span>this</span><span>.</span><span>withRefresh</span><span>))</span><span>\r\n  </span><span>);</span><span>\r\n</span><span>}</span><span>\r\n\r\n</span><span>constructor</span><span>(</span><span>private</span><span> searchService</span><span>:</span><span> </span><span>PackageSearchService</span><span>)</span><span> </span><span>{</span><span> </span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe&nbsp;<code>searchText$</code>&nbsp;is the sequence of search-box values coming from the user. It&#39;s defined as an RxJS&nbsp;<code>Subject</code>, which means it is a multicasting&nbsp;<code>Observable</code>&nbsp;that can also emit values for itself by calling&nbsp;<code>next(value)</code>, as happens in the&nbsp;<code>search()</code>&nbsp;method.</p>\r\n<p>\r\n\tRather than forward every&nbsp;<code>searchText</code>&nbsp;value directly to the injected&nbsp;<code>PackageSearchService</code>, the code in&nbsp;<code>ngOnInit()</code>&nbsp;<em>pipes</em>&nbsp;search values through three operators:</p>\r\n<ol>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>debounceTime(500)</code>&nbsp;- wait for the user to stop typing (1/2 second in this case).</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>distinctUntilChanged()</code>&nbsp;- wait until the search text changes.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>switchMap()</code>&nbsp;- send the search request to the service.</p>\r\n\t</li>\r\n</ol>\r\n<p>\r\n\tThe code sets&nbsp;<code>packages$</code>&nbsp;to this re-composed&nbsp;<code>Observable</code>&nbsp;of search results. The template subscribes to&nbsp;<code>packages$</code>&nbsp;with the&nbsp;<a href=\"https://angular.io/api/common/AsyncPipe\" target=\"_blank\">AsyncPipe</a>&nbsp;and displays search results as they arrive.</p>\r\n<p>\r\n\tA search value reaches the service only if it&#39;s a new value and the user has stopped typing.</p>\r\n<h4>\r\n\t<em>switchMap()</em></h4>\r\n<p>\r\n\tThe&nbsp;<code>switchMap()</code>&nbsp;operator has three important characteristics.</p>\r\n<ol>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tIt takes a function argument that returns an&nbsp;<code>Observable</code>.&nbsp;<code>PackageSearchService.search</code>&nbsp;returns an&nbsp;<code>Observable</code>, as other data service methods do.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tIf a previous search request is still&nbsp;<em>in-flight</em>&nbsp;(as when the network connection is poor), it cancels that request and sends a new one.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tIt returns service responses in their original request order, even if the server returns them out of order.</p>\r\n\t</li>\r\n</ol>\r\n<div>\r\n\t<p>\r\n\t\tIf you think you&#39;ll reuse this debouncing logic, consider moving it to a utility function or into the&nbsp;<code>PackageSearchService</code>&nbsp;itself.</p>\r\n</div>\r\n<h3>\r\n\tListening to progress events</h3>\r\n<p>\r\n\tSometimes applications transfer large amounts of data and those transfers can take a long time. File uploads are a typical example. Give the users a better experience by providing feedback on the progress of such transfers.</p>\r\n<p>\r\n\tTo make a request with progress events enabled, you can create an instance of&nbsp;<code>HttpRequest</code>&nbsp;with the&nbsp;<code>reportProgress</code>&nbsp;option set true to enable tracking of progress events.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>const</span><span> req </span><span>=</span><span> </span><span>new</span><span> </span><span>HttpRequest</span><span>(</span><span>&#39;POST&#39;</span><span>,</span><span> </span><span>&#39;/upload/file&#39;</span><span>,</span><span> file</span><span>,</span><span> </span><span>{</span><span>\r\n  </span><span>reportProgress</span><span>:</span><span> </span><span>true</span><span>\r\n</span><span>});</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tEvery progress event triggers change detection, so only turn them on if you truly intend to report progress in the UI.</p>\r\n\t<p>\r\n\t\tWhen using&nbsp;<a href=\"https://angular.io/api/common/http/HttpClient#request\" target=\"_blank\"><code>HttpClient#request()</code></a>&nbsp;with an HTTP method, configure with&nbsp;<a href=\"https://angular.io/api/common/http/HttpClient#request\" target=\"_blank\"><code>observe: &#39;events&#39;</code></a>&nbsp;to see all events, including the progress of transfers.</p>\r\n</blockquote>\r\n<p>\r\n\tNext, pass this request object to the&nbsp;<code>HttpClient.request()</code>&nbsp;method, which returns an&nbsp;<code>Observable</code>&nbsp;of&nbsp;<code>HttpEvents</code>, the same events processed by interceptors:</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>// The `HttpClient.request` API produces </span><span>a</span><span> raw event stream</span><span>\r\n</span><span>// which includes start (sent), progress, and response events.</span><span>\r\n</span><span>return</span><span> </span><span>this</span><span>.</span><span>http</span><span>.</span><span>request</span><span>(</span><span>req</span><span>).</span><span>pipe</span><span>(</span><span>\r\n  map</span><span>(</span><span>event</span><span> </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>getEventMessage</span><span>(</span><span>event</span><span>,</span><span> file</span><span>)),</span><span>\r\n  tap</span><span>(</span><span>message</span><span> </span><span>=&gt;</span><span> </span><span>this</span><span>.</span><span>showProgress</span><span>(</span><span>message</span><span>)),</span><span>\r\n  </span><span>last</span><span>(),</span><span> </span><span>// return last (completed) </span><span>message</span><span> to caller</span><span>\r\n  catchError</span><span>(</span><span>this</span><span>.</span><span>handleError</span><span>(</span><span>file</span><span>))</span><span>\r\n</span><span>);</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe&nbsp;<code>getEventMessage</code>&nbsp;method interprets each type of&nbsp;<code>HttpEvent</code>&nbsp;in the event stream.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>/** Return distinct </span><span>message</span><span> for sent, upload progress, &amp; response events */</span><span>\r\n</span><span>private</span><span> getEventMessage</span><span>(</span><span>event</span><span>:</span><span> </span><span>HttpEvent</span><span>&lt;any&gt;</span><span>,</span><span> file</span><span>:</span><span> </span><span>File</span><span>)</span><span> </span><span>{</span><span>\r\n  </span><span>switch</span><span> </span><span>(</span><span>event</span><span>.</span><span>type</span><span>)</span><span> </span><span>{</span><span>\r\n    </span><span>case</span><span> </span><span>HttpEventType</span><span>.</span><span>Sent</span><span>:</span><span>\r\n      </span><span>return</span><span> </span><span>`Uploading file &quot;${file.name}&quot; of size ${file.size}.`</span><span>;</span><span>\r\n\r\n    </span><span>case</span><span> </span><span>HttpEventType</span><span>.</span><span>UploadProgress</span><span>:</span><span>\r\n      </span><span>// Compute and show the % </span><span>done</span><span>:</span><span>\r\n      </span><span>const</span><span> percentDone </span><span>=</span><span> </span><span>Math</span><span>.</span><span>round</span><span>(</span><span>100</span><span> </span><span>*</span><span> </span><span>event</span><span>.</span><span>loaded </span><span>/</span><span> </span><span>event</span><span>.</span><span>total</span><span>);</span><span>\r\n      </span><span>return</span><span> </span><span>`File &quot;${file.name}&quot; is ${percentDone}% uploaded.`</span><span>;</span><span>\r\n\r\n    </span><span>case</span><span> </span><span>HttpEventType</span><span>.</span><span>Response</span><span>:</span><span>\r\n      </span><span>return</span><span> </span><span>`File &quot;${file.name}&quot; was completely uploaded!`</span><span>;</span><span>\r\n\r\n    </span><span>default</span><span>:</span><span>\r\n      </span><span>return</span><span> </span><span>`File &quot;${file.name}&quot; surprising upload event: ${event.type}.`</span><span>;</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tThe sample app for this guide doesn&#39;t have a server that accepts uploaded files. The&nbsp;<code>UploadInterceptor</code>&nbsp;in&nbsp;<code>app/http-interceptors/upload-interceptor.ts</code>&nbsp;intercepts and short-circuits upload requests by returning an observable of simulated events.</p>\r\n</blockquote>\r\n<h2>\r\n\tSecurity: XSRF protection</h2>\r\n<p>\r\n\tCross-Site Request Forgery (XSRF)&nbsp;is an attack technique by which the attacker can trick an authenticated user into unknowingly executing actions on your website.&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;supports a&nbsp;common mechanism&nbsp;used to prevent XSRF attacks. When performing HTTP requests, an interceptor reads a token from a cookie, by default&nbsp;<code>XSRF-TOKEN</code>, and sets it as an HTTP header,&nbsp;<code>X-XSRF-TOKEN</code>. Since only code that runs on your domain could read the cookie, the backend can be certain that the HTTP request came from your client application and not an attacker.</p>\r\n<p>\r\n\tBy default, an interceptor sends this header on all mutating requests (such as POST) to relative URLs, but not on GET/HEAD requests or on requests with an absolute URL.</p>\r\n<p>\r\n\tTo take advantage of this, your server needs to set a token in a JavaScript readable session cookie called&nbsp;<code>XSRF-TOKEN</code>&nbsp;on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the&nbsp;<code>X-XSRF-TOKEN</code>&nbsp;HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site&#39;s authentication cookie with a salt for added security.</p>\r\n<p>\r\n\tIn order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.</p>\r\n<div>\r\n\t<p>\r\n\t\t<em><code><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\">HttpClient</a></code>&nbsp;supports only the client half of the XSRF protection scheme.</em>&nbsp;Your backend service must be configured to set the cookie for your page, and to verify that the header is present on all eligible requests. If not, Angular&#39;s default protection will be ineffective.</p>\r\n</div>\r\n<h3>\r\n\tConfiguring custom cookie/header names</h3>\r\n<p>\r\n\tIf your backend service uses different names for the XSRF token cookie or header, use&nbsp;<code>HttpClientXsrfModule.withOptions()</code>&nbsp;to override the defaults.</p>\r\n<pre>\r\n<code><span>imports</span><span>:</span><span> </span><span>[</span><span>\r\n  </span><span>HttpClientModule</span><span>,</span><span>\r\n  </span><span>HttpClientXsrfModule</span><span>.</span><span>withOptions</span><span>({</span><span>\r\n    cookieName</span><span>:</span><span> </span><span>&#39;My-Xsrf-Cookie&#39;</span><span>,</span><span>\r\n    headerName</span><span>:</span><span> </span><span>&#39;My-Xsrf-Header&#39;</span><span>,</span><span>\r\n  </span><span>}),</span><span>\r\n</span><span>],</span></code></pre>\r\n<h2>\r\n\tTesting HTTP requests</h2>\r\n<p>\r\n\tAs for any external dependency, you must mock the HTTP backend so your tests can simulate interaction with a remote server. The&nbsp;<code>@angular/common/http/testing</code>&nbsp;library makes it straightforward to set up such mocking.</p>\r\n<p>\r\n\tAngular&#39;s HTTP testing library is designed for a pattern of testing in which the app executes code and makes requests first. The test then expects that certain requests have or have not been made, performs assertions against those requests, and finally provides responses by &quot;flushing&quot; each expected request.</p>\r\n<p>\r\n\tAt the end, tests may verify that the app has made no unexpected requests.</p>\r\n<h3>\r\n\tSetup</h3>\r\n<p>\r\n\tTo begin testing calls to&nbsp;<code>HttpClient</code>, import the&nbsp;<code>HttpClientTestingModule</code>&nbsp;and the mocking controller,&nbsp;<code>HttpTestingController</code>, along with the other symbols your tests require.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>// Http testing module and mocking controller</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>HttpClientTestingModule</span><span>,</span><span> </span><span>HttpTestingController</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>/testing&#39;</span><span>;</span><span>\r\n\r\n</span><span>// </span><span>Other</span><span> imports</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>TestBed</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core/testing&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><a href=\"https://angular.io/api/common/http/HttpClient\" target=\"_blank\"><span>HttpClient</span></a><span>,</span><span> </span><span>HttpErrorResponse</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/common/</span><span>http</span><span>&#39;</span><span>;</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThen add the&nbsp;<code>HttpClientTestingModule</code>&nbsp;to the&nbsp;<code>TestBed</code>&nbsp;and continue with the setup of the&nbsp;<em>service-under-test</em>.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>describe</span><span>(</span><span>&#39;</span><span>HttpClient</span><span> testing&#39;</span><span>,</span><span> </span><span>()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>let</span><span> httpClient</span><span>:</span><span> </span><span>HttpClient</span><span>;</span><span>\r\n  </span><span>let</span><span> httpTestingController</span><span>:</span><span> </span><span>HttpTestingController</span><span>;</span><span>\r\n\r\n  beforeEach</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n    </span><span>TestBed</span><span>.</span><span>configureTestingModule</span><span>({</span><span>\r\n      imports</span><span>:</span><span> </span><span>[</span><span> </span><span>HttpClientTestingModule</span><span> </span><span>]</span><span>\r\n    </span><span>});</span><span>\r\n\r\n    </span><span>// </span><span>Inject</span><span> the </span><span>http</span><span> service and test controller for each test</span><span>\r\n    httpClient </span><span>=</span><span> </span><span>TestBed</span><span>.</span><span>get</span><span>(</span><span>HttpClient</span><span>);</span><span>\r\n    httpTestingController </span><span>=</span><span> </span><span>TestBed</span><span>.</span><span>get</span><span>(</span><span>HttpTestingController</span><span>);</span><span>\r\n  </span><span>});</span><span>\r\n  </span><span>/// Tests begin ///</span><span>\r\n</span><span>});</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tNow requests made in the course of your tests will hit the testing backend instead of the normal backend.</p>\r\n<p>\r\n\tThis setup also calls&nbsp;<code>TestBed.get()</code>&nbsp;to inject the&nbsp;<code>HttpClient</code>&nbsp;service and the mocking controller so they can be referenced during the tests.</p>\r\n<h3>\r\n\tExpecting and answering requests</h3>\r\n<p>\r\n\tNow you can write a test that expects a GET Request to occur and provides a mock response.</p>\r\n<p>\r\n\t<aio-code> </aio-code></p>\r\n<pre>\r\n<code><span>it</span><span>(</span><span>&#39;can test HttpClient.get&#39;</span><span>,</span><span> </span><span>()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>const</span><span> testData</span><span>:</span><span> </span><span>Data</span><span> </span><span>=</span><span> </span><span>{</span><span>name</span><span>:</span><span> </span><span>&#39;Test </span><span>Data</span><span>&#39;</span><span>};</span><span>\r\n\r\n  </span><span>// Make an HTTP GET </span><span>request</span><span>\r\n  httpClient</span><span>.</span><span>get</span><span>&lt;</span><span>Data</span><span>&gt;(</span><span>testUrl</span><span>)</span><span>\r\n    </span><span>.</span><span>subscribe</span><span>(</span><span>data </span><span>=&gt;</span><span>\r\n      </span><span>// When observable resolves, result should match test data</span><span>\r\n      expect</span><span>(</span><span>data</span><span>).</span><span>toEqual</span><span>(</span><span>testData</span><span>)</span><span>\r\n    </span><span>);</span><span>\r\n\r\n  </span><span>// The following `expectOne()` will match the </span><span>request</span><span>&#39;s URL.</span><span>\r\n  </span><span>// If no requests or </span><span>multiple</span><span> requests matched that </span><span>URL</span><span>\r\n  </span><span>// `expectOne()` would throw.</span><span>\r\n  </span><span>const</span><span> req </span><span>=</span><span> httpTestingController</span><span>.</span><span>expectOne</span><span>(</span><span>&#39;/data&#39;</span><span>);</span><span>\r\n\r\n  </span><span>// Assert that the </span><span>request</span><span> is </span><span>a</span><span> GET.</span><span>\r\n  expect</span><span>(</span><span>req</span><span>.</span><span>request</span><span>.</span><span>method</span><span>).</span><span>toEqual</span><span>(</span><span>&#39;GET&#39;</span><span>);</span><span>\r\n\r\n  </span><span>// Respond with mock data, causing Observable to resolve.</span><span>\r\n  </span><span>// Subscribe </span><span>callback</span><span> asserts that correct data was returned.</span><span>\r\n  req</span><span>.</span><span>flush</span><span>(</span><span>testData</span><span>);</span><span>\r\n\r\n  </span><span>// Finally, assert that there are no outstanding requests.</span><span>\r\n  httpTestingController</span><span>.</span><span>verify</span><span>();</span><span>\r\n</span><span>});</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<p>\r\n\tThe last step, verifying that no requests remain outstanding, is common enough for you to move it into an&nbsp;<code>afterEach()</code>&nbsp;step:</p>\r\n<pre>\r\n<code><span>afterEach</span><span>(()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>// After every test, assert that there are no more pending requests.</span><span>\r\n  httpTestingController</span><span>.</span><span>verify</span><span>();</span><span>\r\n</span><span>});</span></code></pre>\r\n<h4>\r\n\tCustom request expectations</h4>\r\n<p>\r\n\tIf matching by URL isn&#39;t sufficient, it&#39;s possible to implement your own matching function. For example, you could look for an outgoing request that has an authorization header:</p>\r\n<pre>\r\n<code><span>// Expect one </span><span>request</span><span> with an authorization header</span><span>\r\n</span><span>const</span><span> req </span><span>=</span><span> httpTestingController</span><span>.</span><span>expectOne</span><span>(</span><span>\r\n  req </span><span>=&gt;</span><span> req</span><span>.</span><span>headers</span><span>.</span><span>has</span><span>(</span><span>&#39;Authorization&#39;</span><span>)</span><span>\r\n</span><span>);</span></code></pre>\r\n<p>\r\n\tAs with the previous&nbsp;<code>expectOne()</code>, the test will fail if 0 or 2+ requests satisfy this predicate.</p>\r\n<h4>\r\n\tHandling more than one request</h4>\r\n<p>\r\n\tIf you need to respond to duplicate requests in your test, use the&nbsp;<code>match()</code>&nbsp;API instead of&nbsp;<code>expectOne()</code>. It takes the same arguments but returns an array of matching requests. Once returned, these requests are removed from future matching and you are responsible for flushing and verifying them.</p>\r\n<pre>\r\n<code><span>// get all pending requests that match the given </span><span>URL</span><span>\r\n</span><span>const</span><span> requests </span><span>=</span><span> httpTestingController</span><span>.</span><span>match</span><span>(</span><span>testUrl</span><span>);</span><span>\r\nexpect</span><span>(</span><span>requests</span><span>.</span><span>length</span><span>).</span><span>toEqual</span><span>(</span><span>3</span><span>);</span><span>\r\n\r\n</span><span>// Respond to each </span><span>request</span><span> with different results</span><span>\r\nrequests</span><span>[</span><span>0</span><span>].</span><span>flush</span><span>([]);</span><span>\r\nrequests</span><span>[</span><span>1</span><span>].</span><span>flush</span><span>([</span><span>testData</span><span>[</span><span>0</span><span>]]);</span><span>\r\nrequests</span><span>[</span><span>2</span><span>].</span><span>flush</span><span>(</span><span>testData</span><span>);</span></code></pre>\r\n<h3>\r\n\tTesting for errors</h3>\r\n<p>\r\n\tYou should test the app&#39;s defenses against HTTP requests that fail.</p>\r\n<p>\r\n\tCall&nbsp;<code>request.flush()</code>&nbsp;with an error message, as seen in the following example.</p>\r\n<pre>\r\n<code><span>it</span><span>(</span><span>&#39;can test for 404 error&#39;</span><span>,</span><span> </span><span>()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>const</span><span> emsg </span><span>=</span><span> </span><span>&#39;deliberate 404 error&#39;</span><span>;</span><span>\r\n\r\n  httpClient</span><span>.</span><span>get</span><span>&lt;</span><span>Data</span><span>[]&gt;(</span><span>testUrl</span><span>).</span><span>subscribe</span><span>(</span><span>\r\n    data </span><span>=&gt;</span><span> fail</span><span>(</span><span>&#39;should have failed with the 404 error&#39;</span><span>),</span><span>\r\n    </span><span>(</span><span>error</span><span>:</span><span> </span><span>HttpErrorResponse</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n      expect</span><span>(</span><span>error</span><span>.</span><span>status</span><span>).</span><span>toEqual</span><span>(</span><span>404</span><span>,</span><span> </span><span>&#39;status&#39;</span><span>);</span><span>\r\n      expect</span><span>(</span><span>error</span><span>.</span><span>error</span><span>).</span><span>toEqual</span><span>(</span><span>emsg</span><span>,</span><span> </span><span>&#39;</span><span>message</span><span>&#39;</span><span>);</span><span>\r\n    </span><span>}</span><span>\r\n  </span><span>);</span><span>\r\n\r\n  </span><span>const</span><span> req </span><span>=</span><span> httpTestingController</span><span>.</span><span>expectOne</span><span>(</span><span>testUrl</span><span>);</span><span>\r\n\r\n  </span><span>// Respond with mock error</span><span>\r\n  req</span><span>.</span><span>flush</span><span>(</span><span>emsg</span><span>,</span><span> </span><span>{</span><span> status</span><span>:</span><span> </span><span>404</span><span>,</span><span> </span><span>statusText</span><span>:</span><span> </span><span>&#39;Not Found&#39;</span><span> </span><span>});</span><span>\r\n</span><span>});</span></code></pre>\r\n<p>\r\n\tAlternatively, you can call&nbsp;<code>request.error()</code>&nbsp;with an&nbsp;<code>ErrorEvent</code>.</p>\r\n<pre>\r\n<code><span>it</span><span>(</span><span>&#39;can test for network error&#39;</span><span>,</span><span> </span><span>()</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n  </span><span>const</span><span> emsg </span><span>=</span><span> </span><span>&#39;simulated network error&#39;</span><span>;</span><span>\r\n\r\n  httpClient</span><span>.</span><span>get</span><span>&lt;</span><span>Data</span><span>[]&gt;(</span><span>testUrl</span><span>).</span><span>subscribe</span><span>(</span><span>\r\n    data </span><span>=&gt;</span><span> fail</span><span>(</span><span>&#39;should have failed with the network error&#39;</span><span>),</span><span>\r\n    </span><span>(</span><span>error</span><span>:</span><span> </span><span>HttpErrorResponse</span><span>)</span><span> </span><span>=&gt;</span><span> </span><span>{</span><span>\r\n      expect</span><span>(</span><span>error</span><span>.</span><span>error</span><span>.</span><span>message</span><span>).</span><span>toEqual</span><span>(</span><span>emsg</span><span>,</span><span> </span><span>&#39;</span><span>message</span><span>&#39;</span><span>);</span><span>\r\n    </span><span>}</span><span>\r\n  </span><span>);</span><span>\r\n\r\n  </span><span>const</span><span> req </span><span>=</span><span> httpTestingController</span><span>.</span><span>expectOne</span><span>(</span><span>testUrl</span><span>);</span><span>\r\n\r\n  </span><span>// </span><a href=\"https://angular.io/\" target=\"_blank\"><span>Create</span></a><span> mock ErrorEvent, raised when something goes wrong at the network level.</span><span>\r\n  </span><span>// Connection timeout, DNS error, offline, etc</span><span>\r\n  </span><span>const</span><span> mockError </span><span>=</span><span> </span><span>new</span><span> </span><span>ErrorEvent</span><span>(</span><span>&#39;Network error&#39;</span><span>,</span><span> </span><span>{</span><span>\r\n    </span><span>message</span><span>:</span><span> emsg</span><span>,</span><span>\r\n  </span><span>});</span><span>\r\n\r\n  </span><span>// Respond with mock error</span><span>\r\n  req</span><span>.</span><span>error</span><span>(</span><span>mockError</span><span>);</span><span>\r\n</span><span>});</span></code></pre>"
          }
        },
        {
          "Component styles": {
            "content": "<p>\r\n\tAngular applications are styled with standard CSS. That means you can apply everything you know about CSS stylesheets, selectors, rules, and media queries directly to Angular applications.</p>\r\n<p>\r\n\tAdditionally, Angular can bundle&nbsp;<em>component styles</em>&nbsp;with components, enabling a more modular design than regular stylesheets.</p>\r\n<p>\r\n\tThis page describes how to load and apply these component styles.</p>\r\n<p>\r\n\tYou can run the&nbsp;<live-example><span><a href=\"https://angular.io/generated/live-examples/component-styles/stackblitz.html\" target=\"_blank\">live example</a><span>&nbsp;/&nbsp;<a href=\"https://angular.io/generated/zips/component-styles/component-styles.zip\" target=\"_blank\">download example</a></span></span></live-example>&nbsp;in Stackblitz and download the code from there.</p>\r\n<h2>\r\n\tUsing component styles</h2>\r\n<p>\r\n\tFor every Angular component you write, you may define not only an HTML template, but also the CSS styles that go with that template, specifying any selectors, rules, and media queries that you need.</p>\r\n<p>\r\n\tOne way to do this is to set the&nbsp;<code>styles</code>&nbsp;property in the component metadata. The&nbsp;<code>styles</code>&nbsp;property takes an array of strings that contain CSS code. Usually you give it one string, as in the following example:</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Component\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">Component</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">({</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  selector</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;app-root&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">template</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">`\r\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\r\n    &lt;app-hero-main [hero]=&quot;hero&quot;&gt;&lt;/app-hero-main&gt;\r\n  `</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  styles</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;h1 { font-weight: normal; }&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">]</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">export</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">class</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">HeroAppComponent</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">/* . . . */</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<h2>\r\n\tStyle scope</h2>\r\n<blockquote>\r\n\t<p>\r\n\t\tThe styles specified in&nbsp;<code>@<a href=\"https://angular.io/api/core/Component\" target=\"_blank\">Component</a></code>&nbsp;metadata&nbsp;<em>apply only within the template of that component</em>.</p>\r\n</blockquote>\r\n<p>\r\n\tThey are&nbsp;<em>not inherited</em>&nbsp;by any components nested within the template nor by any content projected into the component.</p>\r\n<p>\r\n\tIn this example, the&nbsp;<code>h1</code>&nbsp;style applies only to the&nbsp;<code>HeroAppComponent</code>, not to the nested&nbsp;<code>HeroMainComponent</code>&nbsp;nor to&nbsp;<code>&lt;h1&gt;</code>&nbsp;tags anywhere else in the application.</p>\r\n<p>\r\n\tThis scoping restriction is a&nbsp;<em>styling modularity feature</em>.</p>\r\n<ul>\r\n\t<li>\r\n\t\tYou can use the CSS class names and selectors that make the most sense in the context of each component.</li>\r\n</ul>\r\n<ul>\r\n\t<li>\r\n\t\tClass names and selectors are local to the component and don&#39;t collide with classes and selectors used elsewhere in the application.</li>\r\n</ul>\r\n<ul>\r\n\t<li>\r\n\t\tChanges to styles elsewhere in the application don&#39;t affect the component&#39;s styles.</li>\r\n</ul>\r\n<ul>\r\n\t<li>\r\n\t\tYou can co-locate the CSS code of each component with the TypeScript and HTML code of the component, which leads to a neat and tidy project structure.</li>\r\n</ul>\r\n<ul>\r\n\t<li>\r\n\t\tYou can change or remove component CSS code without searching through the whole application to find where else the code is used.</li>\r\n</ul>\r\n<h2>\r\n\tSpecial selectors</h2>\r\n<p>\r\n\tComponent styles have a few special&nbsp;<em>selectors</em>&nbsp;from the world of shadow DOM style scoping (described in the&nbsp;<a href=\"https://www.w3.org/TR/css-scoping-1\" target=\"_blank\">CSS Scoping Module Level 1</a>&nbsp;page on the&nbsp;<a href=\"https://www.w3.org/\" target=\"_blank\">W3C</a>&nbsp;site). The following sections describe these selectors.</p>\r\n<h3>\r\n\t:host</h3>\r\n<p>\r\n\tUse the&nbsp;<code>:host</code>&nbsp;pseudo-class selector to target styles in the element that&nbsp;<em>hosts</em>&nbsp;the component (as opposed to targeting elements&nbsp;<em>inside</em>&nbsp;the component&#39;s template).</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Directive#host\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">host</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  display</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> block</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  border</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">1px</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> solid black</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<code>:host</code>&nbsp;selector is the only way to target the host element. You can&#39;t reach the host element from inside the component with other selectors because it&#39;s not part of the component&#39;s own template. The host element is in a parent component&#39;s template.</p>\r\n<p>\r\n\tUse the&nbsp;<em>function form</em>&nbsp;to apply host styles conditionally by including another selector inside parentheses after&nbsp;<code>:host</code>.</p>\r\n<p>\r\n\tThe next example targets the host element again, but only when it also has the&nbsp;<code>active</code>&nbsp;CSS class.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Directive#host\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">host</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">active</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  border</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">-</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">width</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">3px</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<h3>\r\n\t:host-context</h3>\r\n<p>\r\n\tSometimes it&#39;s useful to apply styles based on some condition&nbsp;<em>outside</em>&nbsp;of a component&#39;s view. For example, a CSS theme class could be applied to the document&nbsp;<code>&lt;body&gt;</code>&nbsp;element, and you want to change how your component looks based on that.</p>\r\n<p>\r\n\tUse the&nbsp;<code>:host-context()</code>&nbsp;pseudo-class selector, which works just like the function form of&nbsp;<code>:<a href=\"https://angular.io/api/core/Directive#host\" target=\"_blank\">host</a>()</code>. The&nbsp;<code>:host-context()</code>&nbsp;selector looks for a CSS class in any ancestor of the component host element, up to the document root. The&nbsp;<code>:host-context()</code>&nbsp;selector is useful when combined with another selector.</p>\r\n<p>\r\n\tThe following example applies a&nbsp;<code>background-color</code>&nbsp;style to all&nbsp;<code>&lt;h2&gt;</code>&nbsp;elements&nbsp;<em>inside</em>&nbsp;the component, only if some ancestor element has the CSS class&nbsp;<code>theme-light</code>.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">host</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">-</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">context</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">theme</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">-</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">light</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> h2 </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  background</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">-</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">color</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">#eef;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<h3>\r\n\t(deprecated)&nbsp;<code>/deep/</code>,&nbsp;<code>&gt;&gt;&gt;</code>, and&nbsp;<code>::ng-deep</code></h3>\r\n<p>\r\n\tComponent styles normally apply only to the HTML in the component&#39;s own template.</p>\r\n<p>\r\n\tApplying the&nbsp;<code>::ng-deep</code>&nbsp;pseudo-class to any CSS rule completely disables view-encapsulation for that rule. Any style with&nbsp;<code>::ng-deep</code>&nbsp;applied becomes a global style. In order to scope the specified style to the current component and all its descendants, be sure to include the&nbsp;<code>:<a href=\"https://angular.io/api/core/Directive#host\" target=\"_blank\">host</a></code>&nbsp;selector before&nbsp;<code>::ng-deep</code>. If the&nbsp;<code>::ng-deep</code>&nbsp;combinator is used without the&nbsp;<code>:<a href=\"https://angular.io/api/core/Directive#host\" target=\"_blank\">host</a></code>&nbsp;pseudo-class selector, the style can bleed into other components.</p>\r\n<p>\r\n\tThe following example targets all&nbsp;<code>&lt;h3&gt;</code>&nbsp;elements, from the host element down through this component to all of its child elements in the DOM.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Directive#host\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">host</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">/</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">deep</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">/</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> h3 </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  font</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">-</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">style</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> italic</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<code>/deep/</code>&nbsp;combinator also has the aliases&nbsp;<code>&gt;&gt;&gt;</code>, and&nbsp;<code>::ng-deep</code>.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tUse&nbsp;<code>/deep/</code>,&nbsp;<code>&gt;&gt;&gt;</code>&nbsp;and&nbsp;<code>::ng-deep</code>&nbsp;only with&nbsp;<em>emulated</em>&nbsp;view encapsulation. Emulated is the default and most commonly used view encapsulation. For more information, see the&nbsp;<a href=\"https://angular.io/guide/component-styles#view-encapsulation\" target=\"_blank\">Controlling view encapsulation</a>&nbsp;section.</p>\r\n</blockquote>\r\n<blockquote>\r\n\t<p>\r\n\t\tThe shadow-piercing descendant combinator is deprecated and&nbsp;<a href=\"https://www.chromestatus.com/features/6750456638341120\" target=\"_blank\">support is being removed from major browsers</a>&nbsp;and tools. As such we plan to drop support in Angular (for all 3 of&nbsp;<code>/deep/</code>,&nbsp;<code>&gt;&gt;&gt;</code>&nbsp;and&nbsp;<code>::ng-deep</code>). Until then&nbsp;<code>::ng-deep</code>&nbsp;should be preferred for a broader compatibility with the tools.</p>\r\n</blockquote>\r\n<h2>\r\n\tLoading component styles</h2>\r\n<p>\r\n\tThere are several ways to add styles to a component:</p>\r\n<ul>\r\n\t<li>\r\n\t\tBy setting&nbsp;<code>styles</code>&nbsp;or&nbsp;<code>styleUrls</code>&nbsp;metadata.</li>\r\n\t<li>\r\n\t\tInline in the template HTML.</li>\r\n\t<li>\r\n\t\tWith CSS imports.</li>\r\n</ul>\r\n<p>\r\n\tThe scoping rules outlined earlier apply to each of these loading patterns.</p>\r\n<h3>\r\n\tStyles in component metadata</h3>\r\n<p>\r\n\tYou can add a&nbsp;<code>styles</code>&nbsp;array property to the&nbsp;<code>@<a href=\"https://angular.io/api/core/Component\" target=\"_blank\">Component</a></code>&nbsp;decorator.</p>\r\n<p>\r\n\tEach string in the array defines some CSS for this component.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Component\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">Component</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">({</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  selector</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;app-root&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">template</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">`\r\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\r\n    &lt;app-hero-main [hero]=&quot;hero&quot;&gt;&lt;/app-hero-main&gt;\r\n  `</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  styles</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;h1 { font-weight: normal; }&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">]</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">export</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">class</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">HeroAppComponent</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">/* . . . */</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tReminder: these styles apply&nbsp;<em>only to this component</em>. They are&nbsp;<em>not inherited</em>&nbsp;by any components nested within the template nor by any content projected into the component.</p>\r\n</blockquote>\r\n<p>\r\n\tThe Angular CLI command&nbsp;<code>ng generate component</code>&nbsp;defines an empty&nbsp;<code>styles</code>&nbsp;array when you create the component with the&nbsp;<code>--inline-style</code>&nbsp;flag.</p>\r\n<pre>\r\n<code><span>ng generate component hero</span><span>-</span><span>app </span><span>--</span><span>inline</span><span>-</span><span>style</span></code></pre>\r\n<h3>\r\n\tStyle files in component metadata</h3>\r\n<p>\r\n\tYou can load styles from external CSS files by adding a&nbsp;<code>styleUrls</code>&nbsp;property to a component&#39;s&nbsp;<code>@<a href=\"https://angular.io/api/core/Component\" target=\"_blank\">Component</a></code>&nbsp;decorator:</p>\r\n<p>\r\n\t<mat-tab-body><aio-code> </aio-code></mat-tab-body></p>\r\n<pre>\r\n<code><span>@</span><span>Component</span><span>({</span><span>\r\n  selector</span><span>:</span><span> </span><span>&#39;app-root&#39;</span><span>,</span><span>\r\n  </span><span>template</span><span>:</span><span> </span><span>`\r\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\r\n    &lt;app-hero-main [hero]=&quot;hero&quot;&gt;&lt;/app-hero-main&gt;\r\n  `</span><span>,</span><span>\r\n  </span><span>styleUrls</span><span>:</span><span> </span><span>[</span><span>&#39;./hero-app.component.css&#39;</span><span>]</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>HeroAppComponent</span><span> </span><span>{</span><span>\r\n</span><span>/* . . . */</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t&nbsp;</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tReminder: the styles in the style file apply&nbsp;<em>only to this component</em>. They are&nbsp;<em>not inherited</em>&nbsp;by any components nested within the template nor by any content projected into the component.</p>\r\n</blockquote>\r\n<blockquote>\r\n\t<p>\r\n\t\tYou can specify more than one styles file or even a combination of&nbsp;<code>styles</code>&nbsp;and&nbsp;<code><a href=\"https://angular.io/api/core/Component#styleUrls\" target=\"_blank\">styleUrls</a></code>.</p>\r\n</blockquote>\r\n<p>\r\n\tWhen you use the Angular CLI command&nbsp;<a href=\"https://angular.io/cli/generate\" target=\"_blank\"><code>ng generate component</code></a>&nbsp;without the&nbsp;<code>--inline-style</code>&nbsp;flag, it creates an empty styles file for you and references that file in the component&#39;s generated&nbsp;<code><a href=\"https://angular.io/api/core/Component#styleUrls\" target=\"_blank\">styleUrls</a></code>.</p>\r\n<pre>\r\n<code><span>ng generate component hero</span><span>-</span><span>app</span></code></pre>\r\n<h3>\r\n\tTemplate inline styles</h3>\r\n<p>\r\n\tYou can embed CSS styles directly into the HTML template by putting them inside&nbsp;<code>&lt;<a href=\"https://angular.io/api/animations/style\" target=\"_blank\">style</a>&gt;</code>&nbsp;tags.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Component\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">Component</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">({</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  selector</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;app-hero-controls&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">template</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">`\r\n    &lt;</span><a class=\"code-anchor\" href=\"https://angular.io/api/animations/style\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">style</span></a><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&gt;\r\n      button {\r\n        background-color: white;\r\n        border: 1px solid #777;\r\n      }\r\n    &lt;/</span><a class=\"code-anchor\" href=\"https://angular.io/api/animations/style\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">style</span></a><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&gt;\r\n    &lt;h3&gt;Controls&lt;/h3&gt;\r\n    &lt;button (click)=&quot;activate()&quot;&gt;Activate&lt;/button&gt;\r\n  `</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span></code></pre>\r\n<h3>\r\n\tTemplate link tags</h3>\r\n<p>\r\n\tYou can also write&nbsp;<code>&lt;link&gt;</code>&nbsp;tags into the component&#39;s HTML template.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Component\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">Component</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">({</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  selector</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;app-hero-team&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">template</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">`\r\n    &lt;!-- We must use a relative </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/SecurityContext#URL\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">URL</span></a><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\"> so that the AOT compiler can find the stylesheet --&gt;\r\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../assets/hero-team.component.css&quot;&gt;\r\n    &lt;h3&gt;Team&lt;/h3&gt;\r\n    &lt;ul&gt;\r\n      &lt;li *</span><a class=\"code-anchor\" href=\"https://angular.io/api/common/NgForOf\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">ngFor</span></a><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">=&quot;let member of hero.team&quot;&gt;\r\n        {{member}}\r\n      &lt;/li&gt;\r\n    &lt;/ul&gt;`</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span></code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tWhen building with the CLI, be sure to include the linked style file among the assets to be copied to the server as described in the&nbsp;<a href=\"https://github.com/angular/angular-cli/wiki/stories-asset-configuration\" target=\"_blank\">CLI wiki</a>.</p>\r\n\t<p>\r\n\t\tOnce included, the CLI will include the stylesheet, whether the link tag&#39;s href URL is relative to the application root or the component file.</p>\r\n</blockquote>\r\n<h3>\r\n\tCSS @imports</h3>\r\n<p>\r\n\tYou can also import CSS files into the CSS files using the standard CSS&nbsp;<code>@import</code>&nbsp;rule. For details, see&nbsp;<a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\" target=\"_blank\"><code>@import</code></a>&nbsp;on the&nbsp;<a href=\"https://developer.mozilla.org/\" target=\"_blank\">MDN</a>&nbsp;site.</p>\r\n<p>\r\n\tIn this case, the URL is relative to the CSS file into which you&#39;re importing.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">/* The AOT compiler needs the `./` to show that this is local */</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@import</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;./hero-details-box.css&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span></code></pre>\r\n<h3>\r\n\tExternal and global style files</h3>\r\n<p>\r\n\tWhen building with the CLI, you must configure the&nbsp;<code>angular.json</code>&nbsp;to include&nbsp;<em>all external assets</em>, including external style files.</p>\r\n<p>\r\n\tRegister&nbsp;global&nbsp;style files in the&nbsp;<code>styles</code>&nbsp;section which, by default, is pre-configured with the global&nbsp;<code>styles.css</code>&nbsp;file.</p>\r\n<p>\r\n\tSee the&nbsp;<a href=\"https://github.com/angular/angular-cli/wiki/stories-global-styles\" target=\"_blank\">CLI wiki</a>&nbsp;to learn more.</p>\r\n<h3>\r\n\tNon-CSS style files</h3>\r\n<p>\r\n\tIf you&#39;re building with the CLI, you can write style files in&nbsp;<a href=\"http://sass-lang.com/\" target=\"_blank\">sass</a>,&nbsp;<a href=\"http://lesscss.org/\" target=\"_blank\">less</a>, or&nbsp;<a href=\"http://stylus-lang.com/\" target=\"_blank\">stylus</a>&nbsp;and specify those files in the&nbsp;<code>@<a href=\"https://angular.io/api/core/Component#styleUrls\" target=\"_blank\">Component.styleUrls</a></code>&nbsp;metadata with the appropriate extensions (<code>.scss</code>,&nbsp;<code>.less</code>,&nbsp;<code>.styl</code>) as in the following example:</p>\r\n<pre>\r\n<code><span>@</span><a href=\"https://angular.io/api/core/Component\" target=\"_blank\"><span>Component</span></a><span>({</span><span>\r\n  selector</span><span>:</span><span> </span><span>&#39;app-root&#39;</span><span>,</span><span>\r\n  </span><a href=\"https://angular.io/api/core/Component#templateUrl\" target=\"_blank\"><span>templateUrl</span></a><span>:</span><span> </span><span>&#39;./app.component.html&#39;</span><span>,</span><span>\r\n  </span><a href=\"https://angular.io/api/core/Component#styleUrls\" target=\"_blank\"><span>styleUrls</span></a><span>:</span><span> </span><span>[</span><span>&#39;./app.component.scss&#39;</span><span>]</span><span>\r\n</span><span>})</span><span>\r\n</span><span>...</span></code></pre>\r\n<p>\r\n\tThe CLI build process runs the pertinent CSS preprocessor.</p>\r\n<p>\r\n\tWhen generating a component file with&nbsp;<code>ng generate component</code>, the CLI emits an empty CSS styles file (<code>.css</code>) by default. You can configure the CLI to default to your preferred CSS preprocessor as explained in the&nbsp;<a href=\"https://github.com/angular/angular-cli/wiki/stories-css-preprocessors\" target=\"_blank\">CLI wiki</a>.</p>\r\n<div>\r\n\t<p>\r\n\t\tStyle strings added to the&nbsp;<code>@<a href=\"https://angular.io/api/core/Component#styles\" target=\"_blank\">Component.styles</a></code>&nbsp;array&nbsp;<em>must be written in CSS</em>&nbsp;because the CLI cannot apply a preprocessor to inline styles.</p>\r\n</div>\r\n<h2>\r\n\tView encapsulation</h2>\r\n<p>\r\n\tAs discussed earlier, component CSS styles are encapsulated into the component&#39;s view and don&#39;t affect the rest of the application.</p>\r\n<p>\r\n\tTo control how this encapsulation happens on a&nbsp;<em>per component</em>&nbsp;basis, you can set the&nbsp;<em>view encapsulation mode</em>&nbsp;in the component metadata. Choose from the following modes:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>ShadowDom</code>&nbsp;view encapsulation uses the browser&#39;s native shadow DOM implementation (see&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\" target=\"_blank\">Shadow DOM</a>&nbsp;on the&nbsp;<a href=\"https://developer.mozilla.org/\" target=\"_blank\">MDN</a>&nbsp;site) to attach a shadow DOM to the component&#39;s host element, and then puts the component view inside that shadow DOM. The component&#39;s styles are included within the shadow DOM.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code><a href=\"https://angular.io/api/core/ViewEncapsulation#Native\" target=\"_blank\">Native</a></code>&nbsp;view encapsulation uses a now deprecated version of the browser&#39;s native shadow DOM implementation -&nbsp;<a href=\"https://hayato.io/2016/shadowdomv1/\" target=\"_blank\">learn about the changes</a>.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code><a href=\"https://angular.io/api/core/ViewEncapsulation#Emulated\" target=\"_blank\">Emulated</a></code>&nbsp;view encapsulation (the default) emulates the behavior of shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component&#39;s view. For details, see&nbsp;<a href=\"https://angular.io/guide/component-styles#inspect-generated-css\" target=\"_blank\">Inspecting generated CSS</a>&nbsp;below.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>None</code>&nbsp;means that Angular does no view encapsulation. Angular adds the CSS to the global styles. The scoping rules, isolations, and protections discussed earlier don&#39;t apply. This is essentially the same as pasting the component&#39;s styles into the HTML.</p>\r\n\t</li>\r\n</ul>\r\n<p>\r\n\tTo set the components encapsulation mode, use the&nbsp;<code>encapsulation</code>&nbsp;property in the component metadata:</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">// warning: few browsers support shadow DOM encapsulation at this </span><a class=\"code-anchor\" href=\"https://angular.io/\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"com\" style=\"line-height: 2.4rem; color: rgb(0, 102, 0);\">time</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\nencapsulation</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/ViewEncapsulation#Native\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">ViewEncapsulation</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">Native</span></a></code></pre>\r\n<p>\r\n\t<code><a href=\"https://angular.io/api/core/ViewEncapsulation#ShadowDom\" target=\"_blank\">ShadowDom</a></code>&nbsp;view encapsulation only works on browsers that have native support for shadow DOM (see&nbsp;<a href=\"https://caniuse.com/#feat=shadowdomv1\" target=\"_blank\">Shadow DOM v1</a>&nbsp;on the&nbsp;<a href=\"http://caniuse.com/\" target=\"_blank\">Can I use</a>&nbsp;site). The support is still limited, which is why&nbsp;<code><a href=\"https://angular.io/api/core/ViewEncapsulation#Emulated\" target=\"_blank\">Emulated</a></code>&nbsp;view encapsulation is the default mode and recommended in most cases.</p>\r\n<h2>\r\n\tInspecting generated CSS</h2>\r\n<p>\r\n\tWhen using emulated view encapsulation, Angular preprocesses all component styles so that they approximate the standard shadow CSS scoping rules.</p>\r\n<p>\r\n\tIn the DOM of a running Angular application with emulated view encapsulation enabled, each DOM element has some extra attributes attached to it:</p>\r\n<pre>\r\n<code><span>&lt;hero-details</span><span> _</span><span>nghost-pmm-5</span><span>&gt;</span><span>\r\n  </span><span>&lt;h2</span><span> _</span><span>ngcontent-pmm-5</span><span>&gt;</span><span>Mister Fantastic</span><span>&lt;/h2&gt;</span><span>\r\n  </span><span>&lt;hero-team</span><span> _</span><span>ngcontent-pmm-5</span><span> _</span><span>nghost-pmm-6</span><span>&gt;</span><span>\r\n    </span><span>&lt;h3</span><span> _</span><span>ngcontent-pmm-6</span><span>&gt;</span><span>Team</span><span>&lt;/h3&gt;</span><span>\r\n  </span><span>&lt;/hero-team&gt;</span><span>\r\n</span><span>&lt;/hero-detail&gt;</span></code></pre>\r\n<p>\r\n\tThere are two kinds of generated attributes:</p>\r\n<ul>\r\n\t<li>\r\n\t\tAn element that would be a shadow DOM host in native encapsulation has a generated&nbsp;<code>_nghost</code>&nbsp;attribute. This is typically the case for component host elements.</li>\r\n\t<li>\r\n\t\tAn element within a component&#39;s view has a&nbsp;<code>_ngcontent</code>&nbsp;attribute that identifies to which host&#39;s emulated shadow DOM this element belongs.</li>\r\n</ul>\r\n<p>\r\n\tThe exact values of these attributes aren&#39;t important. They are automatically generated and you never refer to them in application code. But they are targeted by the generated component styles, which are in the&nbsp;<code>&lt;head&gt;</code>&nbsp;section of the DOM:</p>\r\n<pre>\r\n<code><span>[</span><span>_nghost</span><span>-</span><span>pmm</span><span>-</span><span>5</span><span>]</span><span> </span><span>{</span><span>\r\n  display</span><span>:</span><span> block</span><span>;</span><span>\r\n  border</span><span>:</span><span> </span><span>1px</span><span> solid black</span><span>;</span><span>\r\n</span><span>}</span><span>\r\n\r\nh3</span><span>[</span><span>_ngcontent</span><span>-</span><span>pmm</span><span>-</span><span>6</span><span>]</span><span> </span><span>{</span><span>\r\n  background</span><span>-</span><span>color</span><span>:</span><span> white</span><span>;</span><span>\r\n  border</span><span>:</span><span> </span><span>1px</span><span> solid </span><span>#777;</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\tThese styles are post-processed so that each selector is augmented with&nbsp;<code>_nghost</code>&nbsp;or&nbsp;<code>_ngcontent</code>&nbsp;attribute selectors. These extra selectors enable the scoping rules described in this page.</p>"
          }
        },
        {
          "Dynamic component loader": {
            "content": "<p>\r\n\tComponent templates are not always fixed. An application may need to load new components at runtime.</p>\r\n<p>\r\n\tThis cookbook shows you how to use&nbsp;<code>ComponentFactoryResolver</code>&nbsp;to add components dynamically.</p>\r\n<p>\r\n\tSee the&nbsp;<live-example><span><a href=\"https://angular.io/generated/live-examples/dynamic-component-loader/stackblitz.html\" target=\"_blank\">live example</a><span>&nbsp;/&nbsp;<a href=\"https://angular.io/generated/zips/dynamic-component-loader/dynamic-component-loader.zip\" target=\"_blank\">download example</a></span></span></live-example>&nbsp;of the code in this cookbook.</p>\r\n<h2>\r\n\tDynamic component loading</h2>\r\n<p>\r\n\tThe following example shows how to build a dynamic ad banner.</p>\r\n<p>\r\n\tThe hero agency is planning an ad campaign with several different ads cycling through the banner. New ad components are added frequently by several different teams. This makes it impractical to use a template with a static component structure.</p>\r\n<p>\r\n\tInstead, you need a way to load a new component without a fixed reference to the component in the ad banner&#39;s template.</p>\r\n<p>\r\n\tAngular comes with its own API for loading components dynamically.</p>\r\n<h2>\r\n\tThe anchor directive</h2>\r\n<p>\r\n\tBefore you can add components you have to define an anchor point to tell Angular where to insert components.</p>\r\n<p>\r\n\tThe ad banner uses a helper directive called&nbsp;<code>AdDirective</code>&nbsp;to mark valid insertion points in the template.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">import</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Directive\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">Directive</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/ViewContainerRef\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">ViewContainerRef</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">from</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;@angular/core&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n</span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Directive\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">Directive</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">({</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  selector</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">&#39;[ad-host]&#39;</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">export</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">class</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AdDirective</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">constructor</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">public</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> viewContainerRef</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/ViewContainerRef\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">ViewContainerRef</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<p>\r\n\t<code>AdDirective</code>&nbsp;injects&nbsp;<code>ViewContainerRef</code>&nbsp;to gain access to the view container of the element that will host the dynamically added component.</p>\r\n<p>\r\n\tIn the&nbsp;<code>@Directive</code>&nbsp;decorator, notice the selector name,&nbsp;<code>ad-host</code>; that&#39;s what you use to apply the directive to the element. The next section shows you how.</p>\r\n<h2>\r\n\tLoading components</h2>\r\n<p>\r\n\tMost of the ad banner implementation is in&nbsp;<code>ad-banner.component.ts</code>. To keep things simple in this example, the HTML is in the&nbsp;<code>@Component</code>&nbsp;decorator&#39;s&nbsp;<code>template</code>&nbsp;property as a template string.</p>\r\n<p>\r\n\tThe&nbsp;<code>&lt;ng-template&gt;</code>&nbsp;element is where you apply the directive you just made. To apply the&nbsp;<code>AdDirective</code>, recall the selector from&nbsp;<code>ad.directive.ts</code>,&nbsp;<code>ad-host</code>. Apply that to&nbsp;<code>&lt;ng-template&gt;</code>&nbsp;without the square brackets. Now Angular knows where to dynamically load components.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">template</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"str\" style=\"line-height: 2.4rem; color: rgb(136, 0, 0);\">`\r\n            &lt;div class=&quot;ad-banner-example&quot;&gt;\r\n              &lt;h3&gt;Advertisements&lt;/h3&gt;\r\n              &lt;ng-template ad-host&gt;&lt;/ng-template&gt;\r\n            &lt;/div&gt;\r\n          `</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe&nbsp;<code>&lt;ng-template&gt;</code>&nbsp;element is a good choice for dynamic components because it doesn&#39;t render any additional output.</p>\r\n<h2>\r\n\tResolving components</h2>\r\n<p>\r\n\tTake a closer look at the methods in&nbsp;<code>ad-banner.component.ts</code>.</p>\r\n<p>\r\n\t<code>AdBannerComponent</code>&nbsp;takes an array of&nbsp;<code>AdItem</code>&nbsp;objects as input, which ultimately comes from&nbsp;<code>AdService</code>.&nbsp;<code>AdItem</code>&nbsp;objects specify the type of component to load and any data to bind to the component.<code>AdService</code>&nbsp;returns the actual ads making up the ad campaign.</p>\r\n<p>\r\n\tPassing an array of components to&nbsp;<code>AdBannerComponent</code>&nbsp;allows for a dynamic list of ads without static elements in the template.</p>\r\n<p>\r\n\tWith its&nbsp;<code>getAds()</code>&nbsp;method,&nbsp;<code>AdBannerComponent</code>&nbsp;cycles through the array of&nbsp;<code>AdItems</code>&nbsp;and loads a new component every 3 seconds by calling&nbsp;<code>loadComponent()</code>.</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">export</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">class</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AdBannerComponent</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">implements</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/OnInit\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">OnInit</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/OnDestroy\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">OnDestroy</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/Input\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">Input</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> ads</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AdItem</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[];</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  currentAdIndex </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">-</span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">1</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">@</span><a class=\"code-anchor\" href=\"https://angular.io/api/core/ViewChild\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">ViewChild</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AdDirective</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><a class=\"code-anchor\" href=\"https://angular.io/api/upgrade/static\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">static</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">true</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">})</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> adHost</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AdDirective</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  interval</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> any</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n  </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">constructor</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">private</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> componentFactoryResolver</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/ComponentFactoryResolver\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">ComponentFactoryResolver</span></a><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n  ngOnInit</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">loadComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">getAds</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n  ngOnDestroy</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    clearInterval</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">interval</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n  loadComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">currentAdIndex </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">currentAdIndex </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">+</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">1</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">%</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">ads</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">length</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">const</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> adItem </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">ads</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">currentAdIndex</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">];</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">const</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> componentFactory </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">componentFactoryResolver</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">resolveComponentFactory</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">adItem</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">component</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">const</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> viewContainerRef </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">adHost</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">viewContainerRef</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    viewContainerRef</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">clear</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">const</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><a class=\"code-anchor\" href=\"https://angular.io/api/core/testing/ComponentFixture#componentRef\" style=\"font-size: inherit; line-height: 2.4rem; font-weight: inherit; letter-spacing: 0.03rem; text-decoration-line: none; cursor: pointer;\"><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">componentRef</span></a><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> viewContainerRef</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">createComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">componentFactory</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(&lt;</span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">AdComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">&gt;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">componentRef</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">instance</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">).</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">data </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> adItem</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">data</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n\r\n  getAds</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">()</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">interval </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> setInterval</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">(()</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">=&gt;</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n      </span><span class=\"kwd\" style=\"line-height: 2.4rem; color: rgb(0, 0, 255);\">this</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">.</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">loadComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n    </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">},</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"lit\" style=\"line-height: 2.4rem; color: rgb(0, 136, 204);\">3000</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n  </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">\r\n</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">}</span></code></pre>\r\n<p>\r\n\tThe&nbsp;<code>loadComponent()</code>&nbsp;method is doing a lot of the heavy lifting here. Take it step by step. First, it picks an ad.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tHow&nbsp;<em>loadComponent()</em>&nbsp;chooses an ad</p>\r\n\t<p>\r\n\t\tThe&nbsp;<code>loadComponent()</code>&nbsp;method chooses an ad using some math.</p>\r\n\t<p>\r\n\t\tFirst, it sets the&nbsp;<code>currentAdIndex</code>&nbsp;by taking whatever it currently is plus one, dividing that by the length of the&nbsp;<code>AdItem</code>&nbsp;array, and using the&nbsp;<em>remainder</em>&nbsp;as the new&nbsp;<code>currentAdIndex</code>&nbsp;value. Then, it uses that value to select an&nbsp;<code>adItem</code>&nbsp;from the array.</p>\r\n</blockquote>\r\n<p>\r\n\tAfter&nbsp;<code>loadComponent()</code>&nbsp;selects an ad, it uses&nbsp;<code>ComponentFactoryResolver</code>&nbsp;to resolve a&nbsp;<code>ComponentFactory</code>&nbsp;for each specific component. The&nbsp;<code>ComponentFactory</code>&nbsp;then creates an instance of each component.</p>\r\n<p>\r\n\tNext, you&#39;re targeting the&nbsp;<code>viewContainerRef</code>&nbsp;that exists on this specific instance of the component. How do you know it&#39;s this specific instance? Because it&#39;s referring to&nbsp;<code>adHost</code>&nbsp;and&nbsp;<code>adHost</code>&nbsp;is the directive you set up earlier to tell Angular where to insert dynamic components.</p>\r\n<p>\r\n\tAs you may recall,&nbsp;<code>AdDirective</code>&nbsp;injects&nbsp;<code>ViewContainerRef</code>&nbsp;into its constructor. This is how the directive accesses the element that you want to use to host the dynamic component.</p>\r\n<p>\r\n\tTo add the component to the template, you call&nbsp;<code>createComponent()</code>&nbsp;on&nbsp;<code>ViewContainerRef</code>.</p>\r\n<p>\r\n\tThe&nbsp;<code>createComponent()</code>&nbsp;method returns a reference to the loaded component. Use that reference to interact with the component by assigning to its properties or calling its methods.</p>\r\n<h4>\r\n\tSelector references</h4>\r\n<p>\r\n\tGenerally, the Angular compiler generates a&nbsp;<code>ComponentFactory</code>&nbsp;for any component referenced in a template. However, there are no selector references in the templates for dynamically loaded components since they load at runtime.</p>\r\n<p>\r\n\tTo ensure that the compiler still generates a factory, add dynamically loaded components to the&nbsp;<code><a href=\"https://angular.io/api/core/NgModule\" target=\"_blank\">NgModule</a></code>&#39;s&nbsp;<code>entryComponents</code>&nbsp;array:</p>\r\n<pre class=\"lang- prettyprint\" style=\"display: flex; min-height: 32px; margin: 16px 24px; white-space: pre-wrap; -webkit-box-align: center; align-items: center; position: relative;\">\r\n<code class=\"animated fadeIn\" style=\"font-family: &quot;Droid Sans Mono&quot;, monospace; font-size: 12.6px; overflow: auto;\"><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\">entryComponents</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">:</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">[</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">HeroJobAdComponent</span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"line-height: 2.4rem; color: red;\">HeroProfileComponent</span><span class=\"pln\" style=\"line-height: 2.4rem; color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"line-height: 2.4rem; color: rgb(102, 102, 0);\">],</span></code></pre>\r\n<h2>\r\n\tThe&nbsp;<em>AdComponent</em>&nbsp;interface</h2>\r\n<p>\r\n\tIn the ad banner, all components implement a common&nbsp;<code>AdComponent</code>&nbsp;interface to standardize the API for passing data to the components.</p>\r\n<p>\r\n\tHere are two sample components and the&nbsp;<code>AdComponent</code>&nbsp;interface for reference:</p>\r\n<p>\r\n\t<mat-tab-body><aio-code>\r\n\t<pre>\r\n\t<code><span>import</span><span> </span><span>{</span><span> </span><span>Component</span><span>,</span><span> </span><span>Input</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>AdComponent</span><span> </span><span>}</span><span>      </span><span>from</span><span> </span><span>&#39;./ad.component&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><span>Component</span><span>({</span><span>\r\n  </span><span>template</span><span>:</span><span> </span><span>`\r\n    &lt;div class=&quot;job-ad&quot;&gt;\r\n      &lt;h4&gt;{{data.headline}}&lt;/h4&gt;\r\n\r\n      {{data.body}}\r\n    &lt;/div&gt;\r\n  `</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>HeroJobAdComponent</span><span> </span><span>implements</span><span> </span><span>AdComponent</span><span> </span><span>{</span><span>\r\n  </span><span>@</span><span>Input</span><span>()</span><span> data</span><span>:</span><span> any</span><span>;</span><span>\r\n\r\n</span><span>}</span></code></pre>\r\n\t</aio-code></mat-tab-body></p>\r\n<h2>\r\n\tFinal ad banner</h2>\r\n<p>\r\n\tThe final ad banner looks like this:</p>\r\n<div>\r\n\t<img alt=\"Ads\" height=\"222\" src=\"https://angular.io/generated/images/guide/dynamic-component-loader/ads-example.gif\" style=\"max-width: 100%; height: auto; padding: 8px; margin: auto; box-shadow: rgba(10, 16, 20, 0.24) 0px 2px 2px, rgba(10, 16, 20, 0.12) 0px 0px 2px; border-radius: 4px; background-color: rgb(255, 255, 255);\" width=\"480\" /></div>"
          }
        },
        {
          "Angular elements overview": {
            "content": "<p>\r\n\t<em>Angular elements</em>&nbsp;are Angular components packaged as&nbsp;<em>custom elements</em>&nbsp;(also called Web Components), a web standard for defining new HTML elements in a framework-agnostic way.</p>\r\n<p>\r\n\tCustom elements&nbsp;are a Web Platform feature currently supported by Chrome, Firefox, Opera, and Safari, and available in other browsers through polyfills (see&nbsp;<a href=\"https://angular.io/guide/elements#browser-support\" target=\"_blank\">Browser Support</a>). A custom element extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a&nbsp;<code>CustomElementRegistry</code>&nbsp;of defined custom elements, which maps an instantiable JavaScript class to an HTML tag.</p>\r\n<p>\r\n\tThe&nbsp;<code>@angular/elements</code>&nbsp;package exports a&nbsp;<code>createCustomElement()</code>&nbsp;API that provides a bridge from Angular&#39;s component interface and change detection functionality to the built-in DOM API.</p>\r\n<p>\r\n\tTransforming a component to a custom element makes all of the required Angular infrastructure available to the browser. Creating a custom element is simple and straightforward, and automatically connects your component-defined view with change detection and data binding, mapping Angular functionality to the corresponding native HTML equivalents.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tWe are working on custom elements that can be used by web apps built on other frameworks. A minimal, self-contained version of the Angular framework will be injected as a service to support the component&#39;s change-detection and data-binding functionality. For more about the direction of development, check out this&nbsp;<a href=\"https://www.youtube.com/watch?v=Z1gLFPLVJjY&amp;t=4s\" target=\"_blank\">video presentation</a>.</p>\r\n</blockquote>\r\n<h2>\r\n\tUsing custom elements</h2>\r\n<p>\r\n\tCustom elements bootstrap themselves - they start automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not require any special knowledge of Angular terms or usage conventions.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<b>Easy dynamic content in an Angular app</b></p>\r\n\t\t<p>\r\n\t\t\tTransforming a component to a custom element provides an easy path to creating dynamic HTML content in your Angular app. HTML content that you add directly to the DOM in an Angular app is normally displayed without Angular processing, unless you define a&nbsp;<em>dynamic component</em>, adding your own code to connect the HTML tag to your app data, and participate in change detection. With a custom element, all of that wiring is taken care of automatically.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<b>Content-rich applications</b></p>\r\n\t\t<p>\r\n\t\t\tIf you have a content-rich app, such as the Angular app that presents this documentation, custom elements let you give your content providers sophisticated Angular functionality without requiring knowledge of Angular. For example, an Angular guide like this one is added directly to the DOM by the Angular navigation tools, but can include special elements like&nbsp;<code>&lt;code-snippet&gt;</code>&nbsp;that perform complex operations. All you need to tell your content provider is the syntax of your custom element. They don&#39;t need to know anything about Angular, or anything about your component&#39;s data structures or implementation.</p>\r\n\t</li>\r\n</ul>\r\n<h3>\r\n\tHow it works</h3>\r\n<p>\r\n\tUse the&nbsp;<code>createCustomElement()</code>&nbsp;function to convert a component into a class that can be registered with the browser as a custom element. After you register your configured class with the browser&#39;s custom-element registry, you can use the new element just like a built-in HTML element in content that you add directly into the DOM:</p>\r\n<pre>\r\n<code><span>&lt;my-popup</span><span> </span><span>message</span><span>=</span><span>&quot;Use Angular!&quot;</span><span>&gt;&lt;/my-popup&gt;</span></code></pre>\r\n<p>\r\n\tWhen your custom element is placed on a page, the browser creates an instance of the registered class and adds it to the DOM. The content is provided by the component&#39;s template, which uses Angular template syntax, and is rendered using the component and DOM data. Input properties in the component correspond to input attributes for the element.</p>\r\n<p>\r\n\t[[ image(angular/components/customElement1.png, center) ]]</p>\r\n<hr />\r\n<h2>\r\n\tTransforming components to custom elements</h2>\r\n<p>\r\n\tAngular provides the&nbsp;<code>createCustomElement()</code>&nbsp;function for converting an Angular component, together with its dependencies, to a custom element. The function collects the component&#39;s observable properties, along with the Angular functionality the browser needs to create and destroy instances, and to detect and respond to changes.</p>\r\n<p>\r\n\tThe conversion process implements the&nbsp;<code>NgElementConstructor</code>&nbsp;interface, and creates a constructor class that is configured to produce a self-bootstrapping instance of your component.</p>\r\n<p>\r\n\tUse a JavaScript function,&nbsp;<code>customElements.define()</code>, to register the configured constructor and its associated custom-element tag with the browser&#39;s&nbsp;<code>CustomElementRegistry</code>. When the browser encounters the tag for the registered element, it uses the constructor to create a custom-element instance.</p>\r\n<div>\r\n\t[[ image(angular/components/createElement.png, center) ]]</div>\r\n<h3>\r\n\tMapping</h3>\r\n<p>\r\n\tA custom element&nbsp;<em>hosts</em>&nbsp;an Angular component, providing a bridge between the data and logic defined in the component and standard DOM APIs. Component properties and logic maps directly into HTML attributes and the browser&#39;s event system.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tThe creation API parses the component looking for input properties, and defines corresponding attributes for the custom element. It transforms the property names to make them compatible with custom elements, which do not recognize case distinctions. The resulting attribute names use dash-separated lowercase. For example, for a component with&nbsp;<code>@Input(&#39;myInputProp&#39;) inputProp</code>, the corresponding custom element defines an attribute&nbsp;<code>my-input-prop</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tComponent outputs are dispatched as HTML&nbsp;Custom Events, with the name of the custom event matching the output name. For example, for a component with&nbsp;<code>@Output() valueChanged = new&nbsp;EventEmitter()</code>, the corresponding custom element will dispatch events with the name &quot;valueChanged&quot;, and the emitted data will be stored on the event&rsquo;s&nbsp;<code>detail</code>&nbsp;property. If you provide an alias, that value is used; for example,&nbsp;<code>@Output(&#39;myClick&#39;) clicks = new&nbsp;EventEmitter&lt;string&gt;();</code>&nbsp;results in dispatch events with the name &quot;myClick&quot;.</p>\r\n\t</li>\r\n</ul>\r\n<p>\r\n\tFor more information, see Web Component documentation for&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events\" target=\"_blank\">Creating custom events</a>.</p>\r\n<h2>\r\n\tBrowser support for custom elements</h2>\r\n<p>\r\n\tThe recently-developed&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\" target=\"_blank\">custom elements</a>&nbsp;Web Platform feature is currently supported natively in a number of browsers. Support is pending or planned in other browsers.</p>\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<th>\r\n\t\t\t\tBrowser</th>\r\n\t\t\t<th>\r\n\t\t\t\tCustom Element Support</th>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tChrome</td>\r\n\t\t\t<td>\r\n\t\t\t\tSupported natively.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tOpera</td>\r\n\t\t\t<td>\r\n\t\t\t\tSupported natively.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tSafari</td>\r\n\t\t\t<td>\r\n\t\t\t\tSupported natively.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tFirefox</td>\r\n\t\t\t<td>\r\n\t\t\t\tSupported natively.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tEdge</td>\r\n\t\t\t<td>\r\n\t\t\t\tWorking on an implementation.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n<p>\r\n\tIn browsers that support Custom Elements natively, the specification requires developers use ES2015 classes to define Custom Elements - developers can opt-in to this by setting the&nbsp;<code>target: &quot;es2015&quot;</code>&nbsp;property in their project&#39;s&nbsp;<code>tsconfig.json</code>. As Custom Element and ES2015 support may not be available in all browsers, developers can instead choose to use a polyfill to support older browsers and ES5 code.</p>\r\n<p>\r\n\tUse the&nbsp;<a href=\"https://angular.io/cli\" target=\"_blank\">Angular CLI</a>&nbsp;to automatically set up your project with the correct polyfill:&nbsp;<code>ng add @angular/elements --name=*your_project_name*</code>.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tFor more information about polyfills, see&nbsp;<a href=\"https://www.webcomponents.org/polyfills\" target=\"_blank\">polyfill documentation</a>.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tFor more information about Angular browser support, see&nbsp;<a href=\"https://angular.io/guide/browser-support\" target=\"_blank\">Browser Support</a>.</p>\r\n\t</li>\r\n</ul>\r\n<h2>\r\n\tExample: A Popup Service</h2>\r\n<p>\r\n\tPreviously, when you wanted to add a component to an app at runtime, you had to define a&nbsp;<em>dynamic component</em>. The app module would have to list your dynamic component under&nbsp;<code>entryComponents</code>, so that the app wouldn&#39;t expect it to be present at startup, and then you would have to load it, attach it to an element in the DOM, and wire up all of the dependencies, change detection, and event handling, as described in&nbsp;Dynamic Component Loader.</p>\r\n<p>\r\n\tUsing an Angular custom element makes the process much simpler and more transparent, by providing all of the infrastructure and framework automatically&mdash;all you have to do is define the kind of event handling you want. (You do still have to exclude the component from compilation, if you are not going to use it in your app.)</p>\r\n<p>\r\n\tThe Popup Service example app (shown below) defines a component that you can either load dynamically or convert to a custom element.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<code>popup.component.ts</code>&nbsp;defines a simple pop-up element that displays an input message, with some animation and styling.</li>\r\n\t<li>\r\n\t\t<code>popup.service.ts</code>&nbsp;creates an injectable service that provides two different ways to invoke the PopupComponent; as a dynamic component, or as a custom element. Notice how much more setup is required for the dynamic-loading method.</li>\r\n\t<li>\r\n\t\t<code>app.module.ts</code>&nbsp;adds the PopupComponent in the module&#39;s&nbsp;<code>entryComponents</code>&nbsp;list, to exclude it from compilation and avoid startup warnings or errors.</li>\r\n\t<li>\r\n\t\t<code>app.component.ts</code>&nbsp;defines the app&#39;s root component, which uses the PopupService to add the pop-up to the DOM at run time. When the app runs, the root component&#39;s constructor converts PopupComponent to a custom element.</li>\r\n</ul>\r\n<p>\r\n\tFor comparison, the demo shows both methods. One button adds the popup using the dynamic-loading method, and the other uses the custom element. You can see that the result is the same; only the preparation is different.</p>\r\n<p>\r\n\t<mat-tab-body><aio-code> </aio-code></mat-tab-body></p>\r\n<pre>\r\n<code><span>import</span><span> </span><span>{</span><span> </span><span>Component</span><span>,</span><span> </span><span>EventEmitter</span><span>,</span><span> </span><span>Input</span><span>,</span><span> </span><span>Output</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/core&#39;</span><span>;</span><span>\r\n</span><span>import</span><span> </span><span>{</span><span> </span><span>animate</span><span>,</span><span> </span><span>state</span><span>,</span><span> </span><span>style</span><span>,</span><span> </span><span>transition</span><span>,</span><span> </span><span>trigger</span><span> </span><span>}</span><span> </span><span>from</span><span> </span><span>&#39;@angular/animations&#39;</span><span>;</span><span>\r\n\r\n</span><span>@</span><a href=\"https://angular.io/api/core/Component\" target=\"_blank\"><span>Component</span></a><span>({</span><span>\r\n  selector</span><span>:</span><span> </span><span>&#39;my-popup&#39;</span><span>,</span><span>\r\n  </span><span>template</span><span>:</span><span> </span><span>`\r\n    &lt;span&gt;Popup: {{</span><a href=\"https://angular.io/api/common/http/HttpErrorResponse#message\" target=\"_blank\"><span>message</span></a><span>}}&lt;/span&gt;\r\n    &lt;button (click)=&quot;closed.next()&quot;&gt;&amp;#x2716;&lt;/button&gt;\r\n  `</span><span>,</span><span>\r\n  </span><span>host</span><span>:</span><span> </span><span>{</span><span>\r\n    </span><span>&#39;[@</span><span>state</span><span>]&#39;</span><span>:</span><span> </span><span>&#39;</span><span>state</span><span>&#39;</span><span>,</span><span>\r\n  </span><span>},</span><span>\r\n  animations</span><span>:</span><span> </span><span>[</span><span>\r\n    </span><span>trigger</span><span>(</span><span>&#39;</span><span>state</span><span>&#39;</span><span>,</span><span> </span><span>[</span><span>\r\n      </span><span>state</span><span>(</span><span>&#39;opened&#39;</span><span>,</span><span> </span><span>style</span><span>({</span><span>transform</span><span>:</span><span> </span><span>&#39;translateY(0%)&#39;</span><span>})),</span><span>\r\n      </span><span>state</span><span>(</span><span>&#39;void, closed&#39;</span><span>,</span><span> </span><span>style</span><span>({</span><span>transform</span><span>:</span><span> </span><span>&#39;translateY(100%)&#39;</span><span>,</span><span> opacity</span><span>:</span><span> </span><span>0</span><span>})),</span><span>\r\n      </span><span>transition</span><span>(</span><span>&#39;* =&gt; *&#39;</span><span>,</span><span> </span><span>animate</span><span>(</span><span>&#39;100ms ease-in&#39;</span><span>)),</span><span>\r\n    </span><span>])</span><span>\r\n  </span><span>],</span><span>\r\n  styles</span><span>:</span><span> </span><span>[</span><span>`\r\n    :</span><span>host</span><span> {\r\n      </span><span>position</span><span>: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      right: 0;\r\n      background: #009cff;\r\n      height: 48px;\r\n      padding: 16px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      border-top: 1px solid black;\r\n      font-size: 24px;\r\n    }\r\n\r\n    button {\r\n      border-radius: 50%;\r\n    }\r\n  `</span><span>]</span><span>\r\n</span><span>})</span><span>\r\n</span><span>export</span><span> </span><span>class</span><span> </span><span>PopupComponent</span><span> </span><span>{</span><span>\r\n  </span><span>private</span><span> </span><span>state</span><span>:</span><span> </span><span>&#39;opened&#39;</span><span> </span><span>|</span><span> </span><span>&#39;closed&#39;</span><span> </span><span>=</span><span> </span><span>&#39;closed&#39;</span><span>;</span><span>\r\n\r\n  </span><span>@</span><span>Input</span><span>()</span><span>\r\n  </span><span>set</span><span> </span><span>message</span><span>(</span><span>message</span><span>:</span><span> </span><span>string</span><span>)</span><span> </span><span>{</span><span>\r\n    </span><span>this</span><span>.</span><span>_message </span><span>=</span><span> </span><span>message</span><span>;</span><span>\r\n    </span><span>this</span><span>.</span><span>state </span><span>=</span><span> </span><span>&#39;opened&#39;</span><span>;</span><span>\r\n  </span><span>}</span><span>\r\n  </span><span>get</span><span> </span><span>message</span><span>():</span><span> </span><span>string</span><span> </span><span>{</span><span> </span><span>return</span><span> </span><span>this</span><span>.</span><span>_message</span><span>;</span><span> </span><span>}</span><span>\r\n  _message</span><span>:</span><span> </span><span>string</span><span>;</span><span>\r\n\r\n  </span><span>@</span><span>Output</span><span>()</span><span>\r\n  closed </span><span>=</span><span> </span><span>new</span><span> </span><span>EventEmitter</span><span>();</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t<mat-tab-body></mat-tab-body></p>\r\n<div>\r\n\tYou can download the full code for the example&nbsp;<live-example><a href=\"https://angular.io/generated/zips/elements/elements.zip\" target=\"_blank\">here</a></live-example>.</div>\r\n<h2>\r\n\tTypings for custom elements</h2>\r\n<p>\r\n\tGeneric DOM APIs, such as&nbsp;<code>document.createElement()</code>&nbsp;or&nbsp;<code>document.querySelector()</code>, return an element type that is appropriate for the specified arguments. For example, calling&nbsp;<code>document.createElement(&#39;a&#39;)</code>&nbsp;will return an&nbsp;<code>HTMLAnchorElement</code>, which TypeScript knows has an&nbsp;<code>href</code>&nbsp;property. Similarly,&nbsp;<code>document.createElement(&#39;div&#39;)</code>&nbsp;will return an&nbsp;<code>HTMLDivElement</code>, which TypeScript knows has no&nbsp;<code>href</code>&nbsp;property.</p>\r\n<p>\r\n\tWhen called with unknown elements, such as a custom element name (<code>popup-element</code>&nbsp;in our example), the methods will return a generic type, such as&nbsp;<code>HTMLElement</code>, since TypeScript can&#39;t infer the correct type of the returned element.</p>\r\n<p>\r\n\tCustom elements created with Angular extend&nbsp;<code>NgElement</code>&nbsp;(which in turn extends&nbsp;<code>HTMLElement</code>). Additionally, these custom elements will have a property for each input of the corresponding component. For example, our&nbsp;<code>popup-element</code>&nbsp;will have a&nbsp;<code><a href=\"https://angular.io/api/common/http/HttpErrorResponse#message\" target=\"_blank\">message</a></code>&nbsp;property of type&nbsp;<code>string</code>.</p>\r\n<p>\r\n\tThere are a few options if you want to get correct types for your custom elements. Let&#39;s assume you create a&nbsp;<code>my-dialog</code>&nbsp;custom element based on the following component:</p>\r\n<pre>\r\n<code><span>@</span><span>Component</span><span>(...)</span><span>\r\n</span><span>class</span><span> </span><span>MyDialog</span><span> </span><span>{</span><span>\r\n  </span><span>@</span><span>Input</span><span>()</span><span> content</span><span>:</span><span> string</span><span>;</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t<code-tabs><mat-card><mat-tab-group></mat-tab-group></mat-card></code-tabs><code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tThe most straight forward way to get accurate typings is to cast the return value of the relevant DOM methods to the correct type. For that, you can use the&nbsp;<code>NgElement</code>&nbsp;and&nbsp;<code>WithProperties</code>&nbsp;types (both exported from&nbsp;<code>@angular/elements</code>):</p>\r\n<pre>\r\n<code><span>const</span><span> aDialog </span><span>=</span><span> document</span><span>.</span><span>createElement</span><span>(</span><span>&#39;my-dialog&#39;</span><span>)</span><span> as </span><span>NgElement</span><span> </span><span>&amp;</span><span> </span><span>WithProperties</span><span>&lt;{</span><span>content</span><span>:</span><span> string</span><span>}&gt;;</span><span>\r\naDialog</span><span>.</span><span>content </span><span>=</span><span> </span><span>&#39;Hello, world!&#39;</span><span>;</span><span>\r\naDialog</span><span>.</span><span>content </span><span>=</span><span> </span><span>123</span><span>;</span><span>  </span><span>// &lt;-- ERROR: TypeScript knows this should be a string.</span><span>\r\naDialog</span><span>.</span><span>body </span><span>=</span><span> </span><span>&#39;News&#39;</span><span>;</span><span>  </span><span>// &lt;-- ERROR: TypeScript knows there is no `body` property on `aDialog`.</span></code></pre>\r\n<p>\r\n\tThis is a good way to quickly get TypeScript features, such as type checking and autocomplete support, for you custom element. But it can get cumbersome if you need it in several places, because you have to cast the return type on every occurrence.</p>\r\n<p>\r\n\tAn alternative way, that only requires defining each custom element&#39;s type once, is augmenting the&nbsp;<code>HTMLElementTagNameMap</code>, which TypeScript uses to infer the type of a returned element based on its tag name (for DOM methods such as&nbsp;<code>document.createElement()</code>,&nbsp;<code>document.querySelector()</code>, etc.):</p>\r\n<pre>\r\n<code><span>declare </span><span>global</span><span> </span><span>{</span><span>\r\n  </span><span>interface</span><span> </span><span>HTMLElementTagNameMap</span><span> </span><span>{</span><span>\r\n    </span><span>&#39;my-dialog&#39;</span><span>:</span><span> </span><span>NgElement</span><span> </span><span>&amp;</span><span> </span><span>WithProperties</span><span>&lt;{</span><span>content</span><span>:</span><span> string</span><span>}&gt;;</span><span>\r\n    </span><span>&#39;my-other-element&#39;</span><span>:</span><span> </span><span>NgElement</span><span> </span><span>&amp;</span><span> </span><span>WithProperties</span><span>&lt;{</span><span>foo</span><span>:</span><span> </span><span>&#39;bar&#39;</span><span>}&gt;;</span><span>\r\n    </span><span>...</span><span>\r\n  </span><span>}</span><span>\r\n</span><span>}</span></code></pre>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<p>\r\n\tNow, TypeScript can infer the correct type the same way it does for built-in elements:</p>\r\n<p>\r\n\t<code-example><aio-code></aio-code></code-example></p>\r\n<pre>\r\n<code><span>document</span><span>.</span><span>createElement</span><span>(</span><span>&#39;div&#39;</span><span>)</span><span>               </span><span>//--&gt; HTMLDivElement (built-in element)</span><span>\r\ndocument</span><span>.</span><span>querySelector</span><span>(</span><span>&#39;foo&#39;</span><span>)</span><span>               </span><span>//--&gt; Element        (unknown element)</span><span>\r\ndocument</span><span>.</span><span>createElement</span><span>(</span><span>&#39;my-dialog&#39;</span><span>)</span><span>         </span><span>//--&gt; </span><span>NgElement</span><span> &amp; </span><span>WithProperties</span><span>&lt;{content: string}&gt; (custom element)</span><span>\r\ndocument</span><span>.</span><span>querySelector</span><span>(</span><span>&#39;my-other-element&#39;</span><span>)</span><span>  </span><span>//--&gt; </span><span>NgElement</span><span> &amp; </span><span>WithProperties</span><span>&lt;{foo: &#39;bar&#39;}&gt;      (custom element)</span></code></pre>"
          }
        }
      ]
    }
  }
]