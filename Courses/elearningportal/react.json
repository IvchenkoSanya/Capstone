[
  {
    "query": "react-installation",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "React Installation",
      "lessons": [
        {
          "title": "Components and Props",
          "topics": []
        },
        {
          "title": "State and Lifecycle",
          "topics": []
        },
        {
          "title": "Handling Events",
          "topics": []
        },
        {
          "title": "Conditional Rendering",
          "topics": []
        },
        {
          "title": "Lists and Keys",
          "topics": []
        },
        {
          "title": "Forms",
          "topics": []
        }
      ],
      "content": [
        {
          "Components and Props": {
            "content": "<p>\r\n\tComponents let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a [[ link | react-api-reference-react-api ]]detailed component API reference here[[ endl ]].</p>\r\n<p>\r\n\tConceptually, components are like JavaScript functions. They accept arbitrary inputs (called &ldquo;props&rdquo;) and return React elements describing what should appear on the screen.</p>\r\n<h2>\r\n\tFunction and Class Components</h2>\r\n<p>\r\n\tThe simplest way to define a component is to write a JavaScript function:</p>\r\n<pre>\r\n<code>function Welcome(props) {\r\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\r\n}</code></pre>\r\n<p>\r\n\tThis function is a valid React component because it accepts a single &ldquo;props&rdquo; (which stands for properties) object argument with data and returns a React element. We call such components &ldquo;function components&rdquo; because they are literally JavaScript functions.</p>\r\n<p>\r\n\tYou can also use an [[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes]]ES6[[ endl ]] class to define a component:</p>\r\n<pre>\r\n<code>class Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tThe above two components are equivalent from React&rsquo;s point of view.</p>\r\n<p>\r\n\tClasses have some additional features that we will discuss in the [[ link | react-main-concepts-state-and-lifecycle ]]next sections[[ endl ]]. Until then, we will use function components for their conciseness.</p>\r\n<h2>\r\n\tRendering a Component</h2>\r\n<p>\r\n\tPreviously, we only encountered React elements that represent DOM tags:</p>\r\n<pre>\r\n<code>const element = &lt;div /&gt;;</code></pre>\r\n<p>\r\n\tHowever, elements can also represent user-defined components:</p>\r\n<pre>\r\n<code>const element = &lt;Welcome name=&quot;Sara&quot; /&gt;;</code></pre>\r\n<p>\r\n\tWhen React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object. We call this object &ldquo;props&rdquo;.</p>\r\n<p>\r\n\tFor example, this code renders &ldquo;Hello, Sara&rdquo; on the page:</p>\r\n<pre>\r\n<code>function Welcome(props) {\r\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\r\n}\r\n\r\nconst element = &lt;Welcome name=&quot;Sara&quot; /&gt;;\r\nReactDOM.render(\r\n  element,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://reactjs.org/redirect-to-codepen/components-and-props/rendering-a-component]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tLet&rsquo;s recap what happens in this example:</p>\r\n<ol>\r\n\t<li>\r\n\t\tWe call <code>ReactDOM.render()</code> with the <code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code> element.</li>\r\n\t<li>\r\n\t\tReact calls the <code>Welcome</code> component with <code>{name: &#39;Sara&#39;}</code> as the props.</li>\r\n\t<li>\r\n\t\tOur <code>Welcome</code> component returns a <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code> element as the result.</li>\r\n\t<li>\r\n\t\tReact DOM efficiently updates the DOM to match <code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code>.</li>\r\n</ol>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote: Always start component names with a capital letter.</p>\r\n\t<p>\r\n\t\tReact treats components starting with lowercase letters as DOM tags. For example, <code>&lt;div /&gt;</code> represents an HTML div tag, but <code>&lt;Welcome /&gt;</code> represents a component and requires <code>Welcome</code> to be in scope.</p>\r\n\t<p>\r\n\t\tYou can read more about the reasoning behind this convention [[ link | react-advanced-guides-jsx-in-depth ]]here[[ endl ]].</p>\r\n</blockquote>\r\n<h2>\r\n\tComposing Components</h2>\r\n<p>\r\n\tComponents can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.</p>\r\n<p>\r\n\tFor example, we can create an <code>App</code> component that renders <code>Welcome</code> many times:</p>\r\n<pre>\r\n<code>function Welcome(props) {\r\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Welcome name=&quot;Sara&quot; /&gt;\r\n      &lt;Welcome name=&quot;Cahal&quot; /&gt;\r\n      &lt;Welcome name=&quot;Edite&quot; /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;App /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://reactjs.org/redirect-to-codepen/components-and-props/composing-components]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tTypically, new React apps have a single <code>App</code> component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like <code>Button</code> and gradually work your way to the top of the view hierarchy.</p>\r\n<h2>\r\n\tExtracting Components</h2>\r\n<p>\r\n\tDon&rsquo;t be afraid to split components into smaller components.</p>\r\n<p>\r\n\tFor example, consider this <code>Comment</code> component:</p>\r\n<pre>\r\n<code>function Comment(props) {\r\n  return (\r\n    &lt;div className=&quot;Comment&quot;&gt;\r\n      &lt;div className=&quot;UserInfo&quot;&gt;\r\n        &lt;img className=&quot;Avatar&quot;\r\n          src={props.author.avatarUrl}\r\n          alt={props.author.name}\r\n        /&gt;\r\n        &lt;div className=&quot;UserInfo-name&quot;&gt;\r\n          {props.author.name}\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n      &lt;div className=&quot;Comment-text&quot;&gt;\r\n        {props.text}\r\n      &lt;/div&gt;\r\n      &lt;div className=&quot;Comment-date&quot;&gt;\r\n        {formatDate(props.date)}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\t[[ go | https://reactjs.org/redirect-to-codepen/components-and-props/extracting-components]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tIt accepts <code>author</code> (an object), <code>text</code> (a string), and <code>date</code> (a date) as props, and describes a comment on a social media website.</p>\r\n<p>\r\n\tThis component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let&rsquo;s extract a few components from it.</p>\r\n<p>\r\n\tFirst, we will extract <code>Avatar</code>:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>function Avatar(props) {\r\n  return (\r\n    &lt;img className=&quot;Avatar&quot;\r\n      src={props.user.avatarUrl}\r\n      alt={props.user.name}\r\n    /&gt;\r\n  );\r\n}</code></pre>\r\n\t<p>\r\n\t\tThe <code>Avatar</code> doesn&rsquo;t need to know that it is being rendered inside a <code>Comment</code>. This is why we have given its prop a more generic name: <code>user</code> rather than <code>author</code>.</p>\r\n\t<p>\r\n\t\tWe recommend naming props from the component&rsquo;s own point of view rather than the context in which it is being used.</p>\r\n\t<p>\r\n\t\tWe can now simplify <code>Comment</code> a tiny bit:</p>\r\n\t<pre>\r\n\t<code>function Comment(props) {\r\n  return (\r\n    &lt;div className=&quot;Comment&quot;&gt;\r\n      &lt;div className=&quot;UserInfo&quot;&gt;\r\n        &lt;Avatar user={props.author} /&gt;\r\n        &lt;div className=&quot;UserInfo-name&quot;&gt;\r\n          {props.author.name}\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n      &lt;div className=&quot;Comment-text&quot;&gt;\r\n        {props.text}\r\n      &lt;/div&gt;\r\n      &lt;div className=&quot;Comment-date&quot;&gt;\r\n        {formatDate(props.date)}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n\t<p>\r\n\t\tNext, we will extract a <code>UserInfo</code> component that renders an <code>Avatar</code> next to the user&rsquo;s name:</p>\r\n\t<pre>\r\n\t<code>function UserInfo(props) {\r\n  return (\r\n    &lt;div className=&quot;UserInfo&quot;&gt;\r\n      &lt;Avatar user={props.user} /&gt;\r\n      &lt;div className=&quot;UserInfo-name&quot;&gt;\r\n        {props.user.name}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n\t<p>\r\n\t\tThis lets us simplify <code>Comment</code> even further:</p>\r\n\t<pre>\r\n\t<code>function Comment(props) {\r\n  return (\r\n    &lt;div className=&quot;Comment&quot;&gt;\r\n      &lt;UserInfo user={props.author} /&gt;\r\n      &lt;div className=&quot;Comment-text&quot;&gt;\r\n        {props.text}\r\n      &lt;/div&gt;\r\n      &lt;div className=&quot;Comment-date&quot;&gt;\r\n        {formatDate(props.date)}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n\t<p>\r\n\t\t[[ go | https://reactjs.org/redirect-to-codepen/components-and-props/extracting-components-continued]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n\t<p>\r\n\t\tExtracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (<code>Button</code>, <code>Panel</code>, <code>Avatar</code>), or is complex enough on its own (<code>App</code>, <code>FeedStory</code>, <code>Comment</code>), it is a good candidate to be a reusable component.</p>\r\n\t<h2>\r\n\t\tProps are Read-Only</h2>\r\n\t<p>\r\n\t\tWhether you declare a component as a function or a class, it must never modify its own props. Consider this <code>sum</code> function:</p>\r\n\t<div>\r\n\t\t<pre>\r\n\t\t<code>function sum(a, b) {\r\n  return a + b;\r\n}</code></pre>\r\n\t</div>\r\n\t<p>\r\n\t\tSuch functions are called&nbsp;[[ go | https://en.wikipedia.org/wiki/Pure_function]]&ldquo;pure&rdquo;[[ endl ]] because they do not attempt to change their inputs, and always return the same result for the same inputs.</p>\r\n\t<p>\r\n\t\tIn contrast, this function is impure because it changes its own input:</p>\r\n\t<pre>\r\n\t<code>function withdraw(account, amount) {\r\n  account.total -= amount;\r\n}</code></pre>\r\n\t<p>\r\n\t\tReact is pretty flexible but it has a single strict rule:</p>\r\n\t<p>\r\n\t\tAll React components must act like pure functions with respect to their props.</p>\r\n</div>"
          }
        },
        {
          "State and Lifecycle": {
            "content": "<p>\r\n\tThis page introduces the concept of state and lifecycle in a React component. You can find a [[ link | react-api-reference-react-api]]detailed component API reference here[[ endl ]].</p>\r\n<p>\r\n\tWe call <code>ReactDOM.render()</code> to change the rendered output:</p>\r\n<pre>\r\n<code>function tick() {\r\n  const element = (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n      &lt;h2&gt;It is {new Date().toLocaleTimeString()}.&lt;/h2&gt;\r\n    &lt;/div&gt;\r\n  );\r\n  ReactDOM.render(\r\n    element,\r\n    document.getElementById(&#39;root&#39;)\r\n  );\r\n}\r\n\r\nsetInterval(tick, 1000);</code></pre>\r\n<p>\r\n\t[[ link | http://codepen.io/gaearon/pen/gwoJZk?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tIn this section, we will learn how to make the <code>Clock</code> component truly reusable and encapsulated. It will set up its own timer and update itself every second.</p>\r\n<p>\r\n\tWe can start by encapsulating how the clock looks:</p>\r\n<pre>\r\n<code>function Clock(props) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n      &lt;h2&gt;It is {props.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction tick() {\r\n  ReactDOM.render(\r\n    &lt;Clock date={new Date()} /&gt;,\r\n    document.getElementById(&#39;root&#39;)\r\n  );\r\n}\r\n\r\nsetInterval(tick, 1000);</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/dpdoYR?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tHowever, it misses a crucial requirement: the fact that the <code>Clock</code> sets up a timer and updates the UI every second should be an implementation detail of the <code>Clock</code>.</p>\r\n<p>\r\n\tIdeally we want to write this once and have the <code>Clock</code> update itself:</p>\r\n<pre>\r\n<code>ReactDOM.render(\r\n  &lt;Clock /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\tTo implement this, we need to add &ldquo;state&rdquo; to the <code>Clock</code> component.</p>\r\n<p>\r\n\tState is similar to props, but it is private and fully controlled by the component.</p>\r\n<p>\r\n\tWe mentioned before that components defined as classes have some additional features. Local state is exactly that: a feature available only to classes.</p>\r\n<h2>\r\n\tConverting a Function to a Class</h2>\r\n<p>\r\n\tYou can convert a function component like <code>Clock</code> to a class in five steps:</p>\r\n<ol>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tCreate an&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes]]ES6 class[[ endl ]], with the same name, that extends <code>React.Component</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tAdd a single empty method to it called <code>render()</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tMove the body of the function into the <code>render()</code> method.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tReplace <code>props</code> with <code>this.props</code> in the <code>render()</code> body.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tDelete the remaining empty function declaration.</p>\r\n\t</li>\r\n</ol>\r\n<pre>\r\n<code>class Clock extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n        &lt;h2&gt;It is {this.props.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/zKRGpo?editors=0010]]Try it on CodePen[[ endl ]]</p>\r\n<p>\r\n\t<code>Clock</code> is now defined as a class rather than a function.</p>\r\n<p>\r\n\tThe <code>render</code> method will be called each time an update happens, but as long as we render <code>&lt;Clock /&gt;</code> into the same DOM node, only a single instance of the <code>Clock</code> class will be used. This lets us use additional features such as local state and lifecycle methods.</p>\r\n<h2>\r\n\tAdding Local State to a Class</h2>\r\n<p>\r\n\tWe will move the <code>date</code> from props to state in three steps:</p>\r\n<ol>\r\n\t<li>\r\n\t\tReplace <code>this.props.date</code> with <code>this.state.date</code> in the <code>render()</code> method:</li>\r\n</ol>\r\n<pre>\r\n<code>class Clock extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<ol>\r\n\t<li>\r\n\t\tAdd a&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor]]class constructor&nbsp;[[ endl ]]&nbsp;that assigns the initial <code>this.state</code>:</li>\r\n</ol>\r\n<pre>\r\n<code>class Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tNote how we pass <code>props</code> to the base constructor:</p>\r\n<pre>\r\n<code>  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }</code></pre>\r\n<p>\r\n\tClass components should always call the base constructor with <code>props</code>.</p>\r\n<ol>\r\n\t<li>\r\n\t\tRemove the <code>date</code> prop from the <code>&lt;Clock /&gt;</code> element:</li>\r\n</ol>\r\n<pre>\r\n<code>ReactDOM.render(\r\n  &lt;Clock /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\tWe will later add the timer code back to the component itself.</p>\r\n<p>\r\n\tThe result looks like this:</p>\r\n<pre>\r\n<code>class Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;Clock /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/KgQpJd?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tNext, we&rsquo;ll make the <code>Clock</code> set up its own timer and update itself every second.</p>\r\n<h2>\r\n\tAdding Lifecycle Methods to a Class</h2>\r\n<p>\r\n\tIn applications with many components, it&rsquo;s very important to free up resources taken by the components when they are destroyed.</p>\r\n<p>\r\n\tWe want to&nbsp;[[ go | https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setIntervalmset]]set up a timer[[ endl ]] whenever the <code>Clock</code> is rendered to the DOM for the first time. This is called &ldquo;mounting&rdquo; in React.</p>\r\n<p>\r\n\tWe also want to [[ go | https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval ]]clear that timer[[ endl ]] whenever the DOM produced by the <code>Clock</code> is removed. This is called &ldquo;unmounting&rdquo; in React.</p>\r\n<p>\r\n\tWe can declare special methods on the component class to run some code when a component mounts and unmounts:</p>\r\n<pre>\r\n<code>class Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tThese methods are called &ldquo;lifecycle methods&rdquo;.</p>\r\n<p>\r\n\tThe <code>componentDidMount()</code> method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:</p>\r\n<pre>\r\n<code>  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () =&gt; this.tick(),\r\n      1000\r\n    );\r\n  }</code></pre>\r\n<p>\r\n\tNote how we save the timer ID right on <code>this</code>.</p>\r\n<p>\r\n\tWhile <code>this.props</code> is set up by React itself and <code>this.state</code> has a special meaning, you are free to add additional fields to the class manually if you need to store something that doesn&rsquo;t participate in the data flow (like a timer ID).</p>\r\n<p>\r\n\tWe will tear down the timer in the <code>componentWillUnmount()</code> lifecycle method:</p>\r\n<pre>\r\n<code>  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }</code></pre>\r\n<p>\r\n\tFinally, we will implement a method called <code>tick()</code> that the <code>Clock</code> component will run every second.</p>\r\n<p>\r\n\tIt will use <code>this.setState()</code> to schedule updates to the component local state:</p>\r\n<pre>\r\n<code>class Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () =&gt; this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, world!&lt;/h1&gt;\r\n        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;Clock /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/amqdNA?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tNow the clock ticks every second.</p>\r\n<p>\r\n\tLet&rsquo;s quickly recap what&rsquo;s going on and the order in which the methods are called:</p>\r\n<ol>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tWhen <code>&lt;Clock /&gt;</code> is passed to <code>ReactDOM.render()</code>, React calls the constructor of the <code>Clock</code> component. Since <code>Clock</code> needs to display the current time, it initializes <code>this.state</code> with an object including the current time. We will later update this state.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tReact then calls the <code>Clock</code> component&rsquo;s <code>render()</code> method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the <code>Clock</code>&rsquo;s render output.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tWhen the <code>Clock</code> output is inserted in the DOM, React calls the <code>componentDidMount()</code> lifecycle method. Inside it, the <code>Clock</code> component asks the browser to set up a timer to call the component&rsquo;s <code>tick()</code> method once a second.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tEvery second the browser calls the <code>tick()</code> method. Inside it, the <code>Clock</code> component schedules a UI update by calling <code>setState()</code> with an object containing the current time. Thanks to the <code>setState()</code> call, React knows the state has changed, and calls the <code>render()</code> method again to learn what should be on the screen. This time, <code>this.state.date</code> in the <code>render()</code> method will be different, and so the render output will include the updated time. React updates the DOM accordingly.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tIf the <code>Clock</code> component is ever removed from the DOM, React calls the <code>componentWillUnmount()</code> lifecycle method so the timer is stopped.</p>\r\n\t</li>\r\n</ol>\r\n<h2>\r\n\tUsing State Correctly</h2>\r\n<p>\r\n\tThere are three things you should know about <code>setState()</code>.</p>\r\n<h3>\r\n\tDo Not Modify State Directly</h3>\r\n<p>\r\n\tFor example, this will not re-render a component:</p>\r\n<pre>\r\n<code>// Wrong\r\nthis.state.comment = &#39;Hello&#39;;</code></pre>\r\n<p>\r\n\tInstead, use <code>setState()</code>:</p>\r\n<pre>\r\n<code>// Correct\r\nthis.setState({comment: &#39;Hello&#39;});</code></pre>\r\n<p>\r\n\tThe only place where you can assign <code>this.state</code> is the constructor.</p>\r\n<h3>\r\n\tState Updates May Be Asynchronous</h3>\r\n<p>\r\n\tReact may batch multiple <code>setState()</code> calls into a single update for performance.</p>\r\n<p>\r\n\tBecause <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p>\r\n<p>\r\n\tFor example, this code may fail to update the counter:</p>\r\n<pre>\r\n<code>// Wrong\r\nthis.setState({\r\n  counter: this.state.counter + this.props.increment,\r\n});</code></pre>\r\n<p>\r\n\tTo fix it, use a second form of <code>setState()</code> that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:</p>\r\n<pre>\r\n<code>// Correct\r\nthis.setState((state, props) =&gt; ({\r\n  counter: state.counter + props.increment\r\n}));</code></pre>\r\n<p>\r\n\tWe used an&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions]]arrow function[[ endl ]] above, but it also works with regular functions:</p>\r\n<p>\r\n\t<code>// Correct</code></p>\r\n<pre>\r\n<code>this.setState(function(state, props) {\r\n  return {\r\n    counter: state.counter + props.increment\r\n  };\r\n});</code></pre>\r\n<h3>\r\n\tState Updates are Merged</h3>\r\n<p>\r\n\tWhen you call <code>setState()</code>, React merges the object you provide into the current state.</p>\r\n<p>\r\n\tFor example, your state may contain several independent variables:</p>\r\n<pre>\r\n<code>  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      comments: []\r\n    };\r\n  }</code></pre>\r\n<p>\r\n\tThen you can update them independently with separate <code>setState()</code> calls:</p>\r\n<pre>\r\n<code>  componentDidMount() {\r\n    fetchPosts().then(response =&gt; {\r\n      this.setState({\r\n        posts: response.posts\r\n      });\r\n    });\r\n\r\n    fetchComments().then(response =&gt; {\r\n      this.setState({\r\n        comments: response.comments\r\n      });\r\n    });\r\n  }</code></pre>\r\n<p>\r\n\tThe merging is shallow, so <code>this.setState({comments})</code> leaves <code>this.state.posts</code> intact, but completely replaces <code>this.state.comments</code>.</p>\r\n<h2>\r\n\tThe Data Flows Down</h2>\r\n<p>\r\n\tNeither parent nor child components can know if a certain component is stateful or stateless, and they shouldn&rsquo;t care whether it is defined as a function or a class.</p>\r\n<p>\r\n\tThis is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p>\r\n<p>\r\n\tA component may choose to pass its state down as props to its child components:</p>\r\n<pre>\r\n<code>&lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;</code></pre>\r\n<p>\r\n\tThis also works for user-defined components:</p>\r\n<pre>\r\n<code>&lt;FormattedDate date={this.state.date} /&gt;</code></pre>\r\n<p>\r\n\tThe <code>FormattedDate</code> component would receive the <code>date</code> in its props and wouldn&rsquo;t know whether it came from the <code>Clock</code>&rsquo;s state, from the <code>Clock</code>&rsquo;s props, or was typed by hand:</p>\r\n<pre>\r\n<code>function FormattedDate(props) {\r\n  return &lt;h2&gt;It is {props.date.toLocaleTimeString()}.&lt;/h2&gt;;\r\n}</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/zKRqNB?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tThis is commonly called a &ldquo;top-down&rdquo; or &ldquo;unidirectional&rdquo; data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components &ldquo;below&rdquo; them in the tree.</p>\r\n<p>\r\n\tIf you imagine a component tree as a waterfall of props, each component&rsquo;s state is like an additional water source that joins it at an arbitrary point but also flows down.</p>\r\n<p>\r\n\tTo show that all components are truly isolated, we can create an <code>App</code> component that renders three <code>&lt;Clock&gt;</code>s:</p>\r\n<pre>\r\n<code>function App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Clock /&gt;\r\n      &lt;Clock /&gt;\r\n      &lt;Clock /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;App /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/vXdGmd?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tEach <code>Clock</code> sets up its own timer and updates independently.</p>\r\n<p>\r\n\tIn React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.</p>"
          }
        },
        {
          "Handling Events": {
            "content": "<p>\r\n\tHandling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences:</p>\r\n<ul>\r\n\t<li>\r\n\t\tReact events are named using camelCase, rather than lowercase.</li>\r\n\t<li>\r\n\t\tWith JSX you pass a function as the event handler, rather than a string.</li>\r\n</ul>\r\n<p>\r\n\tFor example, the HTML:</p>\r\n<pre>\r\n<code>&lt;button onclick=&quot;activateLasers()&quot;&gt;\r\n  Activate Lasers\r\n&lt;/button&gt;</code></pre>\r\n<p>\r\n\tis slightly different in React:</p>\r\n<pre>\r\n<code>&lt;button onClick={activateLasers}&gt;\r\n  Activate Lasers\r\n&lt;/button&gt;</code></pre>\r\n<p>\r\n\tAnother difference is that you cannot return <code>false</code> to prevent default behavior in React. You must call <code>preventDefault</code> explicitly. For example, with plain HTML, to prevent the default link behavior of opening a new page, you can write:</p>\r\n<pre>\r\n<code>&lt;a href=&quot;#&quot; onclick=&quot;console.log(&#39;The link was clicked.&#39;); return false&quot;&gt;\r\n  Click me\r\n&lt;/a&gt;</code></pre>\r\n<p>\r\n\tIn React, this could instead be:</p>\r\n<pre>\r\n<code>function ActionLink() {\r\n  function handleClick(e) {\r\n    e.preventDefault();\r\n    console.log(&#39;The link was clicked.&#39;);\r\n  }\r\n\r\n  return (\r\n    &lt;a href=&quot;#&quot; onClick={handleClick}&gt;\r\n      Click me\r\n    &lt;/a&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\tHere, <code>e</code> is a synthetic event. React defines these synthetic events according to the&nbsp;[[ go | https://www.w3.org/TR/DOM-Level-3-Events/ ]]W3C&nbsp;spec[[ endl ]], so you don&rsquo;t need to worry about cross-browser compatibility. See the [[ link | react-api-reference-events]]<span style=\"font-family: monospace;\">SyntheticEvent</span>[[ endl ]]&nbsp;reference guide to learn more.</p>\r\n<p>\r\n\tWhen using React you should generally not need to call <code>addEventListener</code> to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.</p>\r\n<p>\r\n\tWhen you define a component using an&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes]]ES6 class[[ endl ]], a common pattern is for an event handler to be a method on the class. For example, this <code>Toggle</code> component renders a button that lets the user toggle between &ldquo;ON&rdquo; and &ldquo;OFF&rdquo; states:</p>\r\n<pre>\r\n<code>class Toggle extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isToggleOn: true};\r\n\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState(state =&gt; ({\r\n      isToggleOn: !state.isToggleOn\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;button onClick={this.handleClick}&gt;\r\n        {this.state.isToggleOn ? &#39;ON&#39; : &#39;OFF&#39;}\r\n      &lt;/button&gt;\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;Toggle /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | http://codepen.io/gaearon/pen/xEmzGg?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tYou have to be careful about the meaning of <code>this</code> in JSX callbacks. In JavaScript, class methods are not&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind]]bound[[ endl ]] by default. If you forget to bind <code>this.handleClick</code> and pass it to <code>onClick</code>, <code>this</code> will be <code>undefined</code> when the function is actually called.</p>\r\n<p>\r\n\tThis is not React-specific behavior; it is a part of&nbsp;[[ go | https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/]]how functions work in JavaScript[[ endl ]]. Generally, if you refer to a method without <code>()</code> after it, such as <code>onClick={this.handleClick}</code>, you should bind that method.</p>\r\n<p>\r\n\tIf calling <code>bind</code> annoys you, there are two ways you can get around this. If you are using the experimental&nbsp;[[ go | https://babeljs.io/docs/plugins/transform-class-properties/]]public class fields syntax[[ endl ]], you can use class fields to correctly bind callbacks:</p>\r\n<pre>\r\n<code>class LoggingButton extends React.Component {\r\n  // This syntax ensures `this` is bound within handleClick.\r\n  // Warning: this is *experimental* syntax.\r\n  handleClick = () =&gt; {\r\n    console.log(&#39;this is:&#39;, this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;button onClick={this.handleClick}&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tThis syntax is enabled by default in&nbsp;[[ go | https://github.com/facebookincubator/create-react-app]]Create React App[[ endl ]].</p>\r\n<p>\r\n\tIf you aren&rsquo;t using class fields syntax, you can use an&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions]]arrow function[[ endl ]] in the callback:</p>\r\n<pre>\r\n<code>class LoggingButton extends React.Component {\r\n  handleClick() {\r\n    console.log(&#39;this is:&#39;, this);\r\n  }\r\n\r\n  render() {\r\n    // This syntax ensures `this` is bound within handleClick\r\n    return (\r\n      &lt;button onClick={(e) =&gt; this.handleClick(e)}&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tThe problem with this syntax is that a different callback is created each time the <code>LoggingButton</code> renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.</p>\r\n<h2>\r\n\tPassing Arguments to Event Handlers</h2>\r\n<p>\r\n\tInside a loop it is common to want to pass an extra parameter to an event handler. For example, if <code>id</code> is the row ID, either of the following would work:</p>\r\n<pre>\r\n<code>&lt;button onClick={(e) =&gt; this.deleteRow(id, e)}&gt;Delete Row&lt;/button&gt;\r\n&lt;button onClick={this.deleteRow.bind(this, id)}&gt;Delete Row&lt;/button&gt;</code></pre>\r\n<p>\r\n\tThe above two lines are equivalent, and use&nbsp;[[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions]]arrow functions[[ endl ]] and [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind ]]<span style=\"font-family: monospace;\">Function.prototype.bind</span>[[ endl ]] respectively.</p>\r\n<p>\r\n\tIn both cases, the <code>e</code> argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with <code>bind</code> any further arguments are automatically forwarded.</p>"
          }
        },
        {
          "Conditional Rendering": {
            "content": "<p>\r\n\tIn React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.</p>\r\n<p>\r\n\tConditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else]]if[[ endl ]] or the [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator]]conditional operator[[ endl ]]&nbsp;to create elements representing the current state, and let React update the UI to match them.</p>\r\n<p>\r\n\tConsider these two components:</p>\r\n<pre>\r\n<code>function UserGreeting(props) {\r\n  return &lt;h1&gt;Welcome back!&lt;/h1&gt;;\r\n}\r\n\r\nfunction GuestGreeting(props) {\r\n  return &lt;h1&gt;Please sign up.&lt;/h1&gt;;\r\n}</code></pre>\r\n<p>\r\n\tWe&rsquo;ll create a <code>Greeting</code> component that displays either of these components depending on whether a user is logged in:</p>\r\n<pre>\r\n<code>function Greeting(props) {\r\n  const isLoggedIn = props.isLoggedIn;\r\n  if (isLoggedIn) {\r\n    return &lt;UserGreeting /&gt;;\r\n  }\r\n  return &lt;GuestGreeting /&gt;;\r\n}\r\n\r\nReactDOM.render(\r\n  // Try changing to isLoggedIn={true}:\r\n  &lt;Greeting isLoggedIn={false} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/ZpVxNq?editors=0011]]Try it on CodePen[[ endl ]]</p>\r\n<p>\r\n\tThis example renders a different greeting depending on the value of <code>isLoggedIn</code> prop.</p>\r\n<h2>\r\n\tElement Variables</h2>\r\n<p>\r\n\tYou can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn&rsquo;t change.</p>\r\n<p>\r\n\tConsider these two new components representing Logout and Login buttons:</p>\r\n<pre>\r\n<code>function LoginButton(props) {\r\n  return (\r\n    &lt;button onClick={props.onClick}&gt;\r\n      Login\r\n    &lt;/button&gt;\r\n  );\r\n}\r\n\r\nfunction LogoutButton(props) {\r\n  return (\r\n    &lt;button onClick={props.onClick}&gt;\r\n      Logout\r\n    &lt;/button&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\tIn the example below, we will create a [[ link | react-main-concepts-state-and-lifecycle]]stateful component[[ endl ]] called <code>LoginControl</code>.</p>\r\n<p>\r\n\tIt will render either <code>&lt;LoginButton /&gt;</code> or <code>&lt;LogoutButton /&gt;</code> depending on its current state. It will also render a <code>&lt;Greeting /&gt;</code> from the previous example:</p>\r\n<pre>\r\n<code>class LoginControl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLoginClick = this.handleLoginClick.bind(this);\r\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\r\n    this.state = {isLoggedIn: false};\r\n  }\r\n\r\n  handleLoginClick() {\r\n    this.setState({isLoggedIn: true});\r\n  }\r\n\r\n  handleLogoutClick() {\r\n    this.setState({isLoggedIn: false});\r\n  }\r\n\r\n  render() {\r\n    const isLoggedIn = this.state.isLoggedIn;\r\n    let button;\r\n\r\n    if (isLoggedIn) {\r\n      button = &lt;LogoutButton onClick={this.handleLogoutClick} /&gt;;\r\n    } else {\r\n      button = &lt;LoginButton onClick={this.handleLoginClick} /&gt;;\r\n    }\r\n\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;Greeting isLoggedIn={isLoggedIn} /&gt;\r\n        {button}\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;LoginControl /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/QKzAgB?editors=0010]]Try it on CodePen[[ endl ]]</p>\r\n<p>\r\n\tWhile declaring a variable and using an <code>if</code> statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below.</p>\r\n<h2>\r\n\tInline If with Logical &amp;&amp; Operator</h2>\r\n<p>\r\n\tYou may [[ link | react-main-concepts-jsx]]embed any expressions in JSX[[ endl ]] by wrapping them in curly braces. This includes the JavaScript logical <code>&amp;&amp;</code> operator. It can be handy for conditionally including an element:</p>\r\n<pre>\r\n<code>function Mailbox(props) {\r\n  const unreadMessages = props.unreadMessages;\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Hello!&lt;/h1&gt;\r\n      {unreadMessages.length &gt; 0 &amp;&amp;\r\n        &lt;h2&gt;\r\n          You have {unreadMessages.length} unread messages.\r\n        &lt;/h2&gt;\r\n      }\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nconst messages = [&#39;React&#39;, &#39;Re: React&#39;, &#39;Re:Re: React&#39;];\r\nReactDOM.render(\r\n  &lt;Mailbox unreadMessages={messages} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/ozJddz?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tIt works because in JavaScript, <code>true &amp;&amp; expression</code> always evaluates to <code>expression</code>, and <code>false &amp;&amp; expression</code> always evaluates to <code>false</code>.</p>\r\n<p>\r\n\tTherefore, if the condition is <code>true</code>, the element right after <code>&amp;&amp;</code> will appear in the output. If it is <code>false</code>, React will ignore and skip it.</p>\r\n<h2>\r\n\tInline If-Else with Conditional Operator</h2>\r\n<p>\r\n\tAnother method for conditionally rendering elements inline is to use the JavaScript conditional operator&nbsp;[[ go | https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator]]<span style=\"font-family: monospace;\">condition ? true : false</span>[[ endl ]]&nbsp;.</p>\r\n<p>\r\n\tIn the example below, we use it to conditionally render a small block of text.</p>\r\n<pre>\r\n<code>render() {\r\n  const isLoggedIn = this.state.isLoggedIn;\r\n  return (\r\n    &lt;div&gt;\r\n      The user is &lt;b&gt;{isLoggedIn ? &#39;currently&#39; : &#39;not&#39;}&lt;/b&gt; logged in.\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\tIt can also be used for larger expressions although it is less obvious what&rsquo;s going on:</p>\r\n<pre>\r\n<code>render() {\r\n  const isLoggedIn = this.state.isLoggedIn;\r\n  return (\r\n    &lt;div&gt;\r\n      {isLoggedIn ? (\r\n        &lt;LogoutButton onClick={this.handleLogoutClick} /&gt;\r\n      ) : (\r\n        &lt;LoginButton onClick={this.handleLoginClick} /&gt;\r\n      )}\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\tJust like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to [[ link | react-main-concepts-components-and-props]]extract a component[[ endl ]].</p>\r\n<h2>\r\n\tPreventing Component from Rendering</h2>\r\n<p>\r\n\tIn rare cases you might want a component to hide itself even though it was rendered by another component. To do this return <code>null</code> instead of its render output.</p>\r\n<p>\r\n\tIn the example below, the <code>&lt;WarningBanner /&gt;</code> is rendered depending on the value of the prop called <code>warn</code>. If the value of the prop is <code>false</code>, then the component does not render:</p>\r\n<pre>\r\n<code>function WarningBanner(props) {\r\n  if (!props.warn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    &lt;div className=&quot;warning&quot;&gt;\r\n      Warning!\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nclass Page extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {showWarning: true};\r\n    this.handleToggleClick = this.handleToggleClick.bind(this);\r\n  }\r\n\r\n  handleToggleClick() {\r\n    this.setState(state =&gt; ({\r\n      showWarning: !state.showWarning\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;WarningBanner warn={this.state.showWarning} /&gt;\r\n        &lt;button onClick={this.handleToggleClick}&gt;\r\n          {this.state.showWarning ? &#39;Hide&#39; : &#39;Show&#39;}\r\n        &lt;/button&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  &lt;Page /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/Xjoqwm?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tReturning <code>null</code> from a component&rsquo;s <code>render</code> method does not affect the firing of the component&rsquo;s lifecycle methods. For instance <code>componentDidUpdate</code> will still be called.</p>"
          }
        },
        {
          "Lists and Keys": {
            "content": "<p>\r\n\tFirst, let&rsquo;s review how you transform lists in JavaScript.</p>\r\n<p>\r\n\tGiven the code below, we use the [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map]]<span style=\"font-family: monospace;\">map()</span>[[ endl ]]&nbsp;function to take an array of <code>numbers</code> and double their values. We assign the new array returned by <code>map()</code> to the variable <code>doubled</code> and log it:</p>\r\n<pre>\r\n<code>const numbers = [1, 2, 3, 4, 5];\r\nconst doubled = numbers.map((number) =&gt; number * 2);\r\nconsole.log(doubled);</code></pre>\r\n<p>\r\n\tThis code logs <code>[2, 4, 6, 8, 10]</code> to the console.</p>\r\n<p>\r\n\tIn React, transforming arrays into lists of [[ link | react-main-concepts-rendering-elements]]elements[[ endl ]] is nearly identical.</p>\r\n<h3>\r\n\tRendering Multiple Components</h3>\r\n<p>\r\n\tYou can build collections of elements and [[ link | react-main-concepts-jsx]]include them in JSX[[ endl ]]&nbsp;using curly braces <code>{}</code>.</p>\r\n<p>\r\n\tBelow, we loop through the <code>numbers</code> array using the JavaScript [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map]]map()[[ endl ]]&nbsp;function. We return a <code>&lt;li&gt;</code> element for each item. Finally, we assign the resulting array of elements to <code>listItems</code>:</p>\r\n<pre>\r\n<code>const numbers = [1, 2, 3, 4, 5];\r\nconst listItems = numbers.map((number) =&gt;\r\n  &lt;li&gt;{number}&lt;/li&gt;\r\n);\r\n</code></pre>\r\n<p>\r\n\tWe include the entire <code>listItems</code> array inside a <code>&lt;ul&gt;</code> element, and [[ link | react-main-concepts-rendering-elements]]render it to the DOM[[ endl ]]:</p>\r\n<pre>\r\n<code>ReactDOM.render(\r\n  &lt;ul&gt;{listItems}&lt;/ul&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/GjPyQr?editors=0011]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tThis code displays a bullet list of numbers between 1 and 5.</p>\r\n<h3>\r\n\tBasic List Component</h3>\r\n<p>\r\n\tUsually you would render lists inside a [[ link | react-main-concepts-components-and-props]]component[[ endl ]].</p>\r\n<p>\r\n\tWe can refactor the previous example into a component that accepts an array of <code>numbers</code> and outputs an unordered list of elements.</p>\r\n<pre>\r\n<code>function NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =&gt;\r\n    &lt;li&gt;{number}&lt;/li&gt;\r\n  );\r\n  return (\r\n    &lt;ul&gt;{listItems}&lt;/ul&gt;\r\n  );\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4, 5];\r\nReactDOM.render(\r\n  &lt;NumberList numbers={numbers} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\tWhen you run this code, you&rsquo;ll be given a warning that a key should be provided for list items. A &ldquo;key&rdquo; is a special string attribute you need to include when creating lists of elements. We&rsquo;ll discuss why it&rsquo;s important in the next section.</p>\r\n<p>\r\n\tLet&rsquo;s assign a <code>key</code> to our list items inside <code>numbers.map()</code> and fix the missing key issue.</p>\r\n<pre>\r\n<code>function NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =&gt;\r\n    &lt;li key={number.toString()}&gt;\r\n      {number}\r\n    &lt;/li&gt;\r\n  );\r\n  return (\r\n    &lt;ul&gt;{listItems}&lt;/ul&gt;\r\n  );\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4, 5];\r\nReactDOM.render(\r\n  &lt;NumberList numbers={numbers} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/jrXYRR?editors=0011]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<h2>\r\n\tKeys</h2>\r\n<p>\r\n\tKeys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:</p>\r\n<pre>\r\n<code>const numbers = [1, 2, 3, 4, 5];\r\nconst listItems = numbers.map((number) =&gt;\r\n  &lt;li key={number.toString()}&gt;\r\n    {number}\r\n  &lt;/li&gt;\r\n);</code></pre>\r\n<p>\r\n\tThe best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:</p>\r\n<pre>\r\n<code>const todoItems = todos.map((todo) =&gt;\r\n  &lt;li key={todo.id}&gt;\r\n    {todo.text}\r\n  &lt;/li&gt;\r\n);</code></pre>\r\n<p>\r\n\tWhen you don&rsquo;t have stable IDs for rendered items, you may use the item index as a key as a last resort:</p>\r\n<pre>\r\n<code>const todoItems = todos.map((todo, index) =&gt;\r\n  // Only do this if items have no stable IDs\r\n  &lt;li key={index}&gt;\r\n    {todo.text}\r\n  &lt;/li&gt;\r\n);</code></pre>\r\n<p>\r\n\tWe don&rsquo;t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny&rsquo;s article for an&nbsp;[[ go | https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318]]in-depth explanation on the negative impacts of using an index as a key[[ endl ]]. If you choose not to assign an explicit key to list items then React will default to using indexes as keys.</p>\r\n<p>\r\n\tHere is an [[ link | react-advanced-guides-reconciliation ]]in-depth explanation about why keys are necessary[[ endl ]] if you&rsquo;re interested in learning more.</p>\r\n<h3>\r\n\tExtracting Components with Keys</h3>\r\n<p>\r\n\tKeys only make sense in the context of the surrounding array.</p>\r\n<p>\r\n\tFor example, if you [[ link | react-main-concepts-components-and-props]]extract[[ endl ]] a <code>ListItem</code> component, you should keep the key on the <code>&lt;ListItem /&gt;</code> elements in the array rather than on the <code>&lt;li&gt;</code> element in the <code>ListItem</code> itself.</p>\r\n<p>\r\n\tExample: Incorrect Key Usage</p>\r\n<pre>\r\n<code>function ListItem(props) {\r\n  const value = props.value;\r\n  return (\r\n    // Wrong! There is no need to specify the key here:\r\n    &lt;li key={value.toString()}&gt;\r\n      {value}\r\n    &lt;/li&gt;\r\n  );\r\n}\r\n\r\nfunction NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =&gt;\r\n    // Wrong! The key should have been specified here:\r\n    &lt;ListItem value={number} /&gt;\r\n  );\r\n  return (\r\n    &lt;ul&gt;\r\n      {listItems}\r\n    &lt;/ul&gt;\r\n  );\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4, 5];\r\nReactDOM.render(\r\n  &lt;NumberList numbers={numbers} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\tExample: Correct Key Usage</p>\r\n<pre>\r\n<code>function ListItem(props) {\r\n  // Correct! There is no need to specify the key here:\r\n  return &lt;li&gt;{props.value}&lt;/li&gt;;\r\n}\r\n\r\nfunction NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =&gt;\r\n    // Correct! Key should be specified inside the array.\r\n    &lt;ListItem key={number.toString()}\r\n              value={number} /&gt;\r\n  );\r\n  return (\r\n    &lt;ul&gt;\r\n      {listItems}\r\n    &lt;/ul&gt;\r\n  );\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4, 5];\r\nReactDOM.render(\r\n  &lt;NumberList numbers={numbers} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/ZXeOGM?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tA good rule of thumb is that elements inside the <code>map()</code> call need keys.</p>\r\n<h3>\r\n\tKeys Must Only Be Unique Among Siblings</h3>\r\n<p>\r\n\tKeys used within arrays should be unique among their siblings. However they don&rsquo;t need to be globally unique. We can use the same keys when we produce two different arrays:</p>\r\n<pre>\r\n<code>function Blog(props) {\r\n  const sidebar = (\r\n    &lt;ul&gt;\r\n      {props.posts.map((post) =&gt;\r\n        &lt;li key={post.id}&gt;\r\n          {post.title}\r\n        &lt;/li&gt;\r\n      )}\r\n    &lt;/ul&gt;\r\n  );\r\n  const content = props.posts.map((post) =&gt;\r\n    &lt;div key={post.id}&gt;\r\n      &lt;h3&gt;{post.title}&lt;/h3&gt;\r\n      &lt;p&gt;{post.content}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n  return (\r\n    &lt;div&gt;\r\n      {sidebar}\r\n      &lt;hr /&gt;\r\n      {content}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nconst posts = [\r\n  {id: 1, title: &#39;Hello World&#39;, content: &#39;Welcome to learning React!&#39;},\r\n  {id: 2, title: &#39;Installation&#39;, content: &#39;You can install React from npm.&#39;}\r\n];\r\nReactDOM.render(\r\n  &lt;Blog posts={posts} /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/NRZYGN?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tKeys serve as a hint to React but they don&rsquo;t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:</p>\r\n<pre>\r\n<code>const content = posts.map((post) =&gt;\r\n  &lt;Post\r\n    key={post.id}\r\n    id={post.id}\r\n    title={post.title} /&gt;\r\n);</code></pre>\r\n<p>\r\n\tWith the example above, the <code>Post</code> component can read <code>props.id</code>, but not <code>props.key</code>.</p>\r\n<h3>\r\n\tEmbedding map() in JSX</h3>\r\n<p>\r\n\tIn the examples above we declared a separate <code>listItems</code> variable and included it in JSX:</p>\r\n<pre>\r\n<code>function NumberList(props) {\r\n  const numbers = props.numbers;\r\n  const listItems = numbers.map((number) =&gt;\r\n    &lt;ListItem key={number.toString()}\r\n              value={number} /&gt;\r\n  );\r\n  return (\r\n    &lt;ul&gt;\r\n      {listItems}\r\n    &lt;/ul&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\tJSX allows [[ link | react-main-concepts-jsx]]embedding any expression[[ endl ]] in curly braces so we could inline the <code>map()</code> result:</p>\r\n<pre>\r\n<code>function NumberList(props) {\r\n  const numbers = props.numbers;\r\n  return (\r\n    &lt;ul&gt;\r\n      {numbers.map((number) =&gt;\r\n        &lt;ListItem key={number.toString()}\r\n                  value={number} /&gt;\r\n      )}\r\n    &lt;/ul&gt;\r\n  );\r\n}</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/BLvYrB?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tSometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the <code>map()</code> body is too nested, it might be a good time to [[ link | react-main-concepts-components-and-props]]extract a component[[ endl ]].</p>"
          }
        },
        {
          "Forms": {
            "content": "<p>\r\n\tHTML form elements work a little bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:</p>\r\n<pre>\r\n<code>&lt;form&gt;\r\n  &lt;label&gt;\r\n    Name:\r\n    &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;\r\n  &lt;/label&gt;\r\n  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\r\n&lt;/form&gt;</code></pre>\r\n<p>\r\n\tThis form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it&rsquo;s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called &ldquo;controlled components&rdquo;.</p>\r\n<h2>\r\n\tControlled Components</h2>\r\n<p>\r\n\tIn HTML, form elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with [[ link | react-api-reference-react-api]]<code>setState()</code>[[ endl ]].</p>\r\n<p>\r\n\tWe can combine the two by making the React state be the &ldquo;single source of truth&rdquo;. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a &ldquo;controlled component&rdquo;.</p>\r\n<p>\r\n\tFor example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:</p>\r\n<pre>\r\n<code>class NameForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: &#39;&#39;};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert(&#39;A name was submitted: &#39; + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;form onSubmit={this.handleSubmit}&gt;\r\n        &lt;label&gt;\r\n          Name:\r\n          &lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleChange} /&gt;\r\n        &lt;/label&gt;\r\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\r\n      &lt;/form&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/VmmPgp?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tSince the <code>value</code> attribute is set on our form element, the displayed value will always be <code>this.state.value</code>, making the React state the source of truth. Since <code>handleChange</code> runs on every keystroke to update the React state, the displayed value will update as the user types.</p>\r\n<p>\r\n\tWith a controlled component, every state mutation will have an associated handler function. This makes it straightforward to modify or validate user input. For example, if we wanted to enforce that names are written with all uppercase letters, we could write <code>handleChange</code> as:</p>\r\n<pre>\r\n<code>handleChange(event) {\r\n  this.setState({value: event.target.value.toUpperCase()});\r\n}</code></pre>\r\n<h2>\r\n\tThe textarea Tag</h2>\r\n<p>\r\n\tIn HTML, a <code>&lt;textarea&gt;</code> element defines its text by its children:</p>\r\n<pre>\r\n<code>&lt;textarea&gt;\r\n  Hello there, this is some text in a text area\r\n&lt;/textarea&gt;</code></pre>\r\n<p>\r\n\tIn React, a <code>&lt;textarea&gt;</code> uses a <code>value</code> attribute instead. This way, a form using a <code>&lt;textarea&gt;</code> can be written very similarly to a form that uses a single-line input:</p>\r\n<pre>\r\n<code>class EssayForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: &#39;Please write an essay about your favorite DOM element.&#39;\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert(&#39;An essay was submitted: &#39; + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;form onSubmit={this.handleSubmit}&gt;\r\n        &lt;label&gt;\r\n          Essay:\r\n          &lt;textarea value={this.state.value} onChange={this.handleChange} /&gt;\r\n        &lt;/label&gt;\r\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\r\n      &lt;/form&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\tNotice that <code>this.state.value</code> is initialized in the constructor, so that the text area starts off with some text in it.</p>\r\n<h2>\r\n\tThe select Tag</h2>\r\n<p>\r\n\tIn HTML, <code>&lt;select&gt;</code> creates a drop-down list. For example, this HTML creates a drop-down list of flavors:</p>\r\n<pre>\r\n<code>&lt;select&gt;\r\n  &lt;option value=&quot;grapefruit&quot;&gt;Grapefruit&lt;/option&gt;\r\n  &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;\r\n  &lt;option selected value=&quot;coconut&quot;&gt;Coconut&lt;/option&gt;\r\n  &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n<p>\r\n\tNote that the Coconut option is initially selected, because of the <code>selected</code> attribute. React, instead of using this <code>selected</code> attribute, uses a <code>value</code> attribute on the root <code>select</code> tag. This is more convenient in a controlled component because you only need to update it in one place. For example:</p>\r\n<pre>\r\n<code>class FlavorForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: &#39;coconut&#39;};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert(&#39;Your favorite flavor is: &#39; + this.state.value);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;form onSubmit={this.handleSubmit}&gt;\r\n        &lt;label&gt;\r\n          Pick your favorite flavor:\r\n          &lt;select value={this.state.value} onChange={this.handleChange}&gt;\r\n            &lt;option value=&quot;grapefruit&quot;&gt;Grapefruit&lt;/option&gt;\r\n            &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;\r\n            &lt;option value=&quot;coconut&quot;&gt;Coconut&lt;/option&gt;\r\n            &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;\r\n          &lt;/select&gt;\r\n        &lt;/label&gt;\r\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\r\n      &lt;/form&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/JbbEzX?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tOverall, this makes it so that <code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> all work very similarly - they all accept a <code>value</code> attribute that you can use to implement a controlled component.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote</p>\r\n\t<p>\r\n\t\tYou can pass an array into the <code>value</code> attribute, allowing you to select multiple options in a <code>select</code> tag:</p>\r\n\t<pre>\r\n\t<code>&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code></pre>\r\n</blockquote>\r\n<h2>\r\n\tThe file input Tag</h2>\r\n<p>\r\n\tIn HTML, an <code>&lt;input type=&quot;file&quot;&gt;</code> lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the [[ go | https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications]]File API[[ endl ]].</p>\r\n<pre>\r\n<code>&lt;input type=&quot;file&quot; /&gt;</code></pre>\r\n<p>\r\n\tBecause its value is read-only, it is an uncontrolled&nbsp;component in React. It is discussed together with other uncontrolled components [[ link | react-advanced-guides-uncontrolled-components]]later in the documentation[[ endl ]].</p>\r\n<h2>\r\n\tHandling Multiple Inputs</h2>\r\n<p>\r\n\tWhen you need to handle multiple controlled <code>input</code> elements, you can add a <code>name</code> attribute to each element and let the handler function choose what to do based on the value of <code>event.target.name</code>.</p>\r\n<p>\r\n\tFor example:</p>\r\n<pre>\r\n<code>class Reservation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isGoing: true,\r\n      numberOfGuests: 2\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.type === &#39;checkbox&#39; ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;form&gt;\r\n        &lt;label&gt;\r\n          Is going:\r\n          &lt;input\r\n            name=&quot;isGoing&quot;\r\n            type=&quot;checkbox&quot;\r\n            checked={this.state.isGoing}\r\n            onChange={this.handleInputChange} /&gt;\r\n        &lt;/label&gt;\r\n        &lt;br /&gt;\r\n        &lt;label&gt;\r\n          Number of guests:\r\n          &lt;input\r\n            name=&quot;numberOfGuests&quot;\r\n            type=&quot;number&quot;\r\n            value={this.state.numberOfGuests}\r\n            onChange={this.handleInputChange} /&gt;\r\n        &lt;/label&gt;\r\n      &lt;/form&gt;\r\n    );\r\n  }\r\n}</code></pre>\r\n<p>\r\n\t[[ go | https://codepen.io/gaearon/pen/wgedvV?editors=0010]]Try it on CodePen[[ endl ]]&nbsp;</p>\r\n<p>\r\n\tNote how we used the ES6 [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names]]computed property name[[ endl ]]&nbsp;syntax to update the state key corresponding to the given input name:</p>\r\n<pre>\r\n<code>this.setState({\r\n  [name]: value\r\n});</code></pre>\r\n<p>\r\n\tIt is equivalent to this ES5 code:</p>\r\n<pre>\r\n<code>var partialState = {};\r\npartialState[name] = value;\r\nthis.setState(partialState);</code></pre>\r\n<p>\r\n\tAlso, since <code>setState()</code> automatically [[ link | react-main-concepts-state-and-lifecycle]]merges a partial state into the current state[[ endl ]], we only needed to call it with the changed parts.</p>\r\n<h2>\r\n\tControlled Input Null Value</h2>\r\n<p>\r\n\tSpecifying the value prop on a controlled component&nbsp;prevents the user from changing the input unless you desire so. If you&rsquo;ve specified a <code>value</code> but the input is still editable, you may have accidentally set <code>value</code> to <code>undefined</code> or <code>null</code>.</p>\r\n<p>\r\n\tThe following code demonstrates this. (The input is locked at first but becomes editable after a short delay.)</p>\r\n<pre>\r\n<code>ReactDOM.render(&lt;input value=&quot;hi&quot; /&gt;, mountNode);\r\n\r\nsetTimeout(function() {\r\n  ReactDOM.render(&lt;input value={null} /&gt;, mountNode);\r\n}, 1000);</code></pre>\r\n<h2>\r\n\tAlternatives to Controlled Components</h2>\r\n<p>\r\n\tIt can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out [[ link | react-advanced-guides-uncontrolled-components]]uncontrolled components[[ endl ]], an alternative technique for implementing input forms.</p>\r\n<h2>\r\n\tFully-Fledged Solutions</h2>\r\n<p>\r\n\tIf you&rsquo;re looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, [[ go | https://jaredpalmer.com/formik]]Formik[[ endl ]]&nbsp;is one of the popular choices. However, it is built on the same principles of controlled components and managing state &mdash; so don&rsquo;t neglect to learn them.</p>"
          }
        }
      ]
    }
  }
]