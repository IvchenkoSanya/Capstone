[
  {
    "query": "React",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "React Installation",
      "lessons": [
        [
          {
            "title": "React",
            "topics": []
          },
          {
            "title": "React Installation",
            "topics": []
          },
          {
            "title": "Getting Started with React",
            "topics": []
          },
          {
            "title": "Add React to a Website",
            "topics": []
          },
          {
            "title": "Create a New React App",
            "topics": []
          },
          {
            "title": "CDN Links",
            "topics": []
          },
          {
            "title": "Main Concepts of React",
            "topics": []
          }
        ]
      ],
      "lessons_content": [
        [
          {
            "React": "<p>\r\n\tReact (also known as React.js or ReactJS) is a JavaScript library for building user interfaces. It is maintained by Facebook and a community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications. Complex React applications usually require the use of additional libraries for state management, routing, and interaction with an API.</p><p>\r\n\tReactJS<br />\r\n\t[[! | https://reactjs.org/]]</p>"
          },
          {
            "React Installation": ""
          },
          {
            "Getting Started with React": "<p>\r\n\tReact is a JavaScript library for building user interfaces.</p>\r\n<h2>\r\n\tReact</h2>\r\n<p>\r\n\tReact has been designed from the start for gradual adoption, and you can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to a simple HTML page, or start a complex React-powered app, the links in this section will help you get started.</p>\r\n<h3>\r\n\tOnline Playgrounds</h3>\r\n<p>\r\n\tIf you&rsquo;re interested in playing around with React, you can use an online code playground. Try a Hello World template on [[ go | https://codepen.io/pen?&amp;editors=0010]]CodePen[[ endl ]] or [[ go | https://codesandbox.io/s/new]]CodeSandbox.[[ endl ]]</p>\r\n<p>\r\n\tIf you prefer to use your own text editor, you can also [[ go | https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html]]download this HTML file[[ endl ]], edit it, and open it from the local filesystem in your browser. It does a slow runtime code transformation, so we&rsquo;d only recommend using this for simple demos.</p>\r\n<h3>\r\n\tAdd React to a Website</h3>\r\n<p>\r\n\tYou can [[ link | react-installation-add-react-to-a-website]]add React to an HTML page in one minute[[ endl ]]. You can then either gradually expand its presence, or keep it contained to a few dynamic widgets.</p>\r\n<h3>\r\n\tCreate a New React App</h3>\r\n<p>\r\n\tWhen starting a React project, [[ link |&nbsp;react-installation-add-react-to-a-website]]a simple HTML page with script tags[[ endl ]] might still be the best option. It only takes a minute to set up!</p>\r\n<p>\r\n\tAs your application grows, you might want to consider a more integrated setup. There are&nbsp;[[link |&nbsp;react-installation-create-a-new-react-app]]several JavaScript toolchains[[ endl ]] we recommend for larger applications. Each of them can work with little to no configuration and lets you take full advantage of the rich React ecosystem.</p>\r\n<h2>\r\n\tLearn React</h2>\r\n<p>\r\n\tPeople come to React from different backgrounds and with different learning styles. Whether you prefer a more theoretical or a practical approach, we hope you&rsquo;ll find this section helpful.</p>\r\n<p>\r\n\tLike any unfamiliar technology, React does have a learning curve. With practice and some patience, you will get the hang of it.</p>\r\n<h3>\r\n\tReact for Beginners</h3>\r\n<p>\r\n\tIf you feel that the React documentation goes at a faster pace than you&rsquo;re comfortable with, check out [[ go | https://www.taniarascia.com/getting-started-with-react/]]this overview of React by Tania Rascia[[ endl ]]. It introduces the most important React concepts in a detailed, beginner-friendly way. Once you&rsquo;re done, give the documentation another try!</p>\r\n<h3>\r\n\tReact for Designers</h3>\r\n<p>\r\n\tIf you&rsquo;re coming from a design background,&nbsp;[[ go | https://reactfordesigners.com/]]these resources[[ endl ]] are a great place to get started.</p>\r\n<h3>\r\n\tJavaScript Resources</h3>\r\n<p>\r\n\tThe React documentation assumes some familiarity with programming in the JavaScript language. You don&rsquo;t have to be an expert, but it&rsquo;s harder to learn both React and JavaScript at the same time.</p>\r\n<p>\r\n\tWe recommend going through this&nbsp;[[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript]]JavaScript overview[[ endl ]] to check your knowledge level. It will take you between 30 minutes and an hour but you will feel more confident learning React.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tTip</p>\r\n\t<p>\r\n\t\tWhenever you get confused by something in JavaScript, [[ go | https://developer.mozilla.org/en-US/docs/Web/JavaScript]]MDN[[ endl ]] and&nbsp;[[ go | http://javascript.info/]]javascript.info[[ endl ]] are great websites to check. There are also <a href=\"https://reactjs.org/community/support.html\" target=\"_blank\">community support forums</a> where you can ask for help.</p>\r\n</blockquote>\r\n<h3>\r\n\tStep-by-Step Guide</h3>\r\n<p>\r\n\tIf you prefer to learn concepts step by step, our guide to [[ link | react-main-concepts]]main concepts[[ endl ]] is the best place to start. Every next chapter in it builds on the knowledge introduced in the previous chapters so you won&rsquo;t miss anything as you go along.</p>\r\n<h3>\r\n\tThinking in React</h3>\r\n<p>\r\n\tMany React users credit reading [[ link | react-main-concepts-thinking-in-react]]Thinking in React&nbsp;[[ endl ]] as the moment React finally &ldquo;clicked&rdquo; for them. It&rsquo;s probably the oldest React walkthrough but it&rsquo;s still just as relevant.</p>\r\n<h3>\r\n\tRecommended Courses</h3>\r\n<p>\r\n\tSometimes people find third-party books and video courses more helpful than the official documentation. We maintain <a href=\"https://reactjs.org/community/courses.html\" target=\"_blank\">a list of commonly recommended resources</a>, some of which are free.</p>\r\n<h3>\r\n\tAdvanced Concepts</h3>\r\n<p>\r\n\tOnce you&rsquo;re comfortable with the main concepts and played with React a little bit, you might be interested in more advanced topics. This section will introduce you to the powerful, but less commonly used React features like [[ link | react-advanced-guides-context]]context[[ endl ]] and [[ link | react-advanced-guides-refs-and-the-dom]]refs[[ endl ]].</p>\r\n<h3>\r\n\tAPI Reference</h3>\r\n<p>\r\n\tThis documentation section is useful when you want to learn more details about a particular React API. For example,&nbsp;[[ link |&nbsp;react-api-reference-react-api]]React.Component API reference[[ endl ]] can provide you with details on how <code>setState()</code> works, and what different lifecycle methods are useful for.</p>\r\n<h2>\r\n\tStaying Informed</h2>\r\n<p>\r\n\tThe <a href=\"https://reactjs.org/blog/2018/11/13/react-conf-recap.html\" target=\"_blank\">React blog</a> is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted there first.</p>\r\n<p>\r\n\tYou can also follow the [[ go | https://twitter.com/reactjs]]@reactjs account[[ endl ]] on Twitter, but you won&rsquo;t miss anything essential if you only read the blog.</p>\r\n<p>\r\n\tNot every React release deserves its own blog post, but you can find a detailed changelog for every release <a href=\"https://github.com/facebook/react/blob/master/CHANGELOG.md\" target=\"_blank\">in the CHANGELOG.md file in the React repository</a>, as well as on the <a href=\"https://github.com/facebook/react\" target=\"_blank\">Releases</a> page.</p>\r\n<h2>\r\n\tVersioned Documentation</h2>\r\n<p>\r\n\tThis documentation always reflects the latest stable version of React. Since React 16, you can find older versions of the documentation <a href=\"https://reactjs.org/versions/\" target=\"_blank\">on a separate page</a>. Note that documentation for past versions is snapshotted at the time of the release, and isn&rsquo;t being continuously updated.</p>"
          },
          {
            "Add React to a Website": "<p>\r\n\tReact has been designed from the start for gradual adoption, and you can use as little or as much React as you need. Perhaps you only want to add some &ldquo;sprinkles of interactivity&rdquo; to an existing page. React components are a great way to do that.</p>\r\n<p>\r\n\tThe majority of websites aren&rsquo;t, and don&rsquo;t need to be, single-page apps. With a few lines of code and no build tooling, try React in a small part of your website. You can then either gradually expand its presence, or keep it contained to a few dynamic widgets.</p>\r\n<h2>\r\n\tAdd React in One Minute</h2>\r\n<p>\r\n\tIn this section, we will show how to add a React component to an existing HTML page. You can follow along with your own website, or create an empty HTML file to practice.</p>\r\n<p>\r\n\tThere will be no complicated tools or install requirements to complete this section, you only need an internet connection, and a minute of your time.</p>\r\n<p>\r\n\tOptional: [[ go | https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/f6c882b6ae18bde42dcf6fdb751aae93495a2275.zip]]Download the full example (2KB zipped)[[ endl ]]</p>\r\n<h3>\r\n\tStep 1: Add a DOM Container to the HTML</h3>\r\n<p>\r\n\tFirst, open the HTML page you want to edit. Add an empty <code>div</code> tag to mark the spot where you want to display something with React. For example:</p>\r\n<pre>\r\n<code>&lt;!-- ... existing HTML ... --&gt;\r\n\r\n&lt;div id=&quot;like_button_container&quot;&gt;&lt;/div&gt;\r\n\r\n&lt;!-- ... existing HTML ... --&gt;\r\n\r\n</code></pre>\r\n<p>\r\n\tWe gave this <code>&lt;div&gt;</code> a unique <code>id</code> HTML attribute. This will allow us to find it from the JavaScript code later and display a React component inside of it.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tTip</p>\r\n\t<p>\r\n\t\tYou can place a &quot;container&quot; &lt;<code>div&gt;</code> like this anywhere inside the <code>&lt;body&gt;</code> tag. You may have as many independent DOM containers on one page as you need. They are usually empty &mdash; React will replace any existing content inside DOM containers.</p>\r\n</blockquote>\r\n<h3>\r\n\tStep 2: Add the Script Tags</h3>\r\n<p>\r\n\tNext, add three <code>&lt;script&gt;</code> tags to the HTML page right before the closing <code>&lt;/body&gt;</code> tag:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>  &lt;!-- ... other HTML ... --&gt;\r\n\r\n  &lt;!-- Load React. --&gt;\r\n  &lt;!-- Note: when deploying, replace &quot;development.js&quot; with &quot;production.min.js&quot;. --&gt;\r\n  &lt;script src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n  &lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n\r\n  &lt;!-- Load our React component. --&gt;\r\n  &lt;script src=&quot;like_button.js&quot;&gt;&lt;/script&gt;\r\n\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n<p>\r\n\tThe first two tags load React. The third one will load your component code.</p>\r\n<h3>\r\n\tStep 3: Create a React Component</h3>\r\n<p>\r\n\tCreate a file called <code>like_button.js</code> next to your HTML page.</p>\r\n<p>\r\n\tOpen [[ go |&nbsp;https://cdn.rawgit.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js ]]this starter code[[ endl ]]&nbsp;and paste it into the file you created.</p>\r\n<blockquote>\r\n\t<br />\r\n\t<p>\r\n\t\tTip</p>\r\n\t<p>\r\n\t\tThis code defines a React component called <code>LikeButton</code>. Don&rsquo;t worry if you don&rsquo;t understand it yet &mdash; we&rsquo;ll cover the building blocks of React later in our hands-on tutorial and main concepts guide. For now, let&rsquo;s just get it showing on the screen!</p>\r\n</blockquote>\r\n<p>\r\n\tAfter [[ go | https://cdn.rawgit.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js]]the starter code[[ endl ]], add two lines to the bottom of <code>like_button.js</code>:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>// ... the starter code you pasted ...\r\n\r\nconst domContainer = document.querySelector(&#39;#like_button_container&#39;);\r\nReactDOM.render(e(LikeButton), domContainer);\r\n</code></pre>\r\n</div>\r\n<p>\r\n\tThese two lines of code find the <code>&lt;div&gt;</code> we added to our HTML in the first step, and then display our &ldquo;Like&rdquo; button React component inside of it.</p>\r\n<h3>\r\n\tThat&rsquo;s It!</h3>\r\n<p>\r\n\tThere is no step four. You have just added the first React component to your website.</p>\r\n<p>\r\n\tCheck out the next sections for more tips on integrating React.</p>\r\n<h3>\r\n\tTip: Reuse a Component</h3>\r\n<p>\r\n\tCommonly, you might want to display React components in multiple places on the HTML page. Here is an example that displays the &ldquo;Like&rdquo; button three times and passes some data to it:</p>\r\n<p>\r\n\t[[ go | https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605]]View the full example source code[[ endl ]]</p>\r\n<p>\r\n\t[[ go | https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/f6c882b6ae18bde42dcf6fdb751aae93495a2275.zip]]Download the full example (2KB zipped)[[ endl ]]</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote</p>\r\n\t<p>\r\n\t\tThis strategy is mostly useful while React-powered parts of the page are isolated from each other. Inside React code, it&rsquo;s easier to use [[ link |&nbsp;react-main-concepts-components-and-props]]component composition[[ endl ]] instead.</p>\r\n</blockquote>\r\n<h3>\r\n\tTip: Minify JavaScript for Production</h3>\r\n<p>\r\n\tBefore deploying your website to production, be mindful that unminifed JavaScript can significantly slow down the page for your users.</p>\r\n<p>\r\n\tIf you already minify the application scripts, your site will be production-ready if you ensure that the deployed HTML loads the versions of React ending in <code>production.min.js</code>:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>&lt;script src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot; crossorigin&gt;&lt;/script&gt;\r\n&lt;script src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot; crossorigin&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n<p>\r\n\tIf you don&rsquo;t have a minification step for your scripts, [[ go |&nbsp;https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3]]here&rsquo;s one way to set it up[[ endl ]].</p>\r\n<h2>\r\n\tOptional: Try React with JSX</h2>\r\n<p>\r\n\tIn the examples above, we only relied on features that are natively supported by the browsers. This is why we used a JavaScript function call to tell React what to display:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>const e = React.createElement;\r\n\r\n// Display a &quot;Like&quot; &lt;button&gt;\r\nreturn e(\r\n  &#39;button&#39;,\r\n  { onClick: () =&gt; this.setState({ liked: true }) },\r\n  &#39;Like&#39;\r\n);</code></pre>\r\n</div>\r\n<p>\r\n\tHowever, React also offers an option to use [[ go | https://reactjs.org/docs/introducing-jsx.html]]JSX[[ endl ]] instead:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>// Display a &quot;Like&quot; &lt;button&gt;\r\nreturn (\r\n  &lt;button onClick={() =&gt; this.setState({ liked: true })}&gt;\r\n    Like\r\n  &lt;/button&gt;\r\n);</code></pre>\r\n</div>\r\n<p>\r\n\tThese two code snippets are equivalent. While JSX is [[ link | react-advanced-guides-react-without-jsx ]]completely optional[[ endl ]], many people find it helpful for writing UI code &mdash; both with React and with other libraries.</p>\r\n<p>\r\n\tYou can play with JSX using <a href=\"https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=Q&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=es2015%2Creact%2Cstage-2%2Cstage-3&amp;prettier=true&amp;targets=Node-6.12&amp;version=6.26.0&amp;envVersion=\" target=\"_blank\">this online converter</a>.</p>\r\n<h3>\r\n\tQuickly Try JSX</h3>\r\n<p>\r\n\tThe quickest way to try JSX in your project is to add this <code>&lt;script&gt;</code> tag to your page:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>&lt;script src=&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n<p>\r\n\tNow you can use JSX in any <code>&lt;script&gt;</code> tag by adding <code>type=&quot;text/babel&quot;</code> attribute to it. Here is <a href=\"https://raw.githubusercontent.com/reactjs/reactjs.org/master/static/html/single-file-example.html\" target=\"_blank\">an example HTML file with JSX</a> that you can download and play with.</p>\r\n<p>\r\n\tThis approach is fine for learning and creating simple demos. However, it makes your website slow and isn&rsquo;t suitable for production. When you&rsquo;re ready to move forward, remove this new <code>&lt;script&gt;</code> tag and the <code>type=&quot;text/babel&quot;</code> attributes you&rsquo;ve added. Instead, in the next section you will set up a JSX preprocessor to convert all your <code>&lt;script&gt;</code> tags automatically.</p>\r\n<h3>\r\n\tAdd JSX to a Project</h3>\r\n<p>\r\n\tAdding JSX to a project doesn&rsquo;t require complicated tools like a bundler or a development server. Essentially, adding JSX is a lot like adding a CSS preprocessor. The only requirement is to have <a href=\"https://nodejs.org/en/\" target=\"_blank\">Node.js</a> installed on your computer.</p>\r\n<p>\r\n\tGo to your project folder in the terminal, and paste these two commands:</p>\r\n<ol>\r\n\t<li>\r\n\t\tStep 1: Run <code>npm init -y</code> (if it fails, <a href=\"https://gist.github.com/gaearon/246f6380610e262f8a648e3e51cad40d\" target=\"_blank\">here&rsquo;s a fix</a>)</li>\r\n\t<li>\r\n\t\tStep 2: Run <code>npm install babel-cli@6 babel-preset-react-app@3</code></li>\r\n</ol>\r\n<blockquote>\r\n\t<p>\r\n\t\tTip</p>\r\n\t<p>\r\n\t\tWe&rsquo;re using npm here only to install the JSX preprocessor; you won&rsquo;t need it for anything else. Both React and the application code can stay as <code>&lt;script&gt;</code> tags with no changes.</p>\r\n</blockquote>\r\n<p>\r\n\tCongratulations! You just added a production-ready JSX setup to your project.</p>\r\n<h3>\r\n\tRun JSX Preprocessor</h3>\r\n<p>\r\n\tCreate a folder called <code>src</code> and run this terminal command:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>npx babel --watch src --out-dir . --presets react-app/prod </code></pre>\r\n</div>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote</p>\r\n\t<p>\r\n\t\t<code>npx</code> is not a typo &mdash; it&rsquo;s a <a href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\" target=\"_blank\">package runner tool that comes with npm 5.2+</a>.</p>\r\n\t<p>\r\n\t\tIf you see an error message saying &ldquo;You have mistakenly installed the <code>babel</code> package&rdquo;, you might have missed the previous step. Perform it in the same folder, and then try again.</p>\r\n</blockquote>\r\n<p>\r\n\tDon&rsquo;t wait for it to finish &mdash; this command starts an automated watcher for JSX.</p>\r\n<p>\r\n\tIf you now create a file called <code>src/like_button.js</code> with this <a href=\"https://cdn.rawgit.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js\" target=\"_blank\">JSX starter code</a>, the watcher will create a preprocessed <code>like_button.js</code> with the plain JavaScript code suitable for the browser. When you edit the source file with JSX, the transform will re-run automatically.</p>\r\n<p>\r\n\tAs a bonus, this also lets you use modern JavaScript syntax features like classes without worrying about breaking older browsers. The tool we just used is called Babel, and you can learn more about it from <a href=\"https://babeljs.io/docs/en/babel-cli/\" target=\"_blank\">its documentation</a>.</p>"
          },
          {
            "Create a New React App": "<p>\r\n\tThis page describes a few popular React toolchains which help with tasks like:</p>\r\n<ul>\r\n\t<li>\r\n\t\tScaling to many files and components.</li>\r\n\t<li>\r\n\t\tUsing third-party libraries from npm.</li>\r\n\t<li>\r\n\t\tDetecting common mistakes early.</li>\r\n\t<li>\r\n\t\tLive-editing CSS and JS in development.</li>\r\n\t<li>\r\n\t\tOptimizing the output for production.</li>\r\n</ul>\r\n<p>\r\n\tThe toolchains recommended on this page don&rsquo;t require configuration to get started.</p>\r\n<h2>\r\n\tYou Might Not Need a Toolchain</h2>\r\n<p>\r\n\tIf you don&rsquo;t experience the problems described above or don&rsquo;t feel comfortable using JavaScript tools yet, consider [[ link | react-installation-add-react-to-a-website]]adding React as a plain&nbsp;<code>&lt;script&gt;</code>&nbsp;tag on an HTML page[[ endl ]], optionally with JSX.</p>\r\n<p>\r\n\tThis is also the easiest way to integrate React into an existing website. You can always add a larger toolchain if you find it helpful!</p>\r\n<h3>\r\n\tCreate React App</h3>\r\n<p>\r\n\t[[ go | https://github.com/facebook/create-react-app]]Create React App[[ endl ]] is a comfortable environment for learning React.</p>\r\n<p>\r\n\tIt sets up your development environment so that you can use the latest JavaScript features, provides a nice developer experience, and optimizes your app for production. You&rsquo;ll need to have Node &gt;= 6 and npm &gt;= 5.2 on your machine. To create a project, run:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>npx create-react-app my-app\r\ncd my-app\r\nnpm start</code></pre>\r\n</div>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote</p>\r\n\t<p>\r\n\t\t<code>npx</code> on the first line is not a typo &mdash; it&rsquo;s a [[ go | https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b]]package runner tool that comes with npm 5.2+[[ endl ]].</p>\r\n\t<p>\r\n\t\tCreate React App doesn&rsquo;t handle backend logic or databases; it just creates a frontend build pipeline, so you can use it with any backend you want. Under the hood, it uses [[ go | https://babeljs.io/]]Babel[[ endl ]] and [[ go | https://webpack.js.org/]]webpack[[ endl ]], but you don&rsquo;t need to know anything about them.</p>\r\n</blockquote>\r\n<p>\r\n\tWhen you&rsquo;re ready to deploy to production, running <code>npm run build</code> will create an optimized build of your app in the <code>build</code> folder. You can learn more about Create React App [[ go | https://github.com/facebook/create-react-app#create-react-app-]]from its README[[ endl ]] and the [[ go | https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#table-of-contents]]User Guide[[ endl ]].</p>\r\n<h3>\r\n\tNext.js</h3>\r\n<p>\r\n\t[[ go | https://nextjs.org/]]Next.js[[ endl ]] is a popular and lightweight framework for static and server\u2011rendered applications built with React. It includes styling and routing solutions out of the box, and assumes that you&rsquo;re using [[ go | https://nodejs.org/en/]]Node.js[[ endl ]] as the server environment.</p>\r\n<p>\r\n\tLearn Next.js from [[ go | https://nextjs.org/learn/]]its official guide[[ endl ]].</p>\r\n<h3>\r\n\tGatsby</h3>\r\n<p>\r\n\t[[ go | https://www.gatsbyjs.org/]]Gatsby[[ endl ]] is the best way to create static websites with React. It lets you use React components, but outputs pre-rendered HTML and CSS to guarantee the fastest load time.</p>\r\n<p>\r\n\tLearn Gatsby from [[ go | https://www.gatsbyjs.org/docs/]]its official guide[[ endl ]] and [[ go | https://www.gatsbyjs.org/starters/]]a gallery of starter kits[[ endl ]].</p>\r\n<h3>\r\n\tMore Flexible Toolchains</h3>\r\n<p>\r\n\tThe following toolchains offer more flexiblity and choice. We recommend them to more experienced users:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<a href=\"https://github.com/insin/nwb\" target=\"_blank\">Neutrino</a> combines the power of [[ go | https://webpack.js.org/]]webpack[[ endl ]] with the simplicity of presets, and includes a preset for [[ go |&nbsp;https://neutrinojs.org/packages/react/]]React apps[[ endl ]] and [[ go | https://neutrinojs.org/packages/react-components/]]React components[[ endl ]].</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<a href=\"https://github.com/insin/nwb\" target=\"_blank\">nwb</a> is particularly great for [[ go | https://github.com/insin/nwb/blob/master/docs/guides/ReactComponents.md#developing-react-components-and-libraries-with-nwb]]publishing React components for npm[[ endl ]]. It&nbsp;[[ go | https://github.com/insin/nwb/blob/master/docs/guides/ReactApps.md#developing-react-apps-with-nwb]]can be used[[ endl ]] for creating React apps, too.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<a href=\"https://parceljs.org/\" target=\"_blank\">Parcel</a> is a fast, zero configuration web application bundler that [[ go | https://parceljs.org/recipes.html#react]]works with React[[ endl ]].</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<a href=\"https://github.com/jaredpalmer/razzle\" target=\"_blank\">Razzle</a> is a server-rendering framework that doesn&rsquo;t require any configuration, but offers more flexibility than Next.js.</p>\r\n\t</li>\r\n</ul>\r\n<h2>\r\n\tCreating a Toolchain from Scratch</h2>\r\n<p>\r\n\tA JavaScript build toolchain typically consists of:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tA package manager, such as&nbsp;[[ go | https://yarnpkg.com/]]Yarn[[ endl ]] or [[ go | https://www.npmjs.com/]]npm[[ endl ]]. It lets you take advantage of a vast ecosystem of third-party packages, and easily install or update them.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tA bundler, such as&nbsp;[[ go | https://webpack.js.org/]]webpack[[ endl ]] or [[ go |&nbsp; https://parceljs.org/]]Parcel[[ endl ]]. It lets you write modular code and bundle it together into small packages to optimize load time.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tA compiler such as [[ go | http://babeljs.io/]]Babel[[ endl ]]. It lets you write modern JavaScript code that still works in older browsers.</p>\r\n\t</li>\r\n</ul>\r\n<p>\r\n\tIf you prefer to set up your own JavaScript toolchain from scratch,&nbsp;[[ go | https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658]]check out this guide[[ endl ]] that re-creates some of the Create React App functionality.</p>\r\n<p>\r\n\tDon&rsquo;t forget to ensure your custom toolchain&nbsp;[[ go | https://reactjs.org/docs/optimizing-performance.html#use-the-production-build]]is correctly set up for production[[ endl ]].</p>"
          },
          {
            "CDN Links": "<p>\r\n\tBoth React and ReactDOM are available over a CDN.</p>\r\n<div>\r\n\t<pre>\r\n\t<code>&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.development.js&quot;&gt;&lt;/script&gt;\r\n&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n<p>\r\n\tThe versions above are only meant for development, and are not suitable for production. Minified and optimized production versions of React are available at:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>&lt;script crossorigin src=&quot;https://unpkg.com/react@16/umd/react.production.min.js&quot;&gt;&lt;/script&gt;\r\n&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@16/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n<p>\r\n\tTo load a specific version of <code>react</code> and <code>react-dom</code>, replace <code>16</code> with the version number.</p>\r\n<h3>\r\n\tWhy the <code>crossorigin</code> Attribute?</h3>\r\n<p>\r\n\tIf you serve React from a CDN, we recommend to keep the [[ go | https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes]]crossorigin [[ endl ]] attribute set:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>&lt;script crossorigin src=&quot;...&quot;&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n<p>\r\n\tWe also recommend to verify that the CDN you are using sets the <code>Access-Control-Allow-Origin: *</code> HTTP header:</p>\r\n<p>\r\n\t[[ image(react/installation/cdn-cors-header-89baed0a6540f29e954065ce04661048-dd807.png, center) ]]</p>\r\n<p>\r\n\tThis enables a better <a href=\"https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html\" target=\"_blank\">error handling experience</a>&nbsp;in React 16 and later.</p>"
          },
          {
            "Main Concepts of React": ""
          }
        ]
      ]
    }
  }
]