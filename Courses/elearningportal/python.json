[
  {
    "query": "python-tutorial",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "Python Tutorial",
      "lessons": [
        {
          "title": "Control Flow Tools in Python",
          "topics": []
        },
        {
          "title": "Data Structures in Python",
          "topics": []
        },
        {
          "title": "Modules in Python",
          "topics": []
        },
        {
          "title": "Standard Library in Python",
          "topics": []
        },
        {
          "title": "Interactive Mode in Python",
          "topics": []
        },
        {
          "title": "Functional Programming in Python",
          "topics": []
        }
      ],
      "content": [
        {
          "Control Flow Tools in Python": {
            "content": "<p>\r\n\tBesides the [[ link | python-reference-compound-statements#2]]<code><span style=\"font-family: monospace;\">w</span><span style=\"font-family: monospace;\">hile</span></code>[[ endl ]]&nbsp;statement just introduced, Python knows the usual control flow statements known from other languages, with some twists.</p>\r\n<h2>\r\n\t<a href=\"python-reference-compound-statements#1\"><code style=\"font-size: 15px;\">if</code></a>&nbsp;Statements</h2>\r\n<p>\r\n\tPerhaps the most well-known statement type is the [[ link | python-reference-compound-statements#1]]<code>if</code>[[ endl ]] statement. For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; x = int(input(&quot;Please enter an integer: &quot;))\r\nPlease enter an integer: 42\r\n&gt;&gt;&gt; if x &lt; 0:\r\n...     x = 0\r\n...     print(&#39;Negative changed to zero&#39;)\r\n... elif x == 0:\r\n...     print(&#39;Zero&#39;)\r\n... elif x == 1:\r\n...     print(&#39;Single&#39;)\r\n... else:\r\n...     print(&#39;More&#39;)\r\n...\r\nMore\r\n</code></pre>\r\n<p>\r\n\tThere can be zero or more [[ link | python-reference-compound-statements#1]]<code>elif</code>[[ endl ]] parts, and the [[ link | python-reference-compound-statements#1]]<code>else</code>[[ endl ]] part is optional. The keyword &lsquo;[[ link | python-reference-compound-statements#1]]<code>elif</code>[[ endl ]]&rsquo; is short for &lsquo;else if&rsquo;, and is useful to avoid excessive indentation. An [[ link | python-reference-compound-statements#1]]<code>if</code>[[ endl ]] &hellip; [[ link | python-reference-compound-statements#1]]<code>elif</code>[[ endl ]]&hellip; [[ link | python-reference-compound-statements#1]]<code>elif</code>[[ endl ]] &hellip; sequence is a substitute for the <code>switch</code> or <code>case</code> statements found in other languages.</p>\r\n<h2>\r\n\t<a href=\"python-reference-compound-statements#3\"><code style=\"font-size: 15px;\">for</code></a>&nbsp;Statements</h2>\r\n<p>\r\n\tThe [[ link | python-reference-compound-statements#3]]<code>for</code>[[ endl ]] statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python&rsquo;s [[ link | python-reference-compound-statements#3]]<code>for</code>[[ endl ]] statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended):</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; # Measure some strings:\r\n... words = [&#39;cat&#39;, &#39;window&#39;, &#39;defenestrate&#39;]\r\n&gt;&gt;&gt; for w in words:\r\n...     print(w, len(w))\r\n...\r\ncat 3\r\nwindow 6\r\ndefenestrate 12\r\n</code></pre>\r\n<p>\r\n\tIf you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; for w in words[:]:  # Loop over a slice copy of the entire list.\r\n...     if len(w) &gt; 6:\r\n...         words.insert(0, w)\r\n...\r\n&gt;&gt;&gt; words\r\n[&#39;defenestrate&#39;, &#39;cat&#39;, &#39;window&#39;, &#39;defenestrate&#39;]\r\n</code></pre>\r\n<p>\r\n\tWith <code>for w in words:</code>, the example would attempt to create an infinite list, inserting <code>defenestrate</code> over and over again.</p>\r\n<h2>\r\n\tThe <a href=\"https://docs.python.org/3/library/stdtypes.html#range\" target=\"_blank\"><code>range()</code></a> Function</h2>\r\n<p>\r\n\tIf you do need to iterate over a sequence of numbers, the built-in function <a href=\"https://docs.python.org/3/library/stdtypes.html#range\" target=\"_blank\"><code>range()</code></a> comes in handy. It generates arithmetic progressions:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; for i in range(5):\r\n...     print(i)\r\n...\r\n0\r\n1\r\n2\r\n3\r\n4\r\n</code></pre>\r\n<p>\r\n\tThe given end point is never part of the generated sequence; <code>range(10)</code> generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the &lsquo;step&rsquo;):</p>\r\n<pre>\r\n<code class=\"python\">range(5, 10)\r\n   5, 6, 7, 8, 9\r\n\r\nrange(0, 10, 3)\r\n   0, 3, 6, 9\r\n\r\nrange(-10, -100, -30)\r\n  -10, -40, -70\r\n</code></pre>\r\n<p>\r\n\tTo iterate over the indices of a sequence, you can combine <a href=\"https://docs.python.org/3/library/stdtypes.html#range\" target=\"_blank\"><code>range()</code></a> and <a href=\"https://docs.python.org/3/library/functions.html#len\" target=\"_blank\"><code>len()</code></a> as follows:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; a = [&#39;Mary&#39;, &#39;had&#39;, &#39;a&#39;, &#39;little&#39;, &#39;lamb&#39;]\r\n&gt;&gt;&gt; for i in range(len(a)):\r\n...     print(i, a[i])\r\n...\r\n0 Mary\r\n1 had\r\n2 a\r\n3 little\r\n4 lamb\r\n</code></pre>\r\n<p>\r\n\tIn most such cases, however, it is convenient to use the <a href=\"https://docs.python.org/3/library/functions.html#enumerate\" target=\"_blank\"><code>enumerate()</code></a> function, see [[ link | python-tutorial-data-structures#10]]Looping Techniques[[ endl ]].</p>\r\n<p>\r\n\tA strange thing happens if you just print a range:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; print(range(10))\r\nrange(0, 10)\r\n</code></pre>\r\n<p>\r\n\tIn many ways the object returned by <a href=\"https://docs.python.org/3/library/stdtypes.html#range\" target=\"_blank\"><code>range()</code></a> behaves as if it is a list, but in fact it isn&rsquo;t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn&rsquo;t really make the list, thus saving space.</p>\r\n<p>\r\n\tWe say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the [[ link | python-reference-compound-statements#3]]<code>for</code>[[ endl ]] statement is such an iterator. The function <a href=\"https://docs.python.org/3/library/stdtypes.html#list\" target=\"_blank\"><code>list()</code></a> is another; it creates lists from iterables:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; list(range(5))\r\n[0, 1, 2, 3, 4]\r\n</code></pre>\r\n<p>\r\n\tLater we will see more functions that return iterables and take iterables as argument.</p>\r\n<h2>\r\n\t<a href=\"https://docs.python.org/3/reference/simple_stmts.html#break\"><code>break</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#break\"> </a>and <a href=\"https://docs.python.org/3/reference/simple_stmts.html#continue\"><code>continue</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#continue\"> </a>Statements, and <a href=\"python-reference-compound-statements#1\"><code>else</code></a>&nbsp;Clauses on Loops</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/reference/simple_stmts.html#break\" target=\"_blank\"><code>break</code></a> statement, like in C, breaks out of the innermost enclosing [[ link | python-reference-compound-statements#3]]<code>for</code>[[ endl ]] or [[ link | python-reference-compound-statements#2]]<code>while</code>[[ endl ]] loop.</p>\r\n<p>\r\n\tLoop statements may have an <code>else</code> clause; it is executed when the loop terminates through exhaustion of the list (with [[ link | python-reference-compound-statements#3]]<code>for</code>[[ endl ]]) or when the condition becomes false (with [[ link | python-reference-compound-statements#2]]<code>while</code>[[ endl ]] ), but not when the loop is terminated by a <a href=\"https://docs.python.org/3/reference/simple_stmts.html#break\"><code>break</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#break\"> </a>statement. This is exemplified by the following loop, which searches for prime numbers:</p>\r\n<p>\r\n\t&nbsp;</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; for n in range(2, 10):\r\n...     for x in range(2, n):\r\n...         if n % x == 0:\r\n...             print(n, &#39;equals&#39;, x, &#39;*&#39;, n//x)\r\n...             break\r\n...     else:\r\n...         # loop fell through without finding a factor\r\n...         print(n, &#39;is a prime number&#39;)\r\n...\r\n2 is a prime number\r\n3 is a prime number\r\n4 equals 2 * 2\r\n5 is a prime number\r\n6 equals 2 * 3\r\n7 is a prime number\r\n8 equals 2 * 4\r\n9 equals 3 * 3\r\n</code></pre>\r\n<p>\r\n\t(Yes, this is the correct code. Look closely: the <code>else</code> clause belongs to the [[ link | python-reference-compound-statements#3]]<code>for</code>[[ endl ]] loop, <strong>not</strong> the [[ link | python-reference-compound-statements#1]]<code>if</code>[[ endl ]] statement.)</p>\r\n<p>\r\n\tWhen used with a loop, the <code>else</code> clause has more in common with the <code>else</code> clause of a [[ link | python-reference-compound-statements#4]]<code>try</code>[[ endl ]] statement than it does that of [[ link | python-reference-compound-statements#1]]<code>if</code>[[ endl ]] statements: a [[ link | python-reference-compound-statements#4]]<code>try</code>[[ endl ]] statement&rsquo;s <code>else</code> clause runs when no exception occurs, and a loop&rsquo;s <code>else</code> clause runs when no <code>break</code> occurs. For more on the [[ link | python-reference-compound-statements#4]]<code>try</code>[[ endl ]] statement and exceptions, see <a href=\"python-tutorial-errors-exceptions\" target=\"_blank\">Handling Exceptions</a>.</p>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/reference/simple_stmts.html#continue\"><code>continue</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#continue\"> </a>statement, also borrowed from C, continues with the next iteration of the loop:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; for num in range(2, 10):\r\n...     if num % 2 == 0:\r\n...         print(&quot;Found an even number&quot;, num)\r\n...         continue\r\n...     print(&quot;Found a number&quot;, num)\r\nFound an even number 2\r\nFound a number 3\r\nFound an even number 4\r\nFound a number 5\r\nFound an even number 6\r\nFound a number 7\r\nFound an even number 8\r\nFound a number 9\r\n</code></pre>\r\n<h2>\r\n\t<a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"><code>pass</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"> </a>Statements</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"><code>pass</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"> </a>statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; while True:\r\n...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)\r\n...\r\n</code></pre>\r\n<p>\r\n\tThis is commonly used for creating minimal classes:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; class MyEmptyClass:\r\n...     pass\r\n...\r\n</code></pre>\r\n<p>\r\n\tAnother place <a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"><code>pass</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"> </a>can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The <a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"><code>pass</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#pass\"> </a>is silently ignored:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def initlog(*args):\r\n...     pass   # Remember to implement this!\r\n...\r\n</code></pre>\r\n<h2>\r\n\twith Statements</h2>\r\n<p>\r\n\twith statement in Python is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common resources like file streams. Observe the following code example on how the use of with statement makes code cleaner.</p>\r\n<pre>\r\n<code class=\"python\"># file handling \r\n\r\n# 1) without using with statement \r\nfile = open(&#39;file_path&#39;, &#39;w&#39;) \r\nfile.write(&#39;hello world !&#39;) \r\nfile.close() \r\n\r\n# 2) without using with statement \r\nfile = open(&#39;file_path&#39;, &#39;w&#39;) \r\ntry: \r\n\tfile.write(&#39;hello world&#39;) \r\nfinally: \r\n\tfile.close() \r\n\r\n# using with statement \r\nwith open(&#39;file_path&#39;, &#39;w&#39;) as file: \r\n\tfile.write(&#39;hello world !&#39;) \r\n</code></pre>\r\n<p>\r\n\tNotice that unlike the first two implementations, there is no need to call file.close() when using with statement. The with statement itself ensures proper acquisition and release of resources. An exception during the file.write() call in the first implementation can prevent the file from closing properly which may introduce several bugs in the code, i.e. many changes in files do not go into effect until the file is properly closed.</p>\r\n<p>\r\n\tThe second approach in the above example takes care of all the exceptions but using the with statement makes the code compact and much more readable. Thus, with statement helps avoiding bugs and leaks by ensuring that a resource is properly released when the code using the resource is completely executed. The with statement is popularly used with file streams, as shown above and with Locks, sockets, subprocesses and telnets etc.</p>\r\n<h2>\r\n\tDefining Functions</h2>\r\n<p>\r\n\tWe can create a function that writes the Fibonacci series to an arbitrary boundary:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def fib(n):    # write Fibonacci series up to n\r\n...     &quot;&quot;&quot;Print a Fibonacci series up to n.&quot;&quot;&quot;\r\n...     a, b = 0, 1\r\n...     while a &lt; n:\r\n...         print(a, end=&#39; &#39;)\r\n...         a, b = b, a+b\r\n...     print()\r\n...\r\n&gt;&gt;&gt; # Now call the function we just defined:\r\n... fib(2000)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597\r\n</code></pre>\r\n<p>\r\n\tThe keyword <a href=\"https://docs.python.org/3/reference/compound_stmts.html#def\" target=\"_blank\"><code>def</code></a> introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.</p>\r\n<p>\r\n\tThe first statement of the function body can optionally be a string literal; this string literal is the function&rsquo;s documentation string, or docstring. (More about docstrings can be found in the section <a href=\"python-tutorial-control-flow-tools#13\" target=\"_blank\">Documentation Strings</a>.) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it&rsquo;s good practice to include docstrings in code that you write, so make a habit of it.</p>\r\n<p>\r\n\tThe execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a <a href=\"https://docs.python.org/3/reference/simple_stmts.html#global\"><code>global</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#global\"> </a>statement), although they may be referenced.</p>\r\n<p>\r\n\tThe actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object).</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tActually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list).</p>\r\n</blockquote>\r\n<p>\r\n\tWhen a function calls another function, a new local symbol table is created for that call.</p>\r\n<p>\r\n\tA function definition introduces the function name in the current symbol table. The value of the function name has a type that is recognized by the interpreter as a user-defined function. This value can be assigned to another name which can then also be used as a function. This serves as a general renaming mechanism:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; fib\r\n&lt;function fib at 10042ed0&gt;\r\n&gt;&gt;&gt; f = fib\r\n&gt;&gt;&gt; f(100)\r\n0 1 1 2 3 5 8 13 21 34 55 89\r\n</code></pre>\r\n<p>\r\n\tComing from other languages, you might object that <code>fib</code> is not a function but a procedure since it doesn&rsquo;t return a value. In fact, even functions without a <a href=\"https://docs.python.org/3/reference/simple_stmts.html#return\"><code>return</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#return\"> </a>statement do return a value, albeit a rather boring one. This value is called <code>None</code> (it&rsquo;s a built-in name). Writing the value <code>None</code> is normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using <a href=\"https://docs.python.org/3/library/functions.html#print\" target=\"_blank\"><code>print()</code></a>:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; fib(0)\r\n&gt;&gt;&gt; print(fib(0))\r\nNone\r\n</code></pre>\r\n<p>\r\n\tIt is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def fib2(n):  # return Fibonacci series up to n\r\n...     &quot;&quot;&quot;Return a list containing the Fibonacci series up to n.&quot;&quot;&quot;\r\n...     result = []\r\n...     a, b = 0, 1\r\n...     while a &lt; n:\r\n...         result.append(a)    # see below\r\n...         a, b = b, a+b\r\n...     return result\r\n...\r\n&gt;&gt;&gt; f100 = fib2(100)    # call it\r\n&gt;&gt;&gt; f100                # write the result\r\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\r\n</code></pre>\r\n<p>\r\n\tThis example, as usual, demonstrates some new Python features:</p>\r\n<ul>\r\n\t<li>\r\n\t\tThe <a href=\"https://docs.python.org/3/reference/simple_stmts.html#return\"><code>return</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#return\"> </a>statement returns with a value from a function. <code>return</code> without an expression argument returns <code>None</code>. Falling off the end of a function also returns <code>None</code>.</li>\r\n\t<li>\r\n\t\tThe statement <code>result.append(a)</code> calls a method of the list object <code>result</code>. A method is a function that &lsquo;belongs&rsquo; to an object and is named <code>obj.methodname</code>, where <code>obj</code> is some object (this may be an expression), and <code>methodname</code> is the name of a method that is defined by the object&rsquo;s type. Different types define different methods. Methods of different types may have the same name without causing ambiguity. (It is possible to define your own object types and methods, using classes, see <a href=\"python-tutorial-classes\" target=\"_blank\">Classes</a>) The method <code>append()</code> shown in the example is defined for list objects; it adds a new element at the end of the list. In this example it is equivalent to <code>result = result + [a]</code>, but more efficient.</li>\r\n</ul>\r\n<h2>\r\n\tDecorators</h2>\r\n<p>\r\n\tA decorator takes in a function, adds some functionality and returns it.</p>\r\n<p>\r\n\tA decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are usually called before the definition of a function you want to decorate. In this tutorial, we&#39;ll show the reader how they can use decorators in their Python functions.</p>\r\n<p>\r\n\tFunctions in Python are first class citizens. This means that they support operations such as being passed as an argument, returned from a function, modified, and assigned to a variable. This is a fundamental concept to understand before we delve into creating Python decorators.</p>\r\n<p>\r\n\tExample:</p>\r\n<pre>\r\n<code class=\"python\">def uppercase_decorator(function):\r\n    def wrapper():\r\n        func = function()\r\n        make_uppercase = func.upper()\r\n        return make_uppercase\r\n\r\n    return wrapper\r\n\r\n\r\n@uppercase_decorator\r\ndef say_hi():\r\n    return &#39;hello there&#39;\r\n</code></pre>\r\n<p>\r\n\tWill return:</p>\r\n<pre>\r\nHELLO THERE\r\n</pre>\r\n<h2>\r\n\tMore on Defining Functions</h2>\r\n<p>\r\n\tIt is also possible to define functions with a variable number of arguments. There are three forms, which can be combined.</p>\r\n<h3>\r\n\tDefault Argument Values</h3>\r\n<p>\r\n\tThe most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow. For example:</p>\r\n<pre>\r\n<code class=\"python\">def ask_ok(prompt, retries=4, reminder=&#39;Please try again!&#39;):\r\n    while True:\r\n        ok = input(prompt)\r\n        if ok in (&#39;y&#39;, &#39;ye&#39;, &#39;yes&#39;):\r\n            return True\r\n        if ok in (&#39;n&#39;, &#39;no&#39;, &#39;nop&#39;, &#39;nope&#39;):\r\n            return False\r\n        retries = retries - 1\r\n        if retries &lt; 0:\r\n            raise ValueError(&#39;invalid user response&#39;)\r\n        print(reminder)\r\n</code></pre>\r\n<p>\r\n\tThis function can be called in several ways:</p>\r\n<ul>\r\n\t<li>\r\n\t\tgiving only the mandatory argument: <code>ask_ok(&#39;Do you really want to quit?&#39;)</code></li>\r\n\t<li>\r\n\t\tgiving one of the optional arguments: <code>ask_ok(&#39;OK to overwrite the file?&#39;, 2)</code></li>\r\n\t<li>\r\n\t\tor even giving all arguments: <code>ask_ok(&#39;OK to overwrite the file?&#39;, 2, &#39;Come on, only yes or no!&#39;)</code></li>\r\n</ul>\r\n<p>\r\n\tThis example also introduces the <a href=\"https://docs.python.org/3/reference/expressions.html#in\"><code>in</code></a><a href=\"https://docs.python.org/3/reference/expressions.html#in\"> </a>keyword. This tests whether or not a sequence contains a certain value.</p>\r\n<p>\r\n\tThe default values are evaluated at the point of function definition in the defining scope, so that</p>\r\n<pre>\r\n<code class=\"python\">i = 5\r\n\r\ndef f(arg=i):\r\n    print(arg)\r\n\r\ni = 6\r\nf()\r\n</code></pre>\r\n<p>\r\n\twill print <code>5</code>.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\t<strong>Important warning:</strong> The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes.</p>\r\n</blockquote>\r\n<p>\r\n\tFor example, the following function accumulates the arguments passed to it on subsequent calls:</p>\r\n<pre>\r\n<code class=\"python\">def f(a, L=[]):\r\n    L.append(a)\r\n    return L\r\n\r\nprint(f(1))\r\nprint(f(2))\r\nprint(f(3))\r\n</code></pre>\r\n<p>\r\n\tThis will print</p>\r\n<pre>\r\n<code class=\"python\">[1]\r\n[1, 2]\r\n[1, 2, 3]\r\n</code></pre>\r\n<p>\r\n\tIf you don&rsquo;t want the default to be shared between subsequent calls, you can write the function like this instead:</p>\r\n<pre>\r\n<code class=\"python\">def f(a, L=None):\r\n    if L is None:\r\n        L = []\r\n    L.append(a)\r\n    return L\r\n</code></pre>\r\n<h3>\r\n\tKeyword Arguments</h3>\r\n<p>\r\n\tFunctions can also be called using <a href=\"https://docs.python.org/3/glossary.html#term-keyword-argument\" target=\"_blank\">keyword arguments</a> of the form <code>kwarg=value</code>. For instance, the following function:</p>\r\n<pre>\r\n<code class=\"python\">def parrot(voltage, state=&#39;a stiff&#39;, action=&#39;voom&#39;, type=&#39;Norwegian Blue&#39;):\r\n    print(&quot;-- This parrot wouldn&#39;t&quot;, action, end=&#39; &#39;)\r\n    print(&quot;if you put&quot;, voltage, &quot;volts through it.&quot;)\r\n    print(&quot;-- Lovely plumage, the&quot;, type)\r\n    print(&quot;-- It&#39;s&quot;, state, &quot;!&quot;)\r\n</code></pre>\r\n<p>\r\n\taccepts one required argument (<code>voltage</code>) and three optional arguments (<code>state</code>, <code>action</code>, and <code>type</code>). This function can be called in any of the following ways:</p>\r\n<pre>\r\n<code class=\"python\">parrot(1000)                                          # 1 positional argument\r\nparrot(voltage=1000)                                  # 1 keyword argument\r\nparrot(voltage=1000000, action=&#39;VOOOOOM&#39;)             # 2 keyword arguments\r\nparrot(action=&#39;VOOOOOM&#39;, voltage=1000000)             # 2 keyword arguments\r\nparrot(&#39;a million&#39;, &#39;bereft of life&#39;, &#39;jump&#39;)         # 3 positional arguments\r\nparrot(&#39;a thousand&#39;, state=&#39;pushing up the daisies&#39;)  # 1 positional, 1 keyword\r\n</code></pre>\r\n<p>\r\n\tbut all the following calls would be invalid:</p>\r\n<pre>\r\n<code class=\"python\">parrot()                     # required argument missing\r\nparrot(voltage=5.0, &#39;dead&#39;)  # non-keyword argument after a keyword argument\r\nparrot(110, voltage=220)     # duplicate value for the same argument\r\nparrot(actor=&#39;John Cleese&#39;)  # unknown keyword argument\r\n</code></pre>\r\n<p>\r\n\tIn a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g. <code>actor</code> is not a valid argument for the <code>parrot</code> function), and their order is not important. This also includes non-optional arguments (e.g. <code>parrot(voltage=1000)</code> is valid too). No argument may receive a value more than once. Here&rsquo;s an example that fails due to this restriction:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def function(a):\r\n...     pass\r\n...\r\n&gt;&gt;&gt; function(0, a=0)\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\nTypeError: function() got multiple values for keyword argument &#39;a&#39;\r\n</code></pre>\r\n<p>\r\n\tWhen a final formal parameter of the form <code>**name</code> is present, it receives a dictionary (see <a href=\"https://docs.python.org/3/library/stdtypes.html#typesmapping\" target=\"_blank\">Mapping Types &mdash; dict</a>) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form <code>*name</code> (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list. (<code>*name</code> must occur before <code>**name</code>.) For example, if we define a function like this:</p>\r\n<pre>\r\n<code class=\"python\">def cheeseshop(kind, *arguments, **keywords):\r\n    print(&quot;-- Do you have any&quot;, kind, &quot;?&quot;)\r\n    print(&quot;-- I&#39;m sorry, we&#39;re all out of&quot;, kind)\r\n    for arg in arguments:\r\n        print(arg)\r\n    print(&quot;-&quot; * 40)\r\n    for kw in keywords:\r\n        print(kw, &quot;:&quot;, keywords[kw])\r\n</code></pre>\r\n<p>\r\n\tIt could be called like this:</p>\r\n<pre>\r\n<code class=\"python\">cheeseshop(&quot;Limburger&quot;, &quot;It&#39;s very runny, sir.&quot;,\r\n           &quot;It&#39;s really very, VERY runny, sir.&quot;,\r\n           shopkeeper=&quot;Michael Palin&quot;,\r\n           client=&quot;John Cleese&quot;,\r\n           sketch=&quot;Cheese Shop Sketch&quot;)\r\n</code></pre>\r\n<p>\r\n\tand of course it would print:</p>\r\n<pre>\r\n<code class=\"python\">-- Do you have any Limburger ?\r\n-- I&#39;m sorry, we&#39;re all out of Limburger\r\nIt&#39;s very runny, sir.\r\nIt&#39;s really very, VERY runny, sir.\r\n----------------------------------------\r\nshopkeeper : Michael Palin\r\nclient : John Cleese\r\nsketch : Cheese Shop Sketch\r\n</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tNote that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call.</p>\r\n</blockquote>\r\n<h3>\r\n\tArbitrary Argument Lists</h3>\r\n<p>\r\n\tFinally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see <a href=\"python-tutorial-data-structures#7\" target=\"_blank\">Tuples and Sequences</a>). Before the variable number of arguments, zero or more normal arguments may occur.</p>\r\n<pre>\r\n<code class=\"python\">def write_multiple_items(file, separator, *args):\r\n    file.write(separator.join(args))\r\n</code></pre>\r\n<p>\r\n\tNormally, these <code>variadic</code> arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the <code>*args</code> parameter are &lsquo;keyword-only&rsquo; arguments, meaning that they can only be used as keywords rather than positional arguments.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def concat(*args, sep=&quot;/&quot;):\r\n...     return sep.join(args)\r\n...\r\n&gt;&gt;&gt; concat(&quot;earth&quot;, &quot;mars&quot;, &quot;venus&quot;)\r\n&#39;earth/mars/venus&#39;\r\n&gt;&gt;&gt; concat(&quot;earth&quot;, &quot;mars&quot;, &quot;venus&quot;, sep=&quot;.&quot;)\r\n&#39;earth.mars.venus&#39;\r\n</code></pre>\r\n<h3>\r\n\tArbitrary Keyword Argument Lists</h3>\r\n<p>\r\n\tThe special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star. The reason is because the double star allows us to pass through keyword arguments (and any number of them).</p>\r\n<p>\r\n\tA keyword argument is where you provide a name to the variable as you pass it into the function.</p>\r\n<p>\r\n\tOne can think of the kwargs as being a dictionary that maps each keyword to the value that we pass alongside it. That is why when we iterate over the kwargs there doesn&rsquo;t seem to be any order in which they were printed out.</p>\r\n<pre>\r\n<code class=\"python\"># Python program to illustrate \r\n# *kwargs for variable number of keyword arguments \r\n\r\ndef myFun(**kwargs): \r\n\tfor key, value in kwargs.items(): \r\n\t\tprint (&quot;%s == %s&quot; %(key, value)) \r\n\r\n# Driver code \r\nmyFun(first =&#39;Geeks&#39;, mid =&#39;for&#39;, last=&#39;Geeks&#39;)\t \r\n</code></pre>\r\n<h3>\r\n\tUnpacking Argument Lists</h3>\r\n<p>\r\n\tThe reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in <a href=\"https://docs.python.org/3/library/stdtypes.html#range\" target=\"_blank\"><code>range()</code></a> function expects separate start and stop arguments. If they are not available separately, write the function call with the <code>*</code>-operator to unpack the arguments out of a list or tuple:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; list(range(3, 6))            # normal call with separate arguments\r\n[3, 4, 5]\r\n&gt;&gt;&gt; args = [3, 6]\r\n&gt;&gt;&gt; list(range(*args))            # call with arguments unpacked from a list\r\n[3, 4, 5]\r\n</code></pre>\r\n<p>\r\n\tIn the same fashion, dictionaries can deliver keyword arguments with the <code>**</code>-operator:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def parrot(voltage, state=&#39;a stiff&#39;, action=&#39;voom&#39;):\r\n...     print(&quot;-- This parrot wouldn&#39;t&quot;, action, end=&#39; &#39;)\r\n...     print(&quot;if you put&quot;, voltage, &quot;volts through it.&quot;, end=&#39; &#39;)\r\n...     print(&quot;E&#39;s&quot;, state, &quot;!&quot;)\r\n...\r\n&gt;&gt;&gt; d = {&quot;voltage&quot;: &quot;four million&quot;, &quot;state&quot;: &quot;bleedin&#39; demised&quot;, &quot;action&quot;: &quot;VOOM&quot;}\r\n&gt;&gt;&gt; parrot(**d)\r\n-- This parrot wouldn&#39;t VOOM if you put four million volts through it. E&#39;s bleedin&#39; demised !\r\n</code></pre>\r\n<h3>\r\n\tLambda Expressions</h3>\r\n<p>\r\n\tSmall anonymous functions can be created with the <a href=\"https://docs.python.org/3/reference/expressions.html#lambda\"><code>lambda</code></a><a href=\"https://docs.python.org/3/reference/expressions.html#lambda\"> </a>keyword. This function returns the sum of its two arguments: <code>lambda a, b: a+b</code>. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def make_incrementor(n):\r\n...     return lambda x: x + n\r\n...\r\n&gt;&gt;&gt; f = make_incrementor(42)\r\n&gt;&gt;&gt; f(0)\r\n42\r\n&gt;&gt;&gt; f(1)\r\n43\r\n</code></pre>\r\n<p>\r\n\tThe above example uses a lambda expression to return a function. Another use is to pass a small function as an argument:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; pairs = [(1, &#39;one&#39;), (2, &#39;two&#39;), (3, &#39;three&#39;), (4, &#39;four&#39;)]\r\n&gt;&gt;&gt; pairs.sort(key=lambda pair: pair[1])\r\n&gt;&gt;&gt; pairs\r\n[(4, &#39;four&#39;), (1, &#39;one&#39;), (3, &#39;three&#39;), (2, &#39;two&#39;)]\r\n</code></pre>\r\n<h3>\r\n\tDocumentation Strings</h3>\r\n<p>\r\n\tHere are some conventions about the content and formatting of documentation strings.</p>\r\n<p>\r\n\tThe first line should always be a short, concise summary of the object&rsquo;s purpose. For brevity, it should not explicitly state the object&rsquo;s name or type, since these are available by other means (except if the name happens to be a verb describing a function&rsquo;s operation). This line should begin with a capital letter and end with a period.</p>\r\n<p>\r\n\tIf there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object&rsquo;s calling conventions, its side effects, etc.</p>\r\n<p>\r\n\tThe Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired. This is done using the following convention. The first non-blank line after the first line of the string determines the amount of indentation for the entire documentation string. (We can&rsquo;t use the first line since it is generally adjacent to the string&rsquo;s opening quotes so its indentation is not apparent in the string literal.) Whitespace &ldquo;equivalent&rdquo; to this indentation is then stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally).</p>\r\n<p>\r\n\tHere is an example of a multi-line docstring:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def my_function():\r\n...     &quot;&quot;&quot;Do nothing, but document it.\r\n...\r\n...     No, really, it doesn&#39;t do anything.\r\n...     &quot;&quot;&quot;\r\n...     pass\r\n...\r\n&gt;&gt;&gt; print(my_function.__doc__)\r\nDo nothing, but document it.\r\n\r\n    No, really, it doesn&#39;t do anything.\r\n</code></pre>\r\n<h3>\r\n\tFunction Annotations</h3>\r\n<p>\r\n\t<a href=\"https://docs.python.org/3/reference/compound_stmts.html#function\" target=\"_blank\">Function annotations</a> are completely optional metadata information about the types used by user-defined functions (see <a href=\"https://www.python.org/dev/peps/pep-3107\" target=\"_blank\"><strong>PEP 3107</strong></a> and <a href=\"https://www.python.org/dev/peps/pep-0484\" target=\"_blank\"><strong>PEP 484</strong></a> for more information).</p>\r\n<p>\r\n\tAnnotations are stored in the <code>__annotations__</code> attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal <code>-&gt;</code>, followed by an expression, between the parameter list and the colon denoting the end of the <a href=\"https://docs.python.org/3/reference/compound_stmts.html#def\"><code>def</code></a><a href=\"https://docs.python.org/3/reference/compound_stmts.html#def\"> </a>statement. The following example has a positional argument, a keyword argument, and the return value annotated:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; def f(ham: str, eggs: str = &#39;eggs&#39;) -&gt; str:\r\n...     print(&quot;Annotations:&quot;, f.__annotations__)\r\n...     print(&quot;Arguments:&quot;, ham, eggs)\r\n...     return ham + &#39; and &#39; + eggs\r\n...\r\n&gt;&gt;&gt; f(&#39;spam&#39;)\r\nAnnotations: {&#39;ham&#39;: &lt;class &#39;str&#39;&gt;, &#39;return&#39;: &lt;class &#39;str&#39;&gt;, &#39;eggs&#39;: &lt;class &#39;str&#39;&gt;}\r\nArguments: spam eggs\r\n&#39;spam and eggs&#39;\r\n</code></pre>\r\n<h2>\r\n\tIntermezzo: Coding Style</h2>\r\n<p>\r\n\tNow that you are about to write longer, more complex pieces of Python, it is a good time to talk about coding style. Most languages can be written (or more concise, formatted) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that.</p>\r\n<p>\r\n\tFor Python, <a href=\"https://www.python.org/dev/peps/pep-0008\" target=\"_blank\"><strong>PEP 8</strong></a> has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Every Python developer should read it at some point; here are the most important points extracted for you:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tUse 4-space indentation, and no tabs.</p>\r\n\t\t<p>\r\n\t\t\t4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tWrap lines so that they don&rsquo;t exceed 79 characters.</p>\r\n\t\t<p>\r\n\t\t\tThis helps users with small displays and makes it possible to have several code files side-by-side on larger displays.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tUse blank lines to separate functions and classes, and larger blocks of code inside functions.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tWhen possible, put comments on a line of their own.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tUse docstrings.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tUse spaces around operators and after commas, but not directly inside bracketing constructs: <code>a = f(1, 2) + g(3, 4)</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tName your classes and functions consistently; the convention is to use <code>CamelCase</code> for classes and <code>lower_case_with_underscores</code> for functions and methods. Always use <code>self</code> as the name for the first method argument (see <a href=\"python-tutorial-classes#4\" target=\"_blank\">A First Look at Classes</a> for more on classes and methods).</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tDon&rsquo;t use fancy encodings if your code is meant to be used in international environments. Python&rsquo;s default, UTF-8, or even plain ASCII work best in any case.</p>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\tLikewise, don&rsquo;t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</p>\r\n\t</li>\r\n</ul>"
          }
        },
        {
          "Data Structures in Python": {
            "content": "<p>\r\n\tThis chapter describes some things you&rsquo;ve learned about python data types in more detail, and adds some new things as well.</p>\r\n<h2>\r\n\tMore on Lists</h2>\r\n<p>\r\n\tThe list data type has some more methods. Here are all of the methods of list objects:</p>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>append</code>(x)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tAdd an item to the end of the list. Equivalent to <code>a[len(a):] = [x]</code>.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>extend</code></code><code class=\"python\">(</code><code class=\"python\">iterable)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tExtend the list by appending all the items from the iterable. Equivalent to <code>a[len(a):] = iterable</code>.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>insert</code></code><code class=\"python\">(</code><code class=\"python\">i, x)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tInsert an item at a given position. The first argument is the index of the element before which to insert, so <code>a.insert(0, x)</code> inserts at the front of the list, and <code>a.insert(len(a), x)</code> is equivalent to <code>a.append(x)</code>.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>remove</code></code><code class=\"python\">(</code><code class=\"python\">x)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tRemove the first item from the list whose value is equal to x. It raises a <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\"><code>ValueError</code></a><a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\"> </a>if there is no such item.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>pop</code></code><code class=\"python\">(</code><code class=\"python\">[i])</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tRemove the item at the given position in the list, and return it. If no index is specified, <code>a.pop()</code> removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>clear</code>()</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tRemove all items from the list. Equivalent to <code>del a[:]</code>.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>index</code></code><code class=\"python\">(</code><code class=\"python\">x[, start[, end] ])</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tReturn zero-based index in the list of the first item whose value is equal to x. Raises a <a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\"><code>ValueError</code></a><a href=\"https://docs.python.org/3/library/exceptions.html#ValueError\"> </a>if there is no such item.</p>\r\n\t\t<p>\r\n\t\t\tThe optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>count</code></code><code class=\"python\">(</code><code class=\"python\">x)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tReturn the number of times x appears in the list.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>sort</code></code><code class=\"python\">(</code><code class=\"python\">key=None, reverse=False)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tSort the items of the list in place (the arguments can be used for sort customization, see <a href=\"https://docs.python.org/3/library/functions.html#sorted\" target=\"_blank\"><code>sorted()</code></a> for their explanation).</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>reverse</code></code><code class=\"python\">(</code><code class=\"python\">)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tReverse the elements of the list in place.</p>\r\n\t</dd>\r\n</dl>\r\n<dl>\r\n\t<dt>\r\n\t\t<code class=\"python\"><code>list.</code><code>copy</code></code><code class=\"python\">(</code><code class=\"python\">)</code></dt>\r\n\t<dd>\r\n\t\t<p>\r\n\t\t\tReturn a shallow copy of the list. Equivalent to <code>a[:]</code>.</p>\r\n\t</dd>\r\n</dl>\r\n<p>\r\n\tAn example that uses most of the list methods:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; fruits = [&#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;banana&#39;, &#39;kiwi&#39;, &#39;apple&#39;, &#39;banana&#39;]\r\n&gt;&gt;&gt; fruits.count(&#39;apple&#39;)\r\n2\r\n&gt;&gt;&gt; fruits.count(&#39;tangerine&#39;)\r\n0\r\n&gt;&gt;&gt; fruits.index(&#39;banana&#39;)\r\n3\r\n&gt;&gt;&gt; fruits.index(&#39;banana&#39;, 4)  # Find next banana starting a position 4\r\n6\r\n&gt;&gt;&gt; fruits.reverse()\r\n&gt;&gt;&gt; fruits\r\n[&#39;banana&#39;, &#39;apple&#39;, &#39;kiwi&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;, &#39;orange&#39;]\r\n&gt;&gt;&gt; fruits.append(&#39;grape&#39;)\r\n&gt;&gt;&gt; fruits\r\n[&#39;banana&#39;, &#39;apple&#39;, &#39;kiwi&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;, &#39;orange&#39;, &#39;grape&#39;]\r\n&gt;&gt;&gt; fruits.sort()\r\n&gt;&gt;&gt; fruits\r\n[&#39;apple&#39;, &#39;apple&#39;, &#39;banana&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;kiwi&#39;, &#39;orange&#39;, &#39;pear&#39;]\r\n&gt;&gt;&gt; fruits.pop()\r\n&#39;pear&#39;\r\n</code></pre>\r\n<p>\r\n\tYou might have noticed that methods like <code>insert</code>, <code>remove</code> or <code>sort</code> that only modify the list have no return value printed &ndash; they return the default <code>None</code>.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tOther languages may return the mutated object, which allows method chaining, such as&nbsp;<code>d-&gt;insert(&quot;a&quot;)-&gt;remove(&quot;b&quot;)-&gt;sort();</code></p>\r\n</blockquote>\r\n<p>\r\n\tThis is a design principle for all mutable data structures in Python.</p>\r\n<h3>\r\n\tUsing Lists as Stacks</h3>\r\n<p>\r\n\tThe list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (&ldquo;last-in, first-out&rdquo;). To add an item to the top of the stack, use <code>append()</code>. To retrieve an item from the top of the stack, use <code>pop()</code> without an explicit index. For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; stack = [3, 4, 5]\r\n&gt;&gt;&gt; stack.append(6)\r\n&gt;&gt;&gt; stack.append(7)\r\n&gt;&gt;&gt; stack\r\n[3, 4, 5, 6, 7]\r\n&gt;&gt;&gt; stack.pop()\r\n7\r\n&gt;&gt;&gt; stack\r\n[3, 4, 5, 6]\r\n&gt;&gt;&gt; stack.pop()\r\n6\r\n&gt;&gt;&gt; stack.pop()\r\n5\r\n&gt;&gt;&gt; stack\r\n[3, 4]\r\n</code></pre>\r\n<h3>\r\n\tUsing Lists as Queues</h3>\r\n<p>\r\n\tIt is also possible to use a list as a queue, where the first element added is the first element retrieved (&ldquo;first-in, first-out&rdquo;); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).</p>\r\n<p>\r\n\tTo implement a queue, use <a href=\"https://docs.python.org/3/library/collections.html#collections.deque\" target=\"_blank\"><code>collections.deque</code></a> which was designed to have fast appends and pops from both ends. For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from collections import deque\r\n&gt;&gt;&gt; queue = deque([&quot;Eric&quot;, &quot;John&quot;, &quot;Michael&quot;])\r\n&gt;&gt;&gt; queue.append(&quot;Terry&quot;)           # Terry arrives\r\n&gt;&gt;&gt; queue.append(&quot;Graham&quot;)          # Graham arrives\r\n&gt;&gt;&gt; queue.popleft()                 # The first to arrive now leaves\r\n&#39;Eric&#39;\r\n&gt;&gt;&gt; queue.popleft()                 # The second to arrive now leaves\r\n&#39;John&#39;\r\n&gt;&gt;&gt; queue                           # Remaining queue in order of arrival\r\ndeque([&#39;Michael&#39;, &#39;Terry&#39;, &#39;Graham&#39;])\r\n</code></pre>\r\n<h3>\r\n\tList Comprehensions</h3>\r\n<p>\r\n\tList comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.</p>\r\n<p>\r\n\tFor example, assume we want to create a list of squares, like:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; squares = []\r\n&gt;&gt;&gt; for x in range(10):\r\n...     squares.append(x**2)\r\n...\r\n&gt;&gt;&gt; squares\r\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\r\n</code></pre>\r\n<p>\r\n\tNote that this creates (or overwrites) a variable named <code>x</code> that still exists after the loop completes. We can calculate the list of squares without any side effects using:</p>\r\n<pre>\r\n<code class=\"python\">squares = list(map(lambda x: x**2, range(10)))\r\n</code></pre>\r\n<p>\r\n\tor, equivalently:</p>\r\n<pre>\r\n<code class=\"python\">squares = [x**2 for x in range(10)]\r\n</code></pre>\r\n<p>\r\n\twhich is more concise and readable.</p>\r\n<p>\r\n\tA list comprehension consists of brackets containing an expression followed by a <a href=\"python-reference-compound-statements#3\"><code>for</code></a><a href=\"python-reference-compound-statements#3\"> </a>clause, then zero or more <a href=\"python-reference-compound-statements#3\"><code>for</code></a><a href=\"python-reference-compound-statements#3\"> </a>or <a href=\"python-reference-compound-statements#1\"><code>if</code></a><a href=\"python-reference-compound-statements#1\"> </a>clauses. The result will be a new list resulting from evaluating the expression in the context of the <a href=\"python-reference-compound-statements#3\"><code>for</code></a><a href=\"python-reference-compound-statements#3\"> </a>and <a href=\"python-reference-compound-statements#1\"><code>if</code></a><a href=\"python-reference-compound-statements#1\"> </a>clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\r\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\r\n</code></pre>\r\n<p>\r\n\tand it&rsquo;s equivalent to:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; combs = []\r\n&gt;&gt;&gt; for x in [1,2,3]:\r\n...     for y in [3,1,4]:\r\n...         if x != y:\r\n...             combs.append((x, y))\r\n...\r\n&gt;&gt;&gt; combs\r\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\r\n</code></pre>\r\n<p>\r\n\tNote how the order of the <a href=\"python-reference-compound-statements#3\"><code>for</code></a><a href=\"python-reference-compound-statements#3\"> </a>and <a href=\"python-reference-compound-statements#1\"><code>if</code></a><a href=\"python-reference-compound-statements#1\"> </a>statements is the same in both these snippets.</p>\r\n<p>\r\n\tIf the expression is a tuple (e.g. the <code>(x, y)</code> in the previous example), it must be parenthesized.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; vec = [-4, -2, 0, 2, 4]\r\n&gt;&gt;&gt; # create a new list with the values doubled\r\n&gt;&gt;&gt; [x*2 for x in vec]\r\n[-8, -4, 0, 4, 8]\r\n&gt;&gt;&gt; # filter the list to exclude negative numbers\r\n&gt;&gt;&gt; [x for x in vec if x &gt;= 0]\r\n[0, 2, 4]\r\n&gt;&gt;&gt; # apply a function to all the elements\r\n&gt;&gt;&gt; [abs(x) for x in vec]\r\n[4, 2, 0, 2, 4]\r\n&gt;&gt;&gt; # call a method on each element\r\n&gt;&gt;&gt; freshfruit = [&#39;  banana&#39;, &#39;  loganberry &#39;, &#39;passion fruit  &#39;]\r\n&gt;&gt;&gt; [weapon.strip() for weapon in freshfruit]\r\n[&#39;banana&#39;, &#39;loganberry&#39;, &#39;passion fruit&#39;]\r\n&gt;&gt;&gt; # create a list of 2-tuples like (number, square)\r\n&gt;&gt;&gt; [(x, x**2) for x in range(6)]\r\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\r\n&gt;&gt;&gt; # the tuple must be parenthesized, otherwise an error is raised\r\n&gt;&gt;&gt; [x, x**2 for x in range(6)]\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    [x, x**2 for x in range(6)]\r\n               ^\r\nSyntaxError: invalid syntax\r\n&gt;&gt;&gt; # flatten a list using a listcomp with two &#39;for&#39;\r\n&gt;&gt;&gt; vec = [ [1,2,3], [4,5,6], [7,8,9] ]\r\n&gt;&gt;&gt; [num for elem in vec for num in elem]\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n</code></pre>\r\n<p>\r\n\tList comprehensions can contain complex expressions and nested functions:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from math import pi\r\n&gt;&gt;&gt; [str(round(pi, i)) for i in range(1, 6)]\r\n[&#39;3.1&#39;, &#39;3.14&#39;, &#39;3.142&#39;, &#39;3.1416&#39;, &#39;3.14159&#39;]\r\n</code></pre>\r\n<h3>\r\n\tNested List Comprehensions</h3>\r\n<p>\r\n\tThe initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.</p>\r\n<p>\r\n\tConsider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; matrix = [\r\n...     [1, 2, 3, 4],\r\n...     [5, 6, 7, 8],\r\n...     [9, 10, 11, 12],\r\n... ]\r\n</code></pre>\r\n<p>\r\n\tThe following list comprehension will transpose rows and columns:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; [ [row[i] for row in matrix] for i in range(4)]\r\n[ [1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12] ]\r\n</code></pre>\r\n<p>\r\n\tAs we saw in the previous section, the nested listcomp is evaluated in the context of the <a href=\"python-reference-compound-statements#3\"><code>for</code></a><a href=\"python-reference-compound-statements#3\"> </a>that follows it, so this example is equivalent to:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; transposed = []\r\n&gt;&gt;&gt; for i in range(4):\r\n...     transposed.append([row[i] for row in matrix])\r\n...\r\n&gt;&gt;&gt; transposed\r\n[ [1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12] ]\r\n</code></pre>\r\n<p>\r\n\twhich, in turn, is the same as:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; transposed = []\r\n&gt;&gt;&gt; for i in range(4):\r\n...     # the following 3 lines implement the nested listcomp\r\n...     transposed_row = []\r\n...     for row in matrix:\r\n...         transposed_row.append(row[i])\r\n...     transposed.append(transposed_row)\r\n...\r\n&gt;&gt;&gt; transposed\r\n[ [1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12] ]\r\n</code></pre>\r\n<p>\r\n\tIn the real world, you should prefer built-in functions to complex flow statements. The <a href=\"https://docs.python.org/3/library/functions.html#zip\" target=\"_blank\"><code>zip()</code></a> function would do a great job for this use case:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; list(zip(*matrix))\r\n[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\r\n</code></pre>\r\n<p>\r\n\tSee <a href=\"python-tutorial-control-flow-tools#11\" target=\"_blank\">Unpacking Argument Lists</a> for details on the asterisk in this line.</p>\r\n<h2>\r\n\tThe <a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\" target=\"_blank\"><code>del</code></a> statement</h2>\r\n<p>\r\n\tThere is a way to remove an item from a list given its index instead of its value: the <a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"><code>del</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"> </a>statement. This differs from the <code>pop()</code> method which returns a value. The <a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"><code>del</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"> </a>statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]\r\n&gt;&gt;&gt; del a[0]\r\n&gt;&gt;&gt; a\r\n[1, 66.25, 333, 333, 1234.5]\r\n&gt;&gt;&gt; del a[2:4]\r\n&gt;&gt;&gt; a\r\n[1, 66.25, 1234.5]\r\n&gt;&gt;&gt; del a[:]\r\n&gt;&gt;&gt; a\r\n[]\r\n</code></pre>\r\n<p>\r\n\t<a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"><code>del</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"> </a>can also be used to delete entire variables:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; del a\r\n</code></pre>\r\n<p>\r\n\tReferencing the name <code>a</code> hereafter is an error (at least until another value is assigned to it). We&rsquo;ll find other uses for <a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"><code>del</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#del\"> </a>later.</p>\r\n<h2>\r\n\tTuples and Sequences</h2>\r\n<p>\r\n\tWe saw that lists and strings have many common properties, such as indexing and slicing operations. They are two examples of sequence data types (see <a href=\"https://docs.python.org/3/library/stdtypes.html#typesseq\" target=\"_blank\">Sequence Types &mdash; list, tuple, range</a>). Since Python is an evolving language, other sequence data types may be added. There is also another standard sequence data type: the tuple.</p>\r\n<p>\r\n\tA tuple consists of a number of values separated by commas, for instance:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; t = 12345, 54321, &#39;hello!&#39;\r\n&gt;&gt;&gt; t[0]\r\n12345\r\n&gt;&gt;&gt; t\r\n(12345, 54321, &#39;hello!&#39;)\r\n&gt;&gt;&gt; # Tuples may be nested:\r\n... u = t, (1, 2, 3, 4, 5)\r\n&gt;&gt;&gt; u\r\n((12345, 54321, &#39;hello!&#39;), (1, 2, 3, 4, 5))\r\n&gt;&gt;&gt; # Tuples are immutable:\r\n... t[0] = 88888\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\nTypeError: &#39;tuple&#39; object does not support item assignment\r\n&gt;&gt;&gt; # but they can contain mutable objects:\r\n... v = ([1, 2, 3], [3, 2, 1])\r\n&gt;&gt;&gt; v\r\n([1, 2, 3], [3, 2, 1])\r\n</code></pre>\r\n<p>\r\n\tAs you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists.</p>\r\n<p>\r\n\tThough tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are <a href=\"https://docs.python.org/3/glossary.html#term-immutable\" target=\"_blank\">immutable</a>, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of <a href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" target=\"_blank\"><code>namedtuples</code></a>). Lists are <a href=\"https://docs.python.org/3/glossary.html#term-mutable\" target=\"_blank\">mutable</a>, and their elements are usually homogeneous and are accessed by iterating over the list.</p>\r\n<p>\r\n\tA special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; empty = ()\r\n&gt;&gt;&gt; singleton = &#39;hello&#39;,    # &lt;-- note trailing comma\r\n&gt;&gt;&gt; len(empty)\r\n0\r\n&gt;&gt;&gt; len(singleton)\r\n1\r\n&gt;&gt;&gt; singleton\r\n(&#39;hello&#39;,)\r\n</code></pre>\r\n<p>\r\n\tThe statement <code>t = 12345, 54321, &#39;hello!&#39;</code> is an example of tuple packing: the values <code>12345</code>, <code>54321</code> and <code>&#39;hello!&#39;</code> are packed together in a tuple. The reverse operation is also possible:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; x, y, z = t\r\n</code></pre>\r\n<p>\r\n\tThis is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.</p>\r\n<h2>\r\n\tSets</h2>\r\n<p>\r\n\tPython also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p>\r\n<p>\r\n\tCurly braces or the <a href=\"https://docs.python.org/3/library/stdtypes.html#set\" target=\"_blank\"><code>set()</code></a> function can be used to create sets. Note: to create an empty set you have to use <code>set()</code>, not <code>{}</code>; the latter creates an empty dictionary, a data structure that we discuss in the next section.</p>\r\n<p>\r\n\tHere is a brief demonstration:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; basket = {&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;}\r\n&gt;&gt;&gt; print(basket)                      # show that duplicates have been removed\r\n{&#39;orange&#39;, &#39;banana&#39;, &#39;pear&#39;, &#39;apple&#39;}\r\n&gt;&gt;&gt; &#39;orange&#39; in basket                 # fast membership testing\r\nTrue\r\n&gt;&gt;&gt; &#39;crabgrass&#39; in basket\r\nFalse\r\n\r\n&gt;&gt;&gt; # Demonstrate set operations on unique letters from two words\r\n...\r\n&gt;&gt;&gt; a = set(&#39;abracadabra&#39;)\r\n&gt;&gt;&gt; b = set(&#39;alacazam&#39;)\r\n&gt;&gt;&gt; a                                  # unique letters in a\r\n{&#39;a&#39;, &#39;r&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;}\r\n&gt;&gt;&gt; a - b                              # letters in a but not in b\r\n{&#39;r&#39;, &#39;d&#39;, &#39;b&#39;}\r\n&gt;&gt;&gt; a | b                              # letters in a or b or both\r\n{&#39;a&#39;, &#39;c&#39;, &#39;r&#39;, &#39;d&#39;, &#39;b&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;}\r\n&gt;&gt;&gt; a &amp; b                              # letters in both a and b\r\n{&#39;a&#39;, &#39;c&#39;}\r\n&gt;&gt;&gt; a ^ b                              # letters in a or b but not both\r\n{&#39;r&#39;, &#39;d&#39;, &#39;b&#39;, &#39;m&#39;, &#39;z&#39;, &#39;l&#39;}\r\n</code></pre>\r\n<p>\r\n\tSimilarly to <a href=\"python-tutorial-data-structures#4\" target=\"_blank\">list comprehensions</a>, set comprehensions are also supported:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; a = {x for x in &#39;abracadabra&#39; if x not in &#39;abc&#39;}\r\n&gt;&gt;&gt; a\r\n{&#39;r&#39;, &#39;d&#39;}\r\n</code></pre>\r\n<h2>\r\n\tDictionaries</h2>\r\n<p>\r\n\tAnother useful data type built into Python is the dictionary (see <a href=\"https://docs.python.org/3/library/stdtypes.html#typesmapping\" target=\"_blank\">Mapping Types &mdash; dict</a>). Dictionaries are sometimes found in other languages as &ldquo;associative memories&rdquo; or &ldquo;associative arrays&rdquo;. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can&rsquo;t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like <code>append()</code> and <code>extend()</code>.</p>\r\n<p>\r\n\tIt is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: <code>{}</code>. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.</p>\r\n<p>\r\n\tThe main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with <code>del</code>. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key.</p>\r\n<p>\r\n\tPerforming <code>list(d)</code> on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use <code>sorted(d)</code> instead). To check whether a single key is in the dictionary, use the <a href=\"https://docs.python.org/3/reference/expressions.html#in\"><code>in</code></a><a href=\"https://docs.python.org/3/reference/expressions.html#in\"> </a>keyword.</p>\r\n<p>\r\n\tHere is a small example using a dictionary:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; tel = {&#39;jack&#39;: 4098, &#39;sape&#39;: 4139}\r\n&gt;&gt;&gt; tel[&#39;guido&#39;] = 4127\r\n&gt;&gt;&gt; tel\r\n{&#39;jack&#39;: 4098, &#39;sape&#39;: 4139, &#39;guido&#39;: 4127}\r\n&gt;&gt;&gt; tel[&#39;jack&#39;]\r\n4098\r\n&gt;&gt;&gt; del tel[&#39;sape&#39;]\r\n&gt;&gt;&gt; tel[&#39;irv&#39;] = 4127\r\n&gt;&gt;&gt; tel\r\n{&#39;jack&#39;: 4098, &#39;guido&#39;: 4127, &#39;irv&#39;: 4127}\r\n&gt;&gt;&gt; list(tel)\r\n[&#39;jack&#39;, &#39;guido&#39;, &#39;irv&#39;]\r\n&gt;&gt;&gt; sorted(tel)\r\n[&#39;guido&#39;, &#39;irv&#39;, &#39;jack&#39;]\r\n&gt;&gt;&gt; &#39;guido&#39; in tel\r\nTrue\r\n&gt;&gt;&gt; &#39;jack&#39; not in tel\r\nFalse\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/stdtypes.html#dict\" target=\"_blank\"><code>dict()</code></a> constructor builds dictionaries directly from sequences of key-value pairs:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; dict([(&#39;sape&#39;, 4139), (&#39;guido&#39;, 4127), (&#39;jack&#39;, 4098)])\r\n{&#39;sape&#39;: 4139, &#39;guido&#39;: 4127, &#39;jack&#39;: 4098}\r\n</code></pre>\r\n<p>\r\n\tIn addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; {x: x**2 for x in (2, 4, 6)}\r\n{2: 4, 4: 16, 6: 36}\r\n</code></pre>\r\n<p>\r\n\tWhen the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)\r\n{&#39;sape&#39;: 4139, &#39;guido&#39;: 4127, &#39;jack&#39;: 4098}\r\n</code></pre>\r\n<h2>\r\n\tIterators</h2>\r\n<p>\r\n\tIterators are objects that can be iterated upon. In this tutorial, you will learn how iterator works and how you can build your own iterator using __iter__ and __next__ methods.</p>\r\n<p>\r\n\tIterators are everywhere in Python. They are elegantly implemented within for loops, comprehensions, generators etc. but hidden in plain sight.</p>\r\n<p>\r\n\tIterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.</p>\r\n<p>\r\n\tTechnically speaking, Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.</p>\r\n<p>\r\n\tAn object is called iterable if we can get an iterator from it. Most of built-in containers in Python like: list, tuple, string etc. are iterables.</p>\r\n<p>\r\n\tThe iter() function (which in turn calls the __iter__() method) returns an iterator from them.</p>\r\n<p>\r\n\tYou can use the next() function to manually iterate through all the items of an iterator. When we reach the end and there is no more data to be returned, it will raise StopIteration.</p>\r\n<p>\r\n\tFollowing is an example:</p>\r\n<pre>\r\n<code class=\"python\"># define a list\r\nmy_list = [4, 7, 0, 3]\r\n\r\n# get an iterator using iter()\r\nmy_iter = iter(my_list)\r\n\r\n## iterate through it using next() \r\n\r\n#prints 4\r\nprint(next(my_iter))\r\n\r\n#prints 7\r\nprint(next(my_iter))\r\n\r\n## next(obj) is same as obj.__next__()\r\n\r\n#prints 0\r\nprint(my_iter.__next__())\r\n\r\n#prints 3\r\nprint(my_iter.__next__())\r\n\r\n# This will raise error, no items left\r\nnext(my_iter)\r\n</code></pre>\r\n<p>\r\n\tOutput:</p>\r\n<pre>\r\n4\r\n7\r\n0\r\n3\r\n\r\nTraceback (most recent call last):\r\n    ...\r\n    next(my_iter)\r\nStopIteration\r\n</pre>\r\n<h2>\r\n\tGenerators</h2>\r\n<p>\r\n\tSimply speaking, a generator is a function that returns an object (iterator) which we can iterate over (one value at a time).</p>\r\n<p>\r\n\tIt is fairly simple to create a generator in Python. It is as easy as defining a normal function, but with a yield statement instead of a return statement.</p>\r\n<p>\r\n\tIf a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function. Both yield and return will return some value from a function.</p>\r\n<p>\r\n\tThe difference is that while a return statement terminates a function entirely, yield statement pauses the function saving all its states and later continues from there on successive calls.</p>\r\n<h3>\r\n\tDifferences between Generator function and a Normal function</h3>\r\n<ul>\r\n\t<li>\r\n\t\tGenerator function contains one or more yield statements.</li>\r\n\t<li>\r\n\t\tWhen called, it returns an object (iterator) but does not start execution immediately.</li>\r\n\t<li>\r\n\t\tMethods like __iter__() and __next__() are implemented automatically. So we can iterate through the items using next().</li>\r\n\t<li>\r\n\t\tOnce the function yields, the function is paused and the control is transferred to the caller.</li>\r\n\t<li>\r\n\t\tLocal variables and their states are remembered between successive calls.</li>\r\n\t<li>\r\n\t\tFinally, when the function terminates, StopIteration is raised automatically on further calls.</li>\r\n</ul>\r\n<p>\r\n\tHere is an example to illustrate all of the points stated above. We have a generator function named my_gen() with several yield statements:</p>\r\n<pre>\r\n<code class=\"python\"># A simple generator function\r\ndef my_gen():\r\n    n = 1\r\n    print(&#39;This is printed first&#39;)\r\n    # Generator function contains yield statements\r\n    yield n\r\n\r\n    n += 1\r\n    print(&#39;This is printed second&#39;)\r\n    yield n\r\n\r\n    n += 1\r\n    print(&#39;This is printed at last&#39;)\r\n    yield n\r\n</code></pre>\r\n<p>\r\n\tAn interactive run in the interpreter:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; # It returns an object but does not start execution immediately.\r\n&gt;&gt;&gt; a = my_gen()\r\n\r\n&gt;&gt;&gt; # We can iterate through the items using next().\r\n&gt;&gt;&gt; next(a)\r\nThis is printed first\r\n1\r\n&gt;&gt;&gt; # Once the function yields, the function is paused and the control is transferred to the caller.\r\n\r\n&gt;&gt;&gt; # Local variables and theirs states are remembered between successive calls.\r\n&gt;&gt;&gt; next(a)\r\nThis is printed second\r\n2\r\n\r\n&gt;&gt;&gt; next(a)\r\nThis is printed at last\r\n3\r\n\r\n&gt;&gt;&gt; # Finally, when the function terminates, StopIteration is raised automatically on further calls.\r\n&gt;&gt;&gt; next(a)\r\nTraceback (most recent call last):\r\n...\r\nStopIteration\r\n&gt;&gt;&gt; next(a)\r\nTraceback (most recent call last):\r\n...\r\nStopIteration\r\n</code></pre>\r\n<h2>\r\n\tLooping Techniques</h2>\r\n<p>\r\n\tWhen looping through dictionaries, the key and corresponding value can be retrieved at the same time using the <code>items()</code> method.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; knights = {&#39;gallahad&#39;: &#39;the pure&#39;, &#39;robin&#39;: &#39;the brave&#39;}\r\n&gt;&gt;&gt; for k, v in knights.items():\r\n...     print(k, v)\r\n...\r\ngallahad the pure\r\nrobin the brave\r\n</code></pre>\r\n<p>\r\n\tWhen looping through a sequence, the position index and corresponding value can be retrieved at the same time using the <a href=\"https://docs.python.org/3/library/functions.html#enumerate\" target=\"_blank\"><code>enumerate()</code></a> function.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; for i, v in enumerate([&#39;tic&#39;, &#39;tac&#39;, &#39;toe&#39;]):\r\n...     print(i, v)\r\n...\r\n0 tic\r\n1 tac\r\n2 toe\r\n</code></pre>\r\n<p>\r\n\tTo loop over two or more sequences at the same time, the entries can be paired with the <a href=\"https://docs.python.org/3/library/functions.html#zip\" target=\"_blank\"><code>zip()</code></a> function.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; questions = [&#39;name&#39;, &#39;quest&#39;, &#39;favorite color&#39;]\r\n&gt;&gt;&gt; answers = [&#39;lancelot&#39;, &#39;the holy grail&#39;, &#39;blue&#39;]\r\n&gt;&gt;&gt; for q, a in zip(questions, answers):\r\n...     print(&#39;What is your {0}?  It is {1}.&#39;.format(q, a))\r\n...\r\nWhat is your name?  It is lancelot.\r\nWhat is your quest?  It is the holy grail.\r\nWhat is your favorite color?  It is blue.\r\n</code></pre>\r\n<p>\r\n\tTo loop over a sequence in reverse, first specify the sequence in a forward direction and then call the <a href=\"https://docs.python.org/3/library/functions.html#reversed\" target=\"_blank\"><code>reversed()</code></a> function.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; for i in reversed(range(1, 10, 2)):\r\n...     print(i)\r\n...\r\n9\r\n7\r\n5\r\n3\r\n1\r\n</code></pre>\r\n<p>\r\n\tTo loop over a sequence in sorted order, use the <a href=\"https://docs.python.org/3/library/functions.html#sorted\" target=\"_blank\"><code>sorted()</code></a> function which returns a new sorted list while leaving the source unaltered.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; basket = [&#39;apple&#39;, &#39;orange&#39;, &#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;]\r\n&gt;&gt;&gt; for f in sorted(set(basket)):\r\n...     print(f)\r\n...\r\napple\r\nbanana\r\norange\r\npear\r\n</code></pre>\r\n<p>\r\n\tIt is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import math\r\n&gt;&gt;&gt; raw_data = [56.2, float(&#39;NaN&#39;), 51.7, 55.3, 52.5, float(&#39;NaN&#39;), 47.8]\r\n&gt;&gt;&gt; filtered_data = []\r\n&gt;&gt;&gt; for value in raw_data:\r\n...     if not math.isnan(value):\r\n...         filtered_data.append(value)\r\n...\r\n&gt;&gt;&gt; filtered_data\r\n[56.2, 51.7, 55.3, 52.5, 47.8]\r\n</code></pre>\r\n<h2>\r\n\tMore on Conditions</h2>\r\n<p>\r\n\tThe conditions used in <code>while</code> and <code>if</code> statements can contain any operators, not just comparisons.</p>\r\n<p>\r\n\tThe comparison operators <code>in</code> and <code>not in</code> check whether a value occurs (does not occur) in a sequence. The operators <code>is</code> and <code>is not</code> compare whether two objects are really the same object; this only matters for mutable objects like lists. All comparison operators have the same priority, which is lower than that of all numerical operators.</p>\r\n<p>\r\n\tComparisons can be chained. For example, <code>a &lt; b == c</code> tests whether <code>a</code> is less than <code>b</code> and moreover <code>b</code> equals <code>c</code>.</p>\r\n<p>\r\n\tComparisons may be combined using the Boolean operators <code>and</code> and <code>or</code>, and the outcome of a comparison (or of any other Boolean expression) may be negated with <code>not</code>. These have lower priorities than comparison operators; between them, <code>not</code> has the highest priority and <code>or</code> the lowest, so that <code>A and not B or C</code> is equivalent to <code>(A and (not B)) or C</code>. As always, parentheses can be used to express the desired composition.</p>\r\n<p>\r\n\tThe Boolean operators <code>and</code> and <code>or</code> are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined. For example, if <code>A</code> and <code>C</code> are true but <code>B</code> is false, <code>A and B and C</code> does not evaluate the expression <code>C</code>. When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument.</p>\r\n<p>\r\n\tIt is possible to assign the result of a comparison or other Boolean expression to a variable. For example,</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; string1, string2, string3 = &#39;&#39;, &#39;Trondheim&#39;, &#39;Hammer Dance&#39;\r\n&gt;&gt;&gt; non_null = string1 or string2 or string3\r\n&gt;&gt;&gt; non_null\r\n&#39;Trondheim&#39;\r\n</code></pre>\r\n<p>\r\n\tNote that in Python, unlike C, assignment cannot occur inside expressions. C programmers may grumble about this, but it avoids a common class of problems encountered in C programs: typing <code>=</code> in an expression when <code>==</code> was intended.</p>\r\n<h2>\r\n\tComparing Sequences and Other Types</h2>\r\n<p>\r\n\tSequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one. Lexicographical ordering for strings uses the Unicode code point number to order individual characters. Some examples of comparisons between sequences of the same type:</p>\r\n<pre>\r\n<code class=\"python\">(1, 2, 3)              &lt; (1, 2, 4)\r\n[1, 2, 3]              &lt; [1, 2, 4]\r\n&#39;ABC&#39; &lt; &#39;C&#39; &lt; &#39;Pascal&#39; &lt; &#39;Python&#39;\r\n(1, 2, 3, 4)           &lt; (1, 2, 4)\r\n(1, 2)                 &lt; (1, 2, -1)\r\n(1, 2, 3)             == (1.0, 2.0, 3.0)\r\n(1, 2, (&#39;aa&#39;, &#39;ab&#39;))   &lt; (1, 2, (&#39;abc&#39;, &#39;a&#39;), 4)\r\n</code></pre>\r\n<p>\r\n\tNote that comparing objects of different types with <code>&lt;</code> or <code>&gt;</code> is legal provided that the objects have appropriate comparison methods. For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc. Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a <a href=\"https://docs.python.org/3/library/exceptions.html#TypeError\"><code>TypeError</code></a><a href=\"https://docs.python.org/3/library/exceptions.html#TypeError\"> </a>exception.</p>"
          }
        },
        {
          "Modules in Python": {
            "content": "<p>\r\n\tIf you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that you&rsquo;ve written in several programs without copying its definition into each program.</p>\r\n<p>\r\n\tTo support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a module; definitions from a module can be imported into other modules or into the main module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).</p>\r\n<p>\r\n\tA module is a file containing Python definitions and statements. The file name is the module name with the suffix <code>.py</code> appended. Within a module, the module&rsquo;s name (as a string) is available as the value of the global variable <code>__name__</code>. For instance, use your favorite text editor to create a file called <code>fibo.py</code> in the current directory with the following contents:</p>\r\n<pre>\r\n<code class=\"python\"># Fibonacci numbers module\r\n\r\ndef fib(n):    # write Fibonacci series up to n\r\n    a, b = 0, 1\r\n    while a &lt; n:\r\n        print(a, end=&#39; &#39;)\r\n        a, b = b, a+b\r\n    print()\r\n\r\ndef fib2(n):   # return Fibonacci series up to n\r\n    result = []\r\n    a, b = 0, 1\r\n    while a &lt; n:\r\n        result.append(a)\r\n        a, b = b, a+b\r\n    return result\r\n</code></pre>\r\n<p>\r\n\tNow enter the Python interpreter and import this module with the following command:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import fibo\r\n</code></pre>\r\n<p>\r\n\tThis does not enter the names of the functions defined in <code>fibo</code> directly in the current symbol table; it only enters the module name <code>fibo</code> there. Using the module name you can access the functions:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; fibo.fib(1000)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\r\n&gt;&gt;&gt; fibo.fib2(100)\r\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\r\n&gt;&gt;&gt; fibo.__name__\r\n&#39;fibo&#39;\r\n</code></pre>\r\n<p>\r\n\tIf you intend to use a function often you can assign it to a local name:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; fib = fibo.fib\r\n&gt;&gt;&gt; fib(500)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\r\n</code></pre>\r\n<h2>\r\n\tMore on Modules</h2>\r\n<p>\r\n\tA module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement. (They are also run if the file is executed as a script.)</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tIn fact function definitions are also &lsquo;statements&rsquo; that are &lsquo;executed&rsquo;; the execution of a module-level function definition enters the function name in the module&rsquo;s global symbol table.</p>\r\n</blockquote>\r\n<p>\r\n\tEach module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user&rsquo;s global variables. On the other hand, if you know what you are doing you can touch a module&rsquo;s global variables with the same notation used to refer to its functions, <code>modname.itemname</code>.</p>\r\n<p>\r\n\tModules can import other modules. It is customary but not required to place all <a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"><code>import</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"> </a>statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module&rsquo;s global symbol table.</p>\r\n<p>\r\n\tThere is a variant of the <a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"><code>import</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"> </a>statement that imports names from a module directly into the importing module&rsquo;s symbol table. For example:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from fibo import fib, fib2\r\n&gt;&gt;&gt; fib(500)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\r\n</code></pre>\r\n<p>\r\n\tThis does not introduce the module name from which the imports are taken in the local symbol table (so in the example, <code>fibo</code> is not defined).</p>\r\n<p>\r\n\tThere is even a variant to import all names that a module defines:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from fibo import *\r\n&gt;&gt;&gt; fib(500)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\r\n</code></pre>\r\n<p>\r\n\tThis imports all names except those beginning with an underscore (<code>_</code>). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.</p>\r\n<p>\r\n\tNote that in general the practice of importing <code>*</code> from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.</p>\r\n<p>\r\n\tIf the module name is followed by <a href=\"https://docs.python.org/3/reference/compound_stmts.html#as\" target=\"_blank\"><code>as</code></a>, then the name following <a href=\"https://docs.python.org/3/reference/compound_stmts.html#as\"><code>as</code></a><a href=\"https://docs.python.org/3/reference/compound_stmts.html#as\"> </a>is bound directly to the imported module.</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import fibo as fib\r\n&gt;&gt;&gt; fib.fib(500)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377\r\n</code></pre>\r\n<p>\r\n\tThis is effectively importing the module in the same way that <code>import fibo</code> will do, with the only difference of it being available as <code>fib</code>.</p>\r\n<p>\r\n\tIt can also be used when utilising <a href=\"https://docs.python.org/3/reference/simple_stmts.html#from\"><code>from</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#from\"> </a>with similar effects:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from fibo import fib as fibonacci\r\n&gt;&gt;&gt; fibonacci(500)\r\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tFor efficiency reasons, each module is only imported once per interpreter session. Therefore, if you change your modules, you must restart the interpreter &ndash; or, if it&rsquo;s just one module you want to test interactively, use <a href=\"https://docs.python.org/3/library/importlib.html#importlib.reload\" target=\"_blank\"><code>importlib.reload()</code></a>, e.g. <code>import importlib; importlib.reload(modulename)</code>.</p>\r\n</blockquote>\r\n<h3>\r\n\tExecuting modules as scripts</h3>\r\n<p>\r\n\tWhen you run a Python module with</p>\r\n<pre>\r\n<code class=\"python\">python fibo.py &lt;arguments&gt;\r\n</code></pre>\r\n<p>\r\n\tthe code in the module will be executed, just as if you imported it, but with the <code>__name__</code> set to <code>&quot;__main__&quot;</code>. That means that by adding this code at the end of your module:</p>\r\n<pre>\r\n<code class=\"python\">if __name__ == &quot;__main__&quot;:\r\n    import sys\r\n    fib(int(sys.argv[1]))\r\n</code></pre>\r\n<p>\r\n\tyou can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the &ldquo;main&rdquo; file:</p>\r\n<pre>\r\n<code class=\"python\">$ python fibo.py 50\r\n0 1 1 2 3 5 8 13 21 34\r\n</code></pre>\r\n<p>\r\n\tIf the module is imported, the code is not run:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import fibo\r\n&gt;&gt;&gt;\r\n</code></pre>\r\n<p>\r\n\tThis is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).</p>\r\n<h3>\r\n\tThe Module Search Path</h3>\r\n<p>\r\n\tWhen a module named <code>spam</code> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <code>spam.py</code> in a list of directories given by the variable <a href=\"https://docs.python.org/3/library/sys.html#sys.path\" target=\"_blank\"><code>sys.path</code></a>. <code>sys.path</code> is initialized from these locations:</p>\r\n<ul>\r\n\t<li>\r\n\t\tThe directory containing the input script (or the current directory when no file is specified).</li>\r\n\t<li>\r\n\t\t<a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\"><code>PYTHONPATH</code></a><a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\"> </a>(a list of directory names, with the same syntax as the shell variable <code>PATH</code>).</li>\r\n\t<li>\r\n\t\tThe installation-dependent default.</li>\r\n</ul>\r\n<blockquote>\r\n\t<p>\r\n\t\tOn file systems which support symlinks, the directory containing the input script is calculated after the symlink is followed. In other words the directory containing the symlink is <strong>not</strong> added to the module search path.</p>\r\n</blockquote>\r\n<p>\r\n\tAfter initialization, Python programs can modify <a href=\"docs.python.org/3/library/sys.html#sys.path\" target=\"_blank\"><code>sys.path</code></a>. The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended. See section <a href=\"python-tutorial-modules#5\" target=\"_blank\">Standard Modules</a> for more information.</p>\r\n<h3>\r\n\t&ldquo;Compiled&rdquo; Python files</h3>\r\n<p>\r\n\tTo speed up loading modules, Python caches the compiled version of each module in the <code>__pycache__</code> directory under the name <code>module.version.pyc</code>, where the version encodes the format of the compiled file; it generally contains the Python version number. For example, in CPython release 3.3 the compiled version of spam.py would be cached as <code>__pycache__/spam.cpython-33.pyc</code>. This naming convention allows compiled modules from different releases and different versions of Python to coexist.</p>\r\n<p>\r\n\tPython checks the modification date of the source against the compiled version to see if it&rsquo;s out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library can be shared among systems with different architectures.</p>\r\n<p>\r\n\tPython does not check the cache in two circumstances. First, it always recompiles and does not store the result for the module that&rsquo;s loaded directly from the command line. Second, it does not check the cache if there is no source module. To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.</p>\r\n<p>\r\n\tSome tips for experts:</p>\r\n<ul>\r\n\t<li>\r\n\t\tYou can use the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-o\" target=\"_blank\"><code>-O</code></a> or <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-oo\" target=\"_blank\"><code>-OO</code></a> switches on the Python command to reduce the size of a compiled module. The <code>-O</code> switch removes assert statements, the <code>-OO</code> switch removes both assert statements and __doc__ strings. Since some programs may rely on having these available, you should only use this option if you know what you&rsquo;re doing. &ldquo;Optimized&rdquo; modules have an <code>opt-</code> tag and are usually smaller. Future releases may change the effects of optimization.</li>\r\n\t<li>\r\n\t\tA program doesn&rsquo;t run any faster when it is read from a <code>.pyc</code> file than when it is read from a <code>.py</code> file; the only thing that&rsquo;s faster about <code>.pyc</code> files is the speed with which they are loaded.</li>\r\n\t<li>\r\n\t\tThe module <a href=\"https://docs.python.org/3/library/compileall.html#module-compileall\"><code>compileall</code></a><a href=\"https://docs.python.org/3/library/compileall.html#module-compileall\"> </a>can create .pyc files for all modules in a directory.</li>\r\n\t<li>\r\n\t\tThere is more detail on this process, including a flow chart of the decisions, in <a href=\"https://www.python.org/dev/peps/pep-3147\" target=\"_blank\"><strong>PEP 3147</strong></a>.</li>\r\n</ul>\r\n<h2>\r\n\tStandard Modules</h2>\r\n<p>\r\n\tPython comes with a library of standard modules, described in a separate document, the Python Library Reference (&ldquo;Library Reference&rdquo; hereafter). Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access to operating system primitives such as system calls. The set of such modules is a configuration option which also depends on the underlying platform. For example, the <a href=\"https://docs.python.org/3/library/winreg.html#module-winreg\"><code>winreg</code></a><a href=\"https://docs.python.org/3/library/winreg.html#module-winreg\"> </a>module is only provided on Windows systems. One particular module deserves some attention: <a href=\"https://docs.python.org/3/library/sys.html#module-sys\" target=\"_blank\"><code>sys</code></a>, which is built into every Python interpreter. The variables <code>sys.ps1</code> and <code>sys.ps2</code> define the strings used as primary and secondary prompts:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import sys\r\n&gt;&gt;&gt; sys.ps1\r\n&#39;&gt;&gt;&gt; &#39;\r\n&gt;&gt;&gt; sys.ps2\r\n&#39;... &#39;\r\n&gt;&gt;&gt; sys.ps1 = &#39;C&gt; &#39;\r\nC&gt; print(&#39;Yuck!&#39;)\r\nYuck!\r\nC&gt;\r\n</code></pre>\r\n<p>\r\n\tThese two variables are only defined if the interpreter is in interactive mode.</p>\r\n<p>\r\n\tThe variable <code>sys.path</code> is a list of strings that determines the interpreter&rsquo;s search path for modules. It is initialized to a default path taken from the environment variable <a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\" target=\"_blank\"><code>PYTHONPATH</code></a>, or from a built-in default if <code>PYTHONPATH</code> is not set. You can modify it using standard list operations:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import sys\r\n&gt;&gt;&gt; sys.path.append(&#39;/ufs/guido/lib/python&#39;)\r\n</code></pre>\r\n<h2>\r\n\tThe <a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\"><code>dir()</code></a> Function</h2>\r\n<p>\r\n\tThe built-in function <a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\"><code>dir()</code></a> is used to find out which names a module defines. It returns a sorted list of strings:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import fibo, sys\r\n&gt;&gt;&gt; dir(fibo)\r\n[&#39;__name__&#39;, &#39;fib&#39;, &#39;fib2&#39;]\r\n&gt;&gt;&gt; dir(sys)  \r\n[&#39;__displayhook__&#39;, &#39;__doc__&#39;, &#39;__excepthook__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;,\r\n &#39;__package__&#39;, &#39;__stderr__&#39;, &#39;__stdin__&#39;, &#39;__stdout__&#39;,\r\n &#39;_clear_type_cache&#39;, &#39;_current_frames&#39;, &#39;_debugmallocstats&#39;, &#39;_getframe&#39;,\r\n &#39;_home&#39;, &#39;_mercurial&#39;, &#39;_xoptions&#39;, &#39;abiflags&#39;, &#39;api_version&#39;, &#39;argv&#39;,\r\n &#39;base_exec_prefix&#39;, &#39;base_prefix&#39;, &#39;builtin_module_names&#39;, &#39;byteorder&#39;,\r\n &#39;call_tracing&#39;, &#39;callstats&#39;, &#39;copyright&#39;, &#39;displayhook&#39;,\r\n &#39;dont_write_bytecode&#39;, &#39;exc_info&#39;, &#39;excepthook&#39;, &#39;exec_prefix&#39;,\r\n &#39;executable&#39;, &#39;exit&#39;, &#39;flags&#39;, &#39;float_info&#39;, &#39;float_repr_style&#39;,\r\n &#39;getcheckinterval&#39;, &#39;getdefaultencoding&#39;, &#39;getdlopenflags&#39;,\r\n &#39;getfilesystemencoding&#39;, &#39;getobjects&#39;, &#39;getprofile&#39;, &#39;getrecursionlimit&#39;,\r\n &#39;getrefcount&#39;, &#39;getsizeof&#39;, &#39;getswitchinterval&#39;, &#39;gettotalrefcount&#39;,\r\n &#39;gettrace&#39;, &#39;hash_info&#39;, &#39;hexversion&#39;, &#39;implementation&#39;, &#39;int_info&#39;,\r\n &#39;intern&#39;, &#39;maxsize&#39;, &#39;maxunicode&#39;, &#39;meta_path&#39;, &#39;modules&#39;, &#39;path&#39;,\r\n &#39;path_hooks&#39;, &#39;path_importer_cache&#39;, &#39;platform&#39;, &#39;prefix&#39;, &#39;ps1&#39;,\r\n &#39;setcheckinterval&#39;, &#39;setdlopenflags&#39;, &#39;setprofile&#39;, &#39;setrecursionlimit&#39;,\r\n &#39;setswitchinterval&#39;, &#39;settrace&#39;, &#39;stderr&#39;, &#39;stdin&#39;, &#39;stdout&#39;,\r\n &#39;thread_info&#39;, &#39;version&#39;, &#39;version_info&#39;, &#39;warnoptions&#39;]\r\n</code></pre>\r\n<p>\r\n\tWithout arguments, <a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\"><code>dir()</code></a> lists the names you have defined currently:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; a = [1, 2, 3, 4, 5]\r\n&gt;&gt;&gt; import fibo\r\n&gt;&gt;&gt; fib = fibo.fib\r\n&gt;&gt;&gt; dir()\r\n[&#39;__builtins__&#39;, &#39;__name__&#39;, &#39;a&#39;, &#39;fib&#39;, &#39;fibo&#39;, &#39;sys&#39;]\r\n</code></pre>\r\n<p>\r\n\tNote that it lists all types of names: variables, modules, functions, etc.</p>\r\n<p>\r\n\t<a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\"><code>dir()</code></a> does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module <a href=\"https://docs.python.org/3/library/builtins.html#module-builtins\" target=\"_blank\"><code>builtins</code></a>:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import builtins\r\n&gt;&gt;&gt; dir(builtins)  \r\n[&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;,\r\n &#39;BlockingIOError&#39;, &#39;BrokenPipeError&#39;, &#39;BufferError&#39;, &#39;BytesWarning&#39;,\r\n &#39;ChildProcessError&#39;, &#39;ConnectionAbortedError&#39;, &#39;ConnectionError&#39;,\r\n &#39;ConnectionRefusedError&#39;, &#39;ConnectionResetError&#39;, &#39;DeprecationWarning&#39;,\r\n &#39;EOFError&#39;, &#39;Ellipsis&#39;, &#39;EnvironmentError&#39;, &#39;Exception&#39;, &#39;False&#39;,\r\n &#39;FileExistsError&#39;, &#39;FileNotFoundError&#39;, &#39;FloatingPointError&#39;,\r\n &#39;FutureWarning&#39;, &#39;GeneratorExit&#39;, &#39;IOError&#39;, &#39;ImportError&#39;,\r\n &#39;ImportWarning&#39;, &#39;IndentationError&#39;, &#39;IndexError&#39;, &#39;InterruptedError&#39;,\r\n &#39;IsADirectoryError&#39;, &#39;KeyError&#39;, &#39;KeyboardInterrupt&#39;, &#39;LookupError&#39;,\r\n &#39;MemoryError&#39;, &#39;NameError&#39;, &#39;None&#39;, &#39;NotADirectoryError&#39;, &#39;NotImplemented&#39;,\r\n &#39;NotImplementedError&#39;, &#39;OSError&#39;, &#39;OverflowError&#39;,\r\n &#39;PendingDeprecationWarning&#39;, &#39;PermissionError&#39;, &#39;ProcessLookupError&#39;,\r\n &#39;ReferenceError&#39;, &#39;ResourceWarning&#39;, &#39;RuntimeError&#39;, &#39;RuntimeWarning&#39;,\r\n &#39;StopIteration&#39;, &#39;SyntaxError&#39;, &#39;SyntaxWarning&#39;, &#39;SystemError&#39;,\r\n &#39;SystemExit&#39;, &#39;TabError&#39;, &#39;TimeoutError&#39;, &#39;True&#39;, &#39;TypeError&#39;,\r\n &#39;UnboundLocalError&#39;, &#39;UnicodeDecodeError&#39;, &#39;UnicodeEncodeError&#39;,\r\n &#39;UnicodeError&#39;, &#39;UnicodeTranslateError&#39;, &#39;UnicodeWarning&#39;, &#39;UserWarning&#39;,\r\n &#39;ValueError&#39;, &#39;Warning&#39;, &#39;ZeroDivisionError&#39;, &#39;_&#39;, &#39;__build_class__&#39;,\r\n &#39;__debug__&#39;, &#39;__doc__&#39;, &#39;__import__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;abs&#39;,\r\n &#39;all&#39;, &#39;any&#39;, &#39;ascii&#39;, &#39;bin&#39;, &#39;bool&#39;, &#39;bytearray&#39;, &#39;bytes&#39;, &#39;callable&#39;,\r\n &#39;chr&#39;, &#39;classmethod&#39;, &#39;compile&#39;, &#39;complex&#39;, &#39;copyright&#39;, &#39;credits&#39;,\r\n &#39;delattr&#39;, &#39;dict&#39;, &#39;dir&#39;, &#39;divmod&#39;, &#39;enumerate&#39;, &#39;eval&#39;, &#39;exec&#39;, &#39;exit&#39;,\r\n &#39;filter&#39;, &#39;float&#39;, &#39;format&#39;, &#39;frozenset&#39;, &#39;getattr&#39;, &#39;globals&#39;, &#39;hasattr&#39;,\r\n &#39;hash&#39;, &#39;help&#39;, &#39;hex&#39;, &#39;id&#39;, &#39;input&#39;, &#39;int&#39;, &#39;isinstance&#39;, &#39;issubclass&#39;,\r\n &#39;iter&#39;, &#39;len&#39;, &#39;license&#39;, &#39;list&#39;, &#39;locals&#39;, &#39;map&#39;, &#39;max&#39;, &#39;memoryview&#39;,\r\n &#39;min&#39;, &#39;next&#39;, &#39;object&#39;, &#39;oct&#39;, &#39;open&#39;, &#39;ord&#39;, &#39;pow&#39;, &#39;print&#39;, &#39;property&#39;,\r\n &#39;quit&#39;, &#39;range&#39;, &#39;repr&#39;, &#39;reversed&#39;, &#39;round&#39;, &#39;set&#39;, &#39;setattr&#39;, &#39;slice&#39;,\r\n &#39;sorted&#39;, &#39;staticmethod&#39;, &#39;str&#39;, &#39;sum&#39;, &#39;super&#39;, &#39;tuple&#39;, &#39;type&#39;, &#39;vars&#39;,\r\n &#39;zip&#39;]\r\n</code></pre>\r\n<h2>\r\n\tPackages</h2>\r\n<p>\r\n\tPackages are a way of structuring Python&rsquo;s module namespace by using &ldquo;dotted module names&rdquo;. For example, the module name <code>A.B</code> designates a submodule named <code>B</code> in a package named <code>A</code>. Just like the use of modules saves the authors of different modules from having to worry about each other&rsquo;s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other&rsquo;s module names.</p>\r\n<p>\r\n\tSuppose you want to design a collection of modules (a &ldquo;package&rdquo;) for the uniform handling of sound files and sound data. There are many different sound file formats (usually recognized by their extension, for example: <code>.wav</code>, <code>.aiff</code>, <code>.au</code>), so you may need to create and maintain a growing collection of modules for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be writing a never-ending stream of modules to perform these operations. Here&rsquo;s a possible structure for your package (expressed in terms of a hierarchical filesystem):</p>\r\n<pre>\r\n<code class=\"python\">sound/                          Top-level package\r\n      __init__.py               Initialize the sound package\r\n      formats/                  Subpackage for file format conversions\r\n              __init__.py\r\n              wavread.py\r\n              wavwrite.py\r\n              aiffread.py\r\n              aiffwrite.py\r\n              auread.py\r\n              auwrite.py\r\n              ...\r\n      effects/                  Subpackage for sound effects\r\n              __init__.py\r\n              echo.py\r\n              surround.py\r\n              reverse.py\r\n              ...\r\n      filters/                  Subpackage for filters\r\n              __init__.py\r\n              equalizer.py\r\n              vocoder.py\r\n              karaoke.py\r\n              ...\r\n</code></pre>\r\n<p>\r\n\tWhen importing the package, Python searches through the directories on <code>sys.path</code> looking for the package subdirectory.</p>\r\n<p>\r\n\tThe <code>__init__.py</code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as <code>string</code>, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable, described later.</p>\r\n<p>\r\n\tUsers of the package can import individual modules from the package, for example:</p>\r\n<pre>\r\n<code class=\"python\">import sound.effects.echo\r\n</code></pre>\r\n<p>\r\n\tThis loads the submodule <code>sound.effects.echo</code>. It must be referenced with its full name.</p>\r\n<pre>\r\n<code class=\"python\">sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\r\n</code></pre>\r\n<p>\r\n\tAn alternative way of importing the submodule is:</p>\r\n<pre>\r\n<code class=\"python\">from sound.effects import echo\r\n</code></pre>\r\n<p>\r\n\tThis also loads the submodule <code>echo</code>, and makes it available without its package prefix, so it can be used as follows:</p>\r\n<pre>\r\n<code class=\"python\">echo.echofilter(input, output, delay=0.7, atten=4)\r\n</code></pre>\r\n<p>\r\n\tYet another variation is to import the desired function or variable directly:</p>\r\n<pre>\r\n<code class=\"python\">from sound.effects.echo import echofilter\r\n</code></pre>\r\n<p>\r\n\tAgain, this loads the submodule <code>echo</code>, but this makes its function <code>echofilter()</code> directly available:</p>\r\n<pre>\r\n<code class=\"python\">echofilter(input, output, delay=0.7, atten=4)\r\n</code></pre>\r\n<p>\r\n\tNote that when using <code>from package import item</code>, the item can be either a submodule (or subpackage) of the package, or some other name defined in the package, like a function, class or variable. The <code>import</code> statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an <a href=\"https://docs.python.org/3/library/exceptions.html#ImportError\"><code>ImportError</code></a><a href=\"https://docs.python.org/3/library/exceptions.html#ImportError\"> </a>exception is raised.</p>\r\n<p>\r\n\tContrarily, when using syntax like <code>import item.subitem.subsubitem</code>, each item except for the last must be a package; the last item can be a module or a package but can&rsquo;t be a class or function or variable defined in the previous item.</p>\r\n<h3>\r\n\tImporting * From a Package</h3>\r\n<p>\r\n\tNow what happens when the user writes <code>from sound.effects import *</code>? Ideally, one would hope that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports them all. This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported.</p>\r\n<p>\r\n\tThe only solution is for the package author to provide an explicit index of the package. The <a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"><code>import</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"> </a>statement uses the following convention: if a package&rsquo;s <code>__init__.py</code> code defines a list named <code>__all__</code>, it is taken to be the list of module names that should be imported when <code>from package import *</code> is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don&rsquo;t see a use for importing * from their package. For example, the file <code>sound/effects/__init__.py</code> could contain the following code:</p>\r\n<pre>\r\n<code class=\"python\">__all__ = [&quot;echo&quot;, &quot;surround&quot;, &quot;reverse&quot;]\r\n</code></pre>\r\n<p>\r\n\tThis would mean that <code>from sound.effects import *</code> would import the three named submodules of the <code>sound</code> package.</p>\r\n<p>\r\n\tIf <code>__all__</code> is not defined, the statement <code>from sound.effects import *</code> does not import all submodules from the package <code>sound.effects</code> into the current namespace; it only ensures that the package <code>sound.effects</code> has been imported (possibly running any initialization code in <code>__init__.py</code>) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by <code>__init__.py</code>. It also includes any submodules of the package that were explicitly loaded by previous <a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"><code>import</code></a><a href=\"https://docs.python.org/3/reference/simple_stmts.html#import\"> </a>statements. Consider this code:</p>\r\n<pre>\r\n<code class=\"python\">import sound.effects.echo\r\nimport sound.effects.surround\r\nfrom sound.effects import *\r\n</code></pre>\r\n<p>\r\n\tIn this example, the <code>echo</code> and <code>surround</code> modules are imported in the current namespace because they are defined in the <code>sound.effects</code> package when the <code>from...import</code> statement is executed. (This also works when <code>__all__</code> is defined.)</p>\r\n<p>\r\n\tAlthough certain modules are designed to export only names that follow certain patterns when you use <code>import *</code>, it is still considered bad practice in production code.</p>\r\n<p>\r\n\tRemember, there is nothing wrong with using <code>from Package import specific_submodule</code>! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.</p>\r\n<h3>\r\n\tIntra-package References</h3>\r\n<p>\r\n\tWhen packages are structured into subpackages (as with the <code>sound</code> package in the example), you can use absolute imports to refer to submodules of siblings packages. For example, if the module <code>sound.filters.vocoder</code> needs to use the <code>echo</code> module in the <code>sound.effects</code> package, it can use <code>from sound.effects import echo</code>.</p>\r\n<p>\r\n\tYou can also write relative imports, with the <code>from module import name</code> form of import statement. These imports use leading dots to indicate the current and parent packages involved in the relative import. From the <code>surround</code> module for example, you might use:</p>\r\n<pre>\r\n<code class=\"python\">from . import echo\r\nfrom .. import formats\r\nfrom ..filters import equalizer\r\n</code></pre>\r\n<p>\r\n\tNote that relative imports are based on the name of the current module. Since the name of the main module is always <code>&quot;__main__&quot;</code>, modules intended for use as the main module of a Python application must always use absolute imports.</p>\r\n<h3>\r\n\tPackages in Multiple Directories</h3>\r\n<p>\r\n\tPackages support one more special attribute, <a href=\"https://docs.python.org/3/reference/import.html#__path__\" target=\"_blank\"><code>__path__</code></a>. This is initialized to be a list containing the name of the directory holding the package&rsquo;s <code>__init__.py</code> before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.</p>\r\n<p>\r\n\tWhile this feature is not often needed, it can be used to extend the set of modules found in a package.</p>"
          }
        },
        {
          "Standard Library in Python": {
            "content": "<h2>\r\n\tOperating System Interface</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/os.html#module-os\"><code>os</code></a><a href=\"https://docs.python.org/3/library/os.html#module-os\"> </a>module provides dozens of functions for interacting with the operating system:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import os\r\n&gt;&gt;&gt; os.getcwd()      # Return the current working directory\r\n&#39;C:\\\\Python37&#39;\r\n&gt;&gt;&gt; os.chdir(&#39;/server/accesslogs&#39;)   # Change current working directory\r\n&gt;&gt;&gt; os.system(&#39;mkdir today&#39;)   # Run the command mkdir in the system shell\r\n0\r\n</code></pre>\r\n<p>\r\n\tBe sure to use the <code>import os</code> style instead of <code>from os import *</code>. This will keep <a href=\"https://docs.python.org/3/library/os.html#os.open\" target=\"_blank\"><code>os.open()</code></a> from shadowing the built-in <a href=\"https://docs.python.org/3/library/functions.html#open\" target=\"_blank\"><code>open()</code></a> function which operates much differently.</p>\r\n<p>\r\n\tThe built-in <a href=\"https://docs.python.org/3/library/functions.html#dir\" target=\"_blank\"><code>dir()</code></a> and <a href=\"https://docs.python.org/3/library/functions.html#help\" target=\"_blank\"><code>help()</code></a> functions are useful as interactive aids for working with large modules like <code>os</code>:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import os\r\n&gt;&gt;&gt; dir(os)\r\n&lt;returns a list of all module functions&gt;\r\n&gt;&gt;&gt; help(os)\r\n&lt;returns an extensive manual page created from the module&#39;s docstrings&gt;\r\n</code></pre>\r\n<p>\r\n\tFor daily file and directory management tasks, the <a href=\"https://docs.python.org/3/library/shutil.html#module-shutil\"><code>shutil</code></a><a href=\"https://docs.python.org/3/library/shutil.html#module-shutil\"> </a>module provides a higher level interface that is easier to use:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import shutil\r\n&gt;&gt;&gt; shutil.copyfile(&#39;data.db&#39;, &#39;archive.db&#39;)\r\n&#39;archive.db&#39;\r\n&gt;&gt;&gt; shutil.move(&#39;/build/executables&#39;, &#39;installdir&#39;)\r\n&#39;installdir&#39;\r\n</code></pre>\r\n<h2>\r\n\tFile Wildcards</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/glob.html#module-glob\"><code>glob</code></a><a href=\"https://docs.python.org/3/library/glob.html#module-glob\"> </a>module provides a function for making file lists from directory wildcard searches:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import glob\r\n&gt;&gt;&gt; glob.glob(&#39;*.py&#39;)\r\n[&#39;primes.py&#39;, &#39;random.py&#39;, &#39;quote.py&#39;]\r\n</code></pre>\r\n<h2>\r\n\tCommand Line Arguments</h2>\r\n<p>\r\n\tCommon utility scripts often need to process command line arguments. These arguments are stored in the <a href=\"https://docs.python.org/3/library/sys.html#module-sys\"><code>sys</code></a><a href=\"https://docs.python.org/3/library/sys.html#module-sys\"> </a>module&rsquo;s argv attribute as a list. For instance the following output results from running <code>python demo.py one two three</code> at the command line:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import sys\r\n&gt;&gt;&gt; print(sys.argv)\r\n[&#39;demo.py&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;]\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/getopt.html#module-getopt\"><code>getopt</code></a><a href=\"https://docs.python.org/3/library/getopt.html#module-getopt\"> </a>module processes sys.argv using the conventions of the Unix <a href=\"https://docs.python.org/3/library/getopt.html#module-getopt\" target=\"_blank\"><code>getopt()</code></a> function. More powerful and flexible command line processing is provided by the <a href=\"https://docs.python.org/3/library/argparse.html#module-argparse\"><code>argparse</code></a><a href=\"https://docs.python.org/3/library/argparse.html#module-argparse\"> </a>module.</p>\r\n<h2>\r\n\tError Output Redirection and Program Termination</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/sys.html#module-sys\"><code>sys</code></a><a href=\"https://docs.python.org/3/library/sys.html#module-sys\"> </a>module also has attributes for stdin, stdout, and stderr. The latter is useful for emitting warnings and error messages to make them visible even when stdout has been redirected:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; sys.stderr.write(&#39;Warning, log file not found starting a new one\\n&#39;)\r\nWarning, log file not found starting a new one\r\n</code></pre>\r\n<p>\r\n\tThe most direct way to terminate a script is to use <code>sys.exit()</code>.</p>\r\n<h2>\r\n\tString Pattern Matching</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/re.html#module-re\"><code>re</code></a><a href=\"https://docs.python.org/3/library/re.html#module-re\"> </a>module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:</p>\r\n<div>\r\n\t<pre>\r\n\t<code>&gt;&gt;&gt; import re\r\n&gt;&gt;&gt; re.findall(r&#39;\\bf[a-z]*&#39;, &#39;which foot or hand fell fastest&#39;)\r\n[&#39;foot&#39;, &#39;fell&#39;, &#39;fastest&#39;]\r\n&gt;&gt;&gt; re.sub(r&#39;(\\b[a-z]+) \\1&#39;, r&#39;\\1&#39;, &#39;cat in the the hat&#39;)\r\n&#39;cat in the hat&#39;\r\n</code></pre>\r\n</div>\r\n<p>\r\n\tWhen only simple capabilities are needed, string methods are preferred because they are easier to read and debug:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; &#39;tea for too&#39;.replace(&#39;too&#39;, &#39;two&#39;)\r\n&#39;tea for two&#39;\r\n</code></pre>\r\n<h2>\r\n\tMathematics</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/math.html#module-math\" target=\"_blank\"><code>math</code></a> module gives access to the underlying C library functions for floating point math:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import math\r\n&gt;&gt;&gt; math.cos(math.pi / 4)\r\n0.70710678118654757\r\n&gt;&gt;&gt; math.log(1024, 2)\r\n10.0\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/random.html#module-random\"><code>random</code></a><a href=\"https://docs.python.org/3/library/random.html#module-random\"> </a>module provides tools for making random selections:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import random\r\n&gt;&gt;&gt; random.choice([&#39;apple&#39;, &#39;pear&#39;, &#39;banana&#39;])\r\n&#39;apple&#39;\r\n&gt;&gt;&gt; random.sample(range(100), 10)   # sampling without replacement\r\n[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\r\n&gt;&gt;&gt; random.random()    # random float\r\n0.17970987693706186\r\n&gt;&gt;&gt; random.randrange(6)    # random integer chosen from range(6)\r\n4\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/statistics.html#module-statistics\"><code>statistics</code></a><a href=\"https://docs.python.org/3/library/statistics.html#module-statistics\"> </a>module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import statistics\r\n&gt;&gt;&gt; data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\r\n&gt;&gt;&gt; statistics.mean(data)\r\n1.6071428571428572\r\n&gt;&gt;&gt; statistics.median(data)\r\n1.25\r\n&gt;&gt;&gt; statistics.variance(data)\r\n1.3720238095238095\r\n</code></pre>\r\n<p>\r\n\tThe SciPy project &lt;<a href=\"https://scipy.org\" target=\"_blank\">https://scipy.org</a>&gt; has many other modules for numerical computations.</p>\r\n<h2>\r\n\tInternet Access</h2>\r\n<p>\r\n\tThere are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are <a href=\"https://docs.python.org/3/library/urllib.request.html#module-urllib.request\" target=\"_blank\"><code>urllib.request</code></a> for retrieving data from URLs and <a href=\"https://docs.python.org/3/library/smtplib.html#module-smtplib\"><code>smtplib</code></a><a href=\"https://docs.python.org/3/library/smtplib.html#module-smtplib\"> </a>for sending mail:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; from urllib.request import urlopen\r\n&gt;&gt;&gt; with urlopen(&#39;http://tycho.usno.navy.mil/cgi-bin/timer.pl&#39;) as response:\r\n...     for line in response:\r\n...         line = line.decode(&#39;utf-8&#39;)  # Decoding the binary data to text.\r\n...         if &#39;EST&#39; in line or &#39;EDT&#39; in line:  # look for Eastern Time\r\n...             print(line)\r\n\r\n&lt;BR&gt;Nov. 25, 09:43:32 PM EST\r\n\r\n&gt;&gt;&gt; import smtplib\r\n&gt;&gt;&gt; server = smtplib.SMTP(&#39;localhost&#39;)\r\n&gt;&gt;&gt; server.sendmail(&#39;soothsayer@example.org&#39;, &#39;jcaesar@example.org&#39;,\r\n... &quot;&quot;&quot;To: jcaesar@example.org\r\n... From: soothsayer@example.org\r\n...\r\n... Beware the Ides of March.\r\n... &quot;&quot;&quot;)\r\n&gt;&gt;&gt; server.quit()\r\n</code></pre>\r\n<p>\r\n\t(Note that the second example needs a mailserver running on localhost.)</p>\r\n<h2>\r\n\tDates and Times</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/datetime.html#module-datetime\"><code>datetime</code></a><a href=\"https://docs.python.org/3/library/datetime.html#module-datetime\"> </a>module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation. The module also supports objects that are timezone aware.</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; # dates are easily constructed and formatted\r\n&gt;&gt;&gt; from datetime import date\r\n&gt;&gt;&gt; now = date.today()\r\n&gt;&gt;&gt; now\r\ndatetime.date(2003, 12, 2)\r\n&gt;&gt;&gt; now.strftime(&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;)\r\n&#39;12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.&#39;\r\n\r\n&gt;&gt;&gt; # dates support calendar arithmetic\r\n&gt;&gt;&gt; birthday = date(1964, 7, 31)\r\n&gt;&gt;&gt; age = now - birthday\r\n&gt;&gt;&gt; age.days\r\n14368\r\n</code></pre>\r\n<h2>\r\n\tData Compression</h2>\r\n<p>\r\n\tCommon data archiving and compression formats are directly supported by modules including: <a href=\"https://docs.python.org/3/library/zlib.html#module-zlib\" target=\"_blank\"><code>zlib</code></a>, <a href=\"https://docs.python.org/3/library/gzip.html#module-gzip\" target=\"_blank\"><code>gzip</code></a>, <a href=\"https://docs.python.org/3/library/bz2.html#module-bz2\" target=\"_blank\"><code>bz2</code></a>, <a href=\"https://docs.python.org/3/library/lzma.html#module-lzma\" target=\"_blank\"><code>lzma</code></a>, <a href=\"https://docs.python.org/3/library/zipfile.html#module-zipfile\"><code>zipfile</code></a><a href=\"https://docs.python.org/3/library/zipfile.html#module-zipfile\"> </a>and <a href=\"https://docs.python.org/3/library/tarfile.html#module-tarfile\" target=\"_blank\"><code>tarfile</code></a>.</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; import zlib\r\n&gt;&gt;&gt; s = b&#39;witch which has which witches wrist watch&#39;\r\n&gt;&gt;&gt; len(s)\r\n41\r\n&gt;&gt;&gt; t = zlib.compress(s)\r\n&gt;&gt;&gt; len(t)\r\n37\r\n&gt;&gt;&gt; zlib.decompress(t)\r\nb&#39;witch which has which witches wrist watch&#39;\r\n&gt;&gt;&gt; zlib.crc32(s)\r\n226805979\r\n</code></pre>\r\n<h2>\r\n\tPerformance Measurement</h2>\r\n<p>\r\n\tSome Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately.</p>\r\n<p>\r\n\tFor example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The <a href=\"https://docs.python.org/3/library/timeit.html#module-timeit\"><code>timeit</code></a><a href=\"https://docs.python.org/3/library/timeit.html#module-timeit\"> </a>module quickly demonstrates a modest performance advantage:</p>\r\n<pre>\r\n<code>&gt;&gt;&gt; from timeit import Timer\r\n&gt;&gt;&gt; Timer(&#39;t=a; a=b; b=t&#39;, &#39;a=1; b=2&#39;).timeit()\r\n0.57535828626024577\r\n&gt;&gt;&gt; Timer(&#39;a,b = b,a&#39;, &#39;a=1; b=2&#39;).timeit()\r\n0.54962537085770791\r\n</code></pre>\r\n<p>\r\n\tIn contrast to <code>timeit</code>&rsquo;s fine level of granularity, the <a href=\"https://docs.python.org/3/library/profile.html#module-profile\"><code>profile</code></a><a href=\"https://docs.python.org/3/library/profile.html#module-profile\"> </a>and <a href=\"https://docs.python.org/3/library/profile.html#module-pstats\"><code>pstats</code></a><a href=\"https://docs.python.org/3/library/profile.html#module-pstats\"> </a>modules provide tools for identifying time critical sections in larger blocks of code.</p>\r\n<h2>\r\n\tQuality Control</h2>\r\n<p>\r\n\tOne approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process.</p>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/doctest.html#module-doctest\" target=\"_blank\"><code>doctest</code></a> module provides a tool for scanning a module and validating tests embedded in a program&rsquo;s docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation:</p>\r\n<pre>\r\n<code>def average(values):\r\n    &quot;&quot;&quot;Computes the arithmetic mean of a list of numbers.\r\n\r\n    &gt;&gt;&gt; print(average([20, 30, 70]))\r\n    40.0\r\n    &quot;&quot;&quot;\r\n    return sum(values) / len(values)\r\n\r\nimport doctest\r\ndoctest.testmod()   # automatically validate the embedded tests\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" target=\"_blank\"><code>unittest</code></a> module is not as effortless as the <code>doctest</code> module, but it allows a more comprehensive set of tests to be maintained in a separate file:</p>\r\n<pre>\r\n<code>import unittest\r\n\r\nclass TestStatisticalFunctions(unittest.TestCase):\r\n\r\n    def test_average(self):\r\n        self.assertEqual(average([20, 30, 70]), 40.0)\r\n        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\r\n        with self.assertRaises(ZeroDivisionError):\r\n            average([])\r\n        with self.assertRaises(TypeError):\r\n            average(20, 30, 70)\r\n\r\nunittest.main()  # Calling from the command line invokes all tests\r\n</code></pre>\r\n<h2>\r\n\tBatteries Included</h2>\r\n<p>\r\n\tPython has a &ldquo;batteries included&rdquo; philosophy. This is best seen through the sophisticated and robust capabilities of its larger packages. For example:</p>\r\n<ul>\r\n\t<li>\r\n\t\tThe <a href=\"https://docs.python.org/3/library/xmlrpc.client.html#module-xmlrpc.client\" target=\"_blank\"><code>xmlrpc.client</code></a> and <a href=\"https://docs.python.org/3/library/xmlrpc.server.html#module-xmlrpc.server\" target=\"_blank\"><code>xmlrpc.server</code></a> modules make implementing remote procedure calls into an almost trivial task. Despite the modules names, no direct knowledge or handling of XML is needed.</li>\r\n\t<li>\r\n\t\tThe <a href=\"https://docs.python.org/3/library/email.html#module-email\" target=\"_blank\"><code>email</code></a> package is a library for managing email messages, including MIME and other <a href=\"https://tools.ietf.org/html/rfc2822.html\" target=\"_blank\"><strong>RFC 2822</strong></a>-based message documents. Unlike <a href=\"https://docs.python.org/3/library/smtplib.html#module-smtplib\"><code>smtplib</code></a><a href=\"https://docs.python.org/3/library/smtplib.html#module-smtplib\"> </a>and <a href=\"https://docs.python.org/3/library/poplib.html#module-poplib\"><code>poplib</code></a><a href=\"https://docs.python.org/3/library/poplib.html#module-poplib\"> </a>which actually send and receive messages, the email package has a complete toolset for building or decoding complex message structures (including attachments) and for implementing internet encoding and header protocols.</li>\r\n\t<li>\r\n\t\tThe <a href=\"https://docs.python.org/3/library/json.html#module-json\"><code>json</code></a><a href=\"https://docs.python.org/3/library/json.html#module-json\"> </a>package provides robust support for parsing this popular data interchange format. The <a href=\"https://docs.python.org/3/library/csv.html#module-csv\" target=\"_blank\"><code>csv</code></a> module supports direct reading and writing of files in Comma-Separated Value format, commonly supported by databases and spreadsheets. XML processing is supported by the <a href=\"https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree\" target=\"_blank\"><code>xml.etree.ElementTree</code></a>, <a href=\"https://docs.python.org/3/library/xml.dom.html#module-xml.dom\" target=\"_blank\"><code>xml.dom</code></a> and <a href=\"https://docs.python.org/3/library/xml.sax.html#module-xml.sax\" target=\"_blank\"><code>xml.sax</code></a> packages. Together, these modules and packages greatly simplify data interchange between Python applications and other tools.</li>\r\n\t<li>\r\n\t\tThe <a href=\"../library/sqlite3.html#module-sqlite3\" target=\"_blank\"><code>sqlite3</code></a> module is a wrapper for the SQLite database library, providing a persistent database that can be updated and accessed using slightly nonstandard SQL syntax.</li>\r\n\t<li>\r\n\t\tInternationalization is supported by a number of modules including <a href=\"https://docs.python.org/3/library/gettext.html#module-gettext\" target=\"_blank\"><code>gettext</code></a>, <a href=\"https://docs.python.org/3/library/locale.html#module-locale\" target=\"_blank\"><code>locale</code></a>, and the <a href=\"https://docs.python.org/3/library/codecs.html#module-codecs\"><code>codecs</code></a><a href=\"https://docs.python.org/3/library/codecs.html#module-codecs\"> </a>package.</li>\r\n</ul>\r\n<h2>\r\n\tOutput Formatting</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/reprlib.html#module-reprlib\"><code>reprlib</code></a><a href=\"https://docs.python.org/3/library/reprlib.html#module-reprlib\"> </a>module provides a version of <code>repr()</code> customized for abbreviated displays of large or deeply nested containers:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import reprlib\r\n&gt;&gt;&gt; reprlib.repr(set(&#39;supercalifragilisticexpialidocious&#39;))\r\n&quot;{&#39;a&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, ...}&quot;\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/pprint.html#module-pprint\"><code>pprint</code></a><a href=\"https://docs.python.org/3/library/pprint.html#module-pprint\"> </a>module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the &ldquo;pretty printer&rdquo; adds line breaks and indentation to more clearly reveal data structure:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import pprint\r\n&gt;&gt;&gt; t = [[[[&#39;black&#39;, &#39;cyan&#39;], &#39;white&#39;, [&#39;green&#39;, &#39;red&#39;]], [[&#39;magenta&#39;,\r\n...     &#39;yellow&#39;], &#39;blue&#39;]]]\r\n...\r\n&gt;&gt;&gt; pprint.pprint(t, width=30)\r\n[[[[&#39;black&#39;, &#39;cyan&#39;],\r\n   &#39;white&#39;,\r\n   [&#39;green&#39;, &#39;red&#39;]],\r\n  [[&#39;magenta&#39;, &#39;yellow&#39;],\r\n   &#39;blue&#39;]]]\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/textwrap.html#module-textwrap\"><code>textwrap</code></a><a href=\"https://docs.python.org/3/library/textwrap.html#module-textwrap\"> </a>module formats paragraphs of text to fit a given screen width:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import textwrap\r\n&gt;&gt;&gt; doc = &quot;&quot;&quot;The wrap() method is just like fill() except that it returns\r\n... a list of strings instead of one big string with newlines to separate\r\n... the wrapped lines.&quot;&quot;&quot;\r\n...\r\n&gt;&gt;&gt; print(textwrap.fill(doc, width=40))\r\nThe wrap() method is just like fill()\r\nexcept that it returns a list of strings\r\ninstead of one big string with newlines\r\nto separate the wrapped lines.\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/locale.html#module-locale\"><code>locale</code></a><a href=\"https://docs.python.org/3/library/locale.html#module-locale\"> </a>module accesses a database of culture specific data formats. The grouping attribute of locale&rsquo;s format function provides a direct way of formatting numbers with group separators:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import locale\r\n&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, &#39;English_United States.1252&#39;)\r\n&#39;English_United States.1252&#39;\r\n&gt;&gt;&gt; conv = locale.localeconv()          # get a mapping of conventions\r\n&gt;&gt;&gt; x = 1234567.8\r\n&gt;&gt;&gt; locale.format(&quot;%d&quot;, x, grouping=True)\r\n&#39;1,234,567&#39;\r\n&gt;&gt;&gt; locale.format_string(&quot;%s%.*f&quot;, (conv[&#39;currency_symbol&#39;],\r\n...                      conv[&#39;frac_digits&#39;], x), grouping=True)\r\n&#39;$1,234,567.80&#39;\r\n</code></pre>\r\n<h2>\r\n\tTemplating</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/string.html#module-string\"><code>string</code></a><a href=\"https://docs.python.org/3/library/string.html#module-string\"> </a>module includes a versatile <a href=\"https://docs.python.org/3/library/string.html#string.Template\"><code>Template</code></a><a href=\"https://docs.python.org/3/library/string.html#string.Template\"> </a>class with a simplified syntax suitable for editing by end-users. This allows users to customize their applications without having to alter the application.</p>\r\n<p>\r\n\tThe format uses placeholder names formed by <code>$</code> with valid Python identifiers (alphanumeric characters and underscores). Surrounding the placeholder with braces allows it to be followed by more alphanumeric letters with no intervening spaces. Writing <code>$$</code> creates a single escaped <code>$</code>:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from string import Template\r\n&gt;&gt;&gt; t = Template(&#39;${village}folk send $$10 to $cause.&#39;)\r\n&gt;&gt;&gt; t.substitute(village=&#39;Nottingham&#39;, cause=&#39;the ditch fund&#39;)\r\n&#39;Nottinghamfolk send $10 to the ditch fund.&#39;\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/string.html#string.Template.substitute\" target=\"_blank\"><code>substitute()</code></a> method raises a <a href=\"https://docs.python.org/3/library/exceptions.html#KeyError\"><code>KeyError</code></a><a href=\"https://docs.python.org/3/library/exceptions.html#KeyError\"> </a>when a placeholder is not supplied in a dictionary or a keyword argument. For mail-merge style applications, user supplied data may be incomplete and the <a href=\"https://docs.python.org/3/library/string.html#string.Template.safe_substitute\" target=\"_blank\"><code>safe_substitute()</code></a> method may be more appropriate &mdash; it will leave placeholders unchanged if data is missing:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; t = Template(&#39;Return the $item to $owner.&#39;)\r\n&gt;&gt;&gt; d = dict(item=&#39;unladen swallow&#39;)\r\n&gt;&gt;&gt; t.substitute(d)\r\nTraceback (most recent call last):\r\n  ...\r\nKeyError: &#39;owner&#39;\r\n&gt;&gt;&gt; t.safe_substitute(d)\r\n&#39;Return the unladen swallow to $owner.&#39;\r\n</code></pre>\r\n<p>\r\n\tTemplate subclasses can specify a custom delimiter. For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import time, os.path\r\n&gt;&gt;&gt; photofiles = [&#39;img_1074.jpg&#39;, &#39;img_1076.jpg&#39;, &#39;img_1077.jpg&#39;]\r\n&gt;&gt;&gt; class BatchRename(Template):\r\n...     delimiter = &#39;%&#39;\r\n&gt;&gt;&gt; fmt = input(&#39;Enter rename style (%d-date %n-seqnum %f-format):  &#39;)\r\nEnter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f\r\n\r\n&gt;&gt;&gt; t = BatchRename(fmt)\r\n&gt;&gt;&gt; date = time.strftime(&#39;%d%b%y&#39;)\r\n&gt;&gt;&gt; for i, filename in enumerate(photofiles):\r\n...     base, ext = os.path.splitext(filename)\r\n...     newname = t.substitute(d=date, n=i, f=ext)\r\n...     print(&#39;{0} --&gt; {1}&#39;.format(filename, newname))\r\n\r\nimg_1074.jpg --&gt; Ashley_0.jpg\r\nimg_1076.jpg --&gt; Ashley_1.jpg\r\nimg_1077.jpg --&gt; Ashley_2.jpg\r\n</code></pre>\r\n<p>\r\n\tAnother application for templating is separating program logic from the details of multiple output formats. This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.</p>\r\n<h2>\r\n\tWorking with Binary Data Record Layouts</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/struct.html#module-struct\"><code>struct</code></a><a href=\"https://docs.python.org/3/library/struct.html#module-struct\"> </a>module provides <a href=\"https://docs.python.org/3/library/struct.html#struct.pack\" target=\"_blank\"><code>pack()</code></a> and <a href=\"https://docs.python.org/3/library/struct.html#struct.unpack\" target=\"_blank\"><code>unpack()</code></a> functions for working with variable length binary record formats. The following example shows how to loop through header information in a ZIP file without using the <a href=\"https://docs.python.org/3/library/zipfile.html#module-zipfile\" target=\"_blank\"><code>zipfile</code></a> module. Pack codes <code>&quot;H&quot;</code> and <code>&quot;I&quot;</code> represent two and four byte unsigned numbers respectively. The <code>&quot;&lt;&quot;</code> indicates that they are standard size and in little-endian byte order:</p>\r\n<pre>\r\n<code class=\"python\">import struct\r\n\r\nwith open(&#39;myfile.zip&#39;, &#39;rb&#39;) as f:\r\n    data = f.read()\r\n\r\nstart = 0\r\nfor i in range(3):                      # show the first 3 file headers\r\n    start += 14\r\n    fields = struct.unpack(&#39;&lt;IIIHH&#39;, data[start:start+16])\r\n    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields\r\n\r\n    start += 16\r\n    filename = data[start:start+filenamesize]\r\n    start += filenamesize\r\n    extra = data[start:start+extra_size]\r\n    print(filename, hex(crc32), comp_size, uncomp_size)\r\n\r\n    start += extra_size + comp_size     # skip to the next header\r\n</code></pre>\r\n<h2>\r\n\tMulti-threading</h2>\r\n<p>\r\n\tThreading is a technique for decoupling tasks which are not sequentially dependent. Threads can be used to improve the responsiveness of applications that accept user input while other tasks run in the background. A related use case is running I/O in parallel with computations in another thread.</p>\r\n<p>\r\n\tThe following code shows how the high level <a href=\"https://docs.python.org/3/library/threading.html#module-threading\"><code>threading</code></a><a href=\"https://docs.python.org/3/library/threading.html#module-threading\"> </a>module can run tasks in background while the main program continues to run:</p>\r\n<pre>\r\n<code class=\"python\">import threading, zipfile\r\n\r\nclass AsyncZip(threading.Thread):\r\n    def __init__(self, infile, outfile):\r\n        threading.Thread.__init__(self)\r\n        self.infile = infile\r\n        self.outfile = outfile\r\n\r\n    def run(self):\r\n        f = zipfile.ZipFile(self.outfile, &#39;w&#39;, zipfile.ZIP_DEFLATED)\r\n        f.write(self.infile)\r\n        f.close()\r\n        print(&#39;Finished background zip of:&#39;, self.infile)\r\n\r\nbackground = AsyncZip(&#39;mydata.txt&#39;, &#39;myarchive.zip&#39;)\r\nbackground.start()\r\nprint(&#39;The main program continues to run in foreground.&#39;)\r\n\r\nbackground.join()    # Wait for the background task to finish\r\nprint(&#39;Main program waited until background was done.&#39;)\r\n</code></pre>\r\n<p>\r\n\tThe principal challenge of multi-threaded applications is coordinating threads that share data or other resources. To that end, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores.</p>\r\n<p>\r\n\tWhile those tools are powerful, minor design errors can result in problems that are difficult to reproduce. So, the preferred approach to task coordination is to concentrate all access to a resource in a single thread and then use the <a href=\"https://docs.python.org/3/library/queue.html#module-queue\"><code>queue</code></a><a href=\"https://docs.python.org/3/library/queue.html#module-queue\"> </a>module to feed that thread with requests from other threads. Applications using <a href=\"https://docs.python.org/3/library/queue.html#queue.Queue\"><code>Queue</code></a><a href=\"https://docs.python.org/3/library/queue.html#queue.Queue\"> </a>objects for inter-thread communication and coordination are easier to design, more readable, and more reliable.</p>\r\n<h2>\r\n\tLogging</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/logging.html#module-logging\"><code>logging</code></a><a href=\"https://docs.python.org/3/library/logging.html#module-logging\"> </a>module offers a full featured and flexible logging system. At its simplest, log messages are sent to a file or to <code>sys.stderr</code>:</p>\r\n<pre>\r\n<code class=\"python\">import logging\r\nlogging.debug(&#39;Debugging information&#39;)\r\nlogging.info(&#39;Informational message&#39;)\r\nlogging.warning(&#39;Warning:config file %s not found&#39;, &#39;server.conf&#39;)\r\nlogging.error(&#39;Error occurred&#39;)\r\nlogging.critical(&#39;Critical error -- shutting down&#39;)\r\n</code></pre>\r\n<p>\r\n\tThis produces the following output:</p>\r\n<pre>\r\n<code class=\"python\">WARNING:root:Warning:config file server.conf not found\r\nERROR:root:Error occurred\r\nCRITICAL:root:Critical error -- shutting down\r\n</code></pre>\r\n<p>\r\n\tBy default, informational and debugging messages are suppressed and the output is sent to standard error. Other output options include routing messages through email, datagrams, sockets, or to an HTTP Server. New filters can select different routing based on message priority: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, and <code>CRITICAL</code>.</p>\r\n<p>\r\n\tThe logging system can be configured directly from Python or can be loaded from a user editable configuration file for customized logging without altering the application.</p>\r\n<h2>\r\n\tWeak References</h2>\r\n<p>\r\n\tPython does automatic memory management (reference counting for most objects and <a href=\"https://docs.python.org/3/glossary.html#term-garbage-collection\" target=\"_blank\">garbage collection</a> to eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated.</p>\r\n<p>\r\n\tThis approach works fine for most applications but occasionally there is a need to track objects only as long as they are being used by something else. Unfortunately, just tracking them creates a reference that makes them permanent. The <a href=\"https://docs.python.org/3/library/weakref.html#module-weakref\" target=\"_blank\"><code>weakref</code></a> module provides tools for tracking objects without creating a reference. When the object is no longer needed, it is automatically removed from a weakref table and a callback is triggered for weakref objects. Typical applications include caching objects that are expensive to create:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import weakref, gc\r\n&gt;&gt;&gt; class A:\r\n...     def __init__(self, value):\r\n...         self.value = value\r\n...     def __repr__(self):\r\n...         return str(self.value)\r\n...\r\n&gt;&gt;&gt; a = A(10)                   # create a reference\r\n&gt;&gt;&gt; d = weakref.WeakValueDictionary()\r\n&gt;&gt;&gt; d[&#39;primary&#39;] = a            # does not create a reference\r\n&gt;&gt;&gt; d[&#39;primary&#39;]                # fetch the object if it is still alive\r\n10\r\n&gt;&gt;&gt; del a                       # remove the one reference\r\n&gt;&gt;&gt; gc.collect()                # run garbage collection right away\r\n0\r\n&gt;&gt;&gt; d[&#39;primary&#39;]                # entry was automatically removed\r\nTraceback (most recent call last):\r\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    d[&#39;primary&#39;]                # entry was automatically removed\r\n  File &quot;C:/python37/lib/weakref.py&quot;, line 46, in __getitem__\r\n    o = self.data[key]()\r\nKeyError: &#39;primary&#39;\r\n</code></pre>\r\n<h2>\r\n\tTools for Working with Lists</h2>\r\n<p>\r\n\tMany data structure needs can be met with the built-in list type. However, sometimes there is a need for alternative implementations with different performance trade-offs.</p>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/array.html#module-array\"><code>array</code></a><a href=\"https://docs.python.org/3/library/array.html#module-array\"> </a>module provides an <a href=\"https://docs.python.org/3/library/array.html#array.array\" target=\"_blank\"><code>array()</code></a> object that is like a list that stores only homogeneous data and stores it more compactly. The following example shows an array of numbers stored as two byte unsigned binary numbers (typecode <code>&quot;H&quot;</code>) rather than the usual 16 bytes per entry for regular lists of Python int objects:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from array import array\r\n&gt;&gt;&gt; a = array(&#39;H&#39;, [4000, 10, 700, 22222])\r\n&gt;&gt;&gt; sum(a)\r\n26932\r\n&gt;&gt;&gt; a[1:3]\r\narray(&#39;H&#39;, [10, 700])\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/collections.html#module-collections\"><code>collections</code></a><a href=\"https://docs.python.org/3/library/collections.html#module-collections\"> </a>module provides a <a href=\"https://docs.python.org/3/library/collections.html#collections.deque\" target=\"_blank\"><code>deque()</code></a> object that is like a list with faster appends and pops from the left side but slower lookups in the middle. These objects are well suited for implementing queues and breadth first tree searches:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from collections import deque\r\n&gt;&gt;&gt; d = deque([&quot;task1&quot;, &quot;task2&quot;, &quot;task3&quot;])\r\n&gt;&gt;&gt; d.append(&quot;task4&quot;)\r\n&gt;&gt;&gt; print(&quot;Handling&quot;, d.popleft())\r\nHandling task1\r\n</code></pre>\r\n<pre>\r\n<code class=\"python\">unsearched = deque([starting_node])\r\ndef breadth_first_search(unsearched):\r\n    node = unsearched.popleft()\r\n    for m in gen_moves(node):\r\n        if is_goal(m):\r\n            return m\r\n        unsearched.append(m)\r\n</code></pre>\r\n<p>\r\n\tIn addition to alternative list implementations, the library also offers other tools such as the <a href=\"https://docs.python.org/3/library/bisect.html#module-bisect\"><code>bisect</code></a><a href=\"https://docs.python.org/3/library/bisect.html#module-bisect\"> </a>module with functions for manipulating sorted lists:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import bisect\r\n&gt;&gt;&gt; scores = [(100, &#39;perl&#39;), (200, &#39;tcl&#39;), (400, &#39;lua&#39;), (500, &#39;python&#39;)]\r\n&gt;&gt;&gt; bisect.insort(scores, (300, &#39;ruby&#39;))\r\n&gt;&gt;&gt; scores\r\n[(100, &#39;perl&#39;), (200, &#39;tcl&#39;), (300, &#39;ruby&#39;), (400, &#39;lua&#39;), (500, &#39;python&#39;)]\r\n</code></pre>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/heapq.html#module-heapq\"><code>heapq</code></a><a href=\"https://docs.python.org/3/library/heapq.html#module-heapq\"> </a>module provides functions for implementing heaps based on regular lists. The lowest valued entry is always kept at position zero. This is useful for applications which repeatedly access the smallest element but do not want to run a full list sort:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from heapq import heapify, heappop, heappush\r\n&gt;&gt;&gt; data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\r\n&gt;&gt;&gt; heapify(data)                      # rearrange the list into heap order\r\n&gt;&gt;&gt; heappush(data, -5)                 # add a new entry\r\n&gt;&gt;&gt; [heappop(data) for i in range(3)]  # fetch the three smallest entries\r\n[-5, 0, 1]\r\n</code></pre>\r\n<h2>\r\n\tDecimal Floating Point Arithmetic</h2>\r\n<p>\r\n\tThe <a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\"><code>decimal</code></a><a href=\"https://docs.python.org/3/library/decimal.html#module-decimal\"> </a>module offers a <a href=\"https://docs.python.org/3/library/decimal.html#decimal.Decimal\"><code>Decimal</code></a><a href=\"https://docs.python.org/3/library/decimal.html#decimal.Decimal\"> </a>datatype for decimal floating point arithmetic. Compared to the built-in <a href=\"https://docs.python.org/3/library/functions.html#float\"><code>float</code></a><a href=\"https://docs.python.org/3/library/functions.html#float\"> </a>implementation of binary floating point, the class is especially helpful for</p>\r\n<ul>\r\n\t<li>\r\n\t\tfinancial applications and other uses which require exact decimal representation,</li>\r\n\t<li>\r\n\t\tcontrol over precision,</li>\r\n\t<li>\r\n\t\tcontrol over rounding to meet legal or regulatory requirements,</li>\r\n\t<li>\r\n\t\ttracking of significant decimal places, or</li>\r\n\t<li>\r\n\t\tapplications where the user expects the results to match calculations done by hand.</li>\r\n</ul>\r\n<p>\r\n\tFor example, calculating a 5% tax on a 70 cent phone charge gives different results in decimal floating point and binary floating point. The difference becomes significant if the results are rounded to the nearest cent:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; from decimal import *\r\n&gt;&gt;&gt; round(Decimal(&#39;0.70&#39;) * Decimal(&#39;1.05&#39;), 2)\r\nDecimal(&#39;0.74&#39;)\r\n&gt;&gt;&gt; round(.70 * 1.05, 2)\r\n0.73\r\n</code></pre>\r\n<p>\r\n\tThe <code>Decimal</code> result keeps a trailing zero, automatically inferring four place significance from multiplicands with two place significance. Decimal reproduces mathematics as done by hand and avoids issues that can arise when binary floating point cannot exactly represent decimal quantities.</p>\r\n<p>\r\n\tExact representation enables the <code>Decimal</code> class to perform modulo calculations and equality tests that are unsuitable for binary floating point:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; Decimal(&#39;1.00&#39;) % Decimal(&#39;.10&#39;)\r\nDecimal(&#39;0.00&#39;)\r\n&gt;&gt;&gt; 1.00 % 0.10\r\n0.09999999999999995\r\n\r\n&gt;&gt;&gt; sum([Decimal(&#39;0.1&#39;)]*10) == Decimal(&#39;1.0&#39;)\r\nTrue\r\n&gt;&gt;&gt; sum([0.1]*10) == 1.0\r\nFalse\r\n</code></pre>\r\n<p>\r\n\tThe <code>decimal</code> module provides arithmetic with as much precision as needed:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; getcontext().prec = 36\r\n&gt;&gt;&gt; Decimal(1) / Decimal(7)\r\nDecimal(&#39;0.142857142857142857142857142857142857&#39;)\r\n</code></pre>"
          }
        },
        {
          "Interactive Mode in Python": {
            "content": "<h2>\r\n\tError Handling</h2>\r\n<p>\r\n\tWhen an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack trace. (Exceptions handled by an <code>except</code> clause in a <code>try</code> statement are not errors in this context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit; this applies to internal inconsistencies and some cases of running out of memory. All error messages are written to the standard error stream; normal output from executed commands is written to standard output.</p>\r\n<p>\r\n\tTyping the interrupt character (usually Control-C or Delete) to the primary or secondary prompt cancels the input and returns to the primary prompt.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tA problem with the GNU Readline package may prevent this.</p>\r\n</blockquote>\r\n<p>\r\n\tTyping an interrupt while a command is executing raises the <a href=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"><code>KeyboardInterrupt</code></a><a href=\"https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt\"> </a>exception, which may be handled by a <code>try</code> statement.</p>\r\n<h2>\r\n\tExecutable Python Scripts</h2>\r\n<p>\r\n\tOn BSD&rsquo;ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line</p>\r\n<pre>\r\n<code class=\"python\">#!/usr/bin/env python3.5\r\n</code></pre>\r\n<p>\r\n\t(assuming that the interpreter is on the user&rsquo;s <code>PATH</code>) at the beginning of the script and giving the file an executable mode. The <code>#!</code> must be the first two characters of the file. On some platforms, this first line must end with a Unix-style line ending (<code>&#39;\\n&#39;</code>), not a Windows (<code>&#39;\\r\\n&#39;</code>) line ending. Note that the hash, or pound, character, <code>&#39;#&#39;</code>, is used to start a comment in Python.</p>\r\n<p>\r\n\tThe script can be given an executable mode, or permission, using the <strong>chmod</strong> command.</p>\r\n<pre>\r\n<code class=\"python\">$ chmod +x myscript.py\r\n</code></pre>\r\n<p>\r\n\tOn Windows systems, there is no notion of an &ldquo;executable mode&rdquo;. The Python installer automatically associates <code>.py</code> files with <code>python.exe</code> so that a double-click on a Python file will run it as a script. The extension can also be <code>.pyw</code>, in that case, the console window that normally appears is suppressed.</p>\r\n<h2>\r\n\tThe Interactive Startup File</h2>\r\n<p>\r\n\tWhen you use Python interactively, it is frequently handy to have some standard commands executed every time the interpreter is started. You can do this by setting an environment variable named <a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP\"><code>PYTHONSTARTUP</code></a><a href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP\"> </a>to the name of a file containing your start-up commands. This is similar to the <code>.profile</code> feature of the Unix shells.</p>\r\n<p>\r\n\tThis file is only read in interactive sessions, not when Python reads commands from a script, and not when <code>/dev/tty</code> is given as the explicit source of commands (which otherwise behaves like an interactive session). It is executed in the same namespace where interactive commands are executed, so that objects that it defines or imports can be used without qualification in the interactive session. You can also change the prompts <code>sys.ps1</code> and <code>sys.ps2</code> in this file.</p>\r\n<p>\r\n\tIf you want to read an additional start-up file from the current directory, you can program this in the global start-up file using code like <code>if os.path.isfile(&#39;.pythonrc.py&#39;): exec(open(&#39;.pythonrc.py&#39;).read())</code>. If you want to use the startup file in a script, you must do this explicitly in the script:</p>\r\n<pre>\r\n<code class=\"python\">import os\r\nfilename = os.environ.get(&#39;PYTHONSTARTUP&#39;)\r\nif filename and os.path.isfile(filename):\r\n    with open(filename) as fobj:\r\n        startup_file = fobj.read()\r\n    exec(startup_file)\r\n</code></pre>\r\n<h2>\r\n\tThe Customization Modules</h2>\r\n<p>\r\n\tPython provides two hooks to let you customize it: <code>sitecustomize</code> and <code>usercustomize</code>. To see how it works, you need first to find the location of your user site-packages directory. Start Python and run this code:</p>\r\n<pre>\r\n<code class=\"python\">&gt;&gt;&gt; import site\r\n&gt;&gt;&gt; site.getusersitepackages()\r\n&#39;/home/user/.local/lib/python3.5/site-packages&#39;\r\n</code></pre>\r\n<p>\r\n\tNow you can create a file named <code>usercustomize.py</code> in that directory and put anything you want in it. It will affect every invocation of Python, unless it is started with the <a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-s\" target=\"_blank\"><code>-s</code></a> option to disable the automatic import.</p>\r\n<p>\r\n\t<code>sitecustomize</code> works in the same way, but is typically created by an administrator of the computer in the global site-packages directory, and is imported before <code>usercustomize</code>. See the documentation of the <a href=\"https://docs.python.org/3/library/site.html#module-site\"><code>site</code></a><a href=\"https://docs.python.org/3/library/site.html#module-site\"> </a>module for more details.</p>"
          }
        },
        {
          "Functional Programming in Python": {
            "content": "<p>\r\n\tFunctional Programming &mdash; is the process of building software by composing pure functions, avoiding shared state, mutable data, and side-effects.</p>\r\n<h2>\r\n\tlambda</h2>\r\n<p>\r\n\tIn Python, anonymous function means that a function is without a name. As we already know that def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions. It has the following syntax:</p>\r\n<pre>\r\nlambda arguments: expression</pre>\r\n<p>\r\n\tThis function can have any number of arguments but only one expression, which is evaluated and returned. One is free to use lambda functions wherever function objects are required. You need to keep in your knowledge that lambda functions are syntactically restricted to a single expression. It has various uses in particular fields of programming besides other types of expressions in functions. Let&rsquo;s look at this example and try to understand the difference between a normal def defined function and lambda function. This is a program that returns the cube of a given value:</p>\r\n<pre>\r\n<code class=\"python\"># Python code to illustrate cube of a number  \r\n# showing difference between def() and lambda(). \r\ndef cube(y): \r\n    return y*y*y; \r\n  \r\ng = lambda x: x*x*x \r\nprint(g(7)) \r\n  \r\nprint(cube(5)) \r\n</code></pre>\r\n<p>\r\n\tOutput:</p>\r\n<pre>\r\n343\r\n125\r\n</pre>\r\n<ul>\r\n\t<li>\r\n\t\tWithout using Lambda : Here, both of them returns the cube of a given number. But, while using def, we needed to define a function with a name cube and needed to pass a value to it. After execution, we also needed to return the result from where the function was called using the return keyword.</li>\r\n\t<li>\r\n\t\tUsing Lambda : Lambda definition does not include a &ldquo;return&rdquo; statement, it always contains an expression which is returned. We can also put a lambda definition anywhere a function is expected, and we don&rsquo;t have to assign it to a variable at all. This is the simplicity of lambda functions.</li>\r\n</ul>\r\n<h2>\r\n\tfilter()</h2>\r\n<p>\r\n\tThe filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not.&nbsp;It has the following syntax:</p>\r\n<pre>\r\nfilter(function, sequence)\r\n<strong>Parameters:</strong>\r\nfunction: function that tests if each element of a \r\nsequence true or not.\r\nsequence: sequence which needs to be filtered, it can \r\nbe sets, lists, tuples, or containers of any iterators.\r\n<strong>Returns:</strong>\r\nreturns an iterator that is already filtered.\r\n</pre>\r\n<pre>\r\n<code class=\"python\"><code># function that filters vowels \r\ndef fun(variable): \r\n    letters = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;] \r\n    if (variable in letters): \r\n        return True\r\n    else: \r\n        return False\r\n  \r\n  \r\n# sequence \r\nsequence = [&#39;g&#39;, &#39;e&#39;, &#39;e&#39;, &#39;j&#39;, &#39;k&#39;, &#39;s&#39;, &#39;p&#39;, &#39;r&#39;] \r\n  \r\n# using filter function \r\nfiltered = filter(fun, sequence) \r\n  \r\nprint(&#39;The filtered letters are:&#39;) \r\nfor s in filtered: \r\n    print(s) \r\n</code></code></pre>\r\n<p>\r\n\tOutput:</p>\r\n<pre>\r\nThe filtered letters are:\r\ne\r\ne\r\n</pre>\r\n<p>\r\n\tIt is normally used with Lambda functions to separate list, tuple, or sets.</p>\r\n<pre>\r\n<code class=\"python\"><code># a list contains both even and odd numbers.  \r\nseq = [0, 1, 2, 3, 5, 8, 13] \r\n  \r\n# result contains odd numbers of the list \r\nresult = filter(lambda x: x % 2 != 0, seq) \r\nprint(list(result)) \r\n  \r\n# result contains even numbers of the list \r\nresult = filter(lambda x: x % 2 == 0, seq) \r\nprint(list(result)) \r\n</code></code></pre>\r\n<p>\r\n\tOutput:</p>\r\n<pre>\r\n[1, 3, 5, 13]\r\n[0, 2, 8]\r\n</pre>\r\n<h2>\r\n\tmap()</h2>\r\n<p>\r\n\tmap() function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable (list, tuple etc.)</p>\r\n<p>\r\n\tSyntax :</p>\r\n<pre>\r\nmap(fun, iter)\r\n</pre>\r\n<p>\r\n\tParameters :</p>\r\n<pre>\r\nfun : It is a function to which map passes each element of given iterable.\r\niter : It is a iterable which is to be mapped.\r\n</pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tYou can pass one or more iterable to the map() function.</p>\r\n</blockquote>\r\n<p>\r\n\tReturns :</p>\r\n<pre>\r\nReturns a list of the results after applying the given function  \r\nto each item of a given iterable (list, tuple etc.) \r\n</pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tThe returned value from map() (map object) then can be passed to functions like list() (to create a list), set() (to create a set).</p>\r\n</blockquote>\r\n<pre>\r\n<code class=\"python\"># Python program to demonstrate working \r\n# of map. \r\n  \r\n# Return double of n \r\ndef addition(n): \r\n    return n + n \r\n  \r\n# We double all numbers using map() \r\nnumbers = (1, 2, 3, 4) \r\nresult = map(addition, numbers) \r\nprint(list(result)) \r\n</code></pre>\r\n<p>\r\n\tOutput :</p>\r\n<pre>\r\n[2, 4, 6, 8]\r\n</pre>\r\n<p>\r\n\tWe can also use lambda expressions with map to achieve above result.</p>\r\n<pre>\r\n<code class=\"python\"># Double all numbers using map and lambda \r\n  \r\nnumbers = (1, 2, 3, 4) \r\nresult = map(lambda x: x + x, numbers) \r\nprint(list(result)) \r\n</code></pre>\r\n<p>\r\n\tOutput :</p>\r\n<pre>\r\n[2, 4, 6, 8]</pre>\r\n<h2>\r\n\treduce()</h2>\r\n<p>\r\n\tThe reduce(fun,seq) function is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along.This function is defined in &ldquo;functools&rdquo; module.</p>\r\n<ul>\r\n\t<li>\r\n\t\tAt first step, first two elements of sequence are picked and the result is obtained.</li>\r\n\t<li>\r\n\t\tNext step is to apply the same function to the previously attained result and the number just succeeding the second element and the result is again stored.</li>\r\n\t<li>\r\n\t\tThis process continues till no more elements are left in the container.</li>\r\n\t<li>\r\n\t\tThe final returned result is returned and printed on console.</li>\r\n</ul>\r\n<pre>\r\n<code class=\"python\"># python code to demonstrate working of reduce() \r\n  \r\n# importing functools for reduce() \r\nimport functools \r\n  \r\n# initializing list \r\nlis = [ 1 , 3, 5, 6, 2, ] \r\n\r\n# using reduce to compute sum of list \r\nprint (&quot;The sum of the list elements is : &quot;,end=&quot;&quot;) \r\nprint (functools.reduce(lambda a,b : a+b,lis)) \r\n  \r\n# using reduce to compute maximum element from list \r\nprint (&quot;The maximum element of the list is : &quot;,end=&quot;&quot;) \r\nprint (functools.reduce(lambda a,b : a if a &gt; b else b,lis)) \r\n</code></pre>\r\n<p>\r\n\tOutput:</p>\r\n<pre>\r\nThe sum of the list elements is : 17\r\nThe maximum element of the list is : 6\r\n</pre>"
          }
        }
      ]
    }
  }
]