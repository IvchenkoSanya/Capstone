[
  {
    "query": "javascript-basics",
    "llm_version": "gpt_4",
    "language": "English",
    "course_content": {
      "course_name": "JS Basics",
      "lessons": [
        {
          "title": "Hello, world!",
          "topics": []
        },
        {
          "title": "Code structure",
          "topics": []
        },
        {
          "title": "The modern mode, \"use strict\"",
          "topics": []
        },
        {
          "title": "Variables",
          "topics": []
        },
        {
          "title": "Data types",
          "topics": []
        },
        {
          "title": "Type Conversions",
          "topics": []
        }
      ],
      "content": [
        {
          "Hello, world!": {
            "content": "<p>\r\n\tThe tutorial that you&#39;re reading is about core JavaScript, which is platform-independent. Further on, you will learn Node.JS and other platforms that use it.</p>\r\n<p>\r\n\tBut, we need a working environment to run our scripts, and, just because this book is online, the browser is a good choice. We&#39;ll keep the amount of browser-specific commands (like <code>alert</code>) to a minimum so that you don&#39;t spend time on them if you plan to concentrate on another environment like Node.JS. On the other hand, browser details are explained in detail in the next part of the tutorial.</p>\r\n<p>\r\n\tSo first, let&#39;s see how to attach a script to a webpage. For server-side environments, you can just execute it with a command like <code>&quot;node my.js&quot;</code> for Node.JS.</p>\r\n<h2>\r\n\tThe &quot;script&quot; tag</h2>\r\n<p>\r\n\tJavaScript programs can be inserted in any part of an HTML document with the help of the <code>&lt;script&gt;</code> tag.</p>\r\n<p>\r\n\tFor instance:</p>\r\n<pre>\r\n<code>&lt;!DOCTYPE HTML&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n  &lt;p&gt;Before the script...&lt;/p&gt;\r\n*!*\r\n  &lt;script&gt;\r\n    alert( &#39;Hello, world!&#39; );\r\n  &lt;/script&gt;\r\n*/!*\r\n  &lt;p&gt;...After the script.&lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\r\n<p>\r\n\tThe <code>&lt;script&gt;</code> tag contains JavaScript code which is automatically executed when the browser meets the tag.</p>\r\n<h2>\r\n\t<code>The modern markup</code></h2>\r\n<p>\r\n\tThe <code>&lt;script&gt;</code> tag has a few attributes that are rarely used nowadays, but we can find them in old code:</p>\r\n<p>\r\n\tThe type attribute: <code>&lt;script type=...&gt;</code></p>\r\n<p>\r\n\t: The old standard HTML4 required a script to have a type. Usually it was<code> type=&quot;text/javascript&quot;</code>. It&#39;s not required anymore. Also, the modern standard totally changed the meaning of this attribute. Now it can be used for Javascript modules. But that&#39;s an advanced topic; we&#39;ll talk about modules later in another part of the tutorial.</p>\r\n<p>\r\n\tThe language attribute: <code>&lt;script language=...&gt; :</code> This attribute was meant to show the language of the script. This attribute no longer makes sense, because JavaScript is the default language. No need to use it.</p>\r\n<p>\r\n\tComments before and after scripts. : In really ancient books and guides, one may find comments inside <code>&lt;script&gt;</code>, like this:</p>\r\n<pre>\r\n<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;!--\r\n    ...\r\n//--&gt;&lt;/script&gt;\r\n</code></pre>\r\n<p>\r\n\tThis trick isn&#39;t used in modern JavaScript. These comments were used to hide the JavaScript code from old browsers that didn&#39;t know about a <code>&lt;script&gt;</code> tag. Since browsers released in the last 15 years don&#39;t have this issue, this kind of comment can help you identify really old code.</p>\r\n<h2>\r\n\tExternal scripts</h2>\r\n<p>\r\n\tIf we have a lot of JavaScript code, we can put it into a separate file.</p>\r\n<p>\r\n\tThe script file is attached to HTML with the src attribute:</p>\r\n<pre>\r\n<code>&lt;script src=&quot;/path/to/script.js&quot;&gt;&lt;/script&gt;\r\n</code></pre>\r\n<p>\r\n\tHere <code>/path/to/script.js</code> is an absolute path to the file with the script (from the site root).</p>\r\n<p>\r\n\tIt is also possible to provide a path relative to the current page. For instance, <code>src=&quot;https://github.com/iliakan/javascript-tutorial-en/blob/master/1-js/02-first-steps/01-hello-world/script.js&quot;</code> would mean a file <code>&quot;script.js&quot;</code> in the current folder.</p>\r\n<p>\r\n\tWe can give a full URL as well. For instance:</p>\r\n<pre>\r\n<code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.2.0/lodash.js&quot;&gt;&lt;/script&gt;\r\n</code></pre>\r\n<p>\r\n\tTo attach several scripts, use multiple tags:</p>\r\n<pre>\r\n<code>&lt;script src=&quot;/js/script1.js&quot;&gt;&lt;/script&gt;\r\n&lt;script src=&quot;/js/script2.js&quot;&gt;&lt;/script&gt;\r\n</code></pre>\r\n<p>\r\n\tAs a rule, only the simplest scripts are put into HTML. More complex ones reside in separate files. The benefit of a separate file is that the browser will download it and then store it in its <a href=\"https://en.wikipedia.org/wiki/Web_cache\" target=\"_blank\">cache</a>. After this, other pages that want the same script will take it from the cache instead of downloading it. So the file is actually downloaded only once. That saves traffic and makes pages faster.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tIf src is set, the script content is ignored.</p>\r\n\t<p>\r\n\t\tA single <code>&lt;script&gt;</code> tag can&#39;t have both the <code>src </code>attribute and the code inside.</p>\r\n</blockquote>\r\n<p>\r\n\tThis won&#39;t work:</p>\r\n<pre>\r\n<code>&lt;script *!*src*/!*=&quot;file.js&quot;&gt;\r\n  alert(1); // the content is ignored, because src is set\r\n&lt;/script&gt;</code></pre>\r\n<p>\r\n\tWe must choose: either it&#39;s an external <code>&lt;script src=&quot;https://github.com/iliakan/javascript-tutorial-en/blob/master/1-js/02-first-steps/01-hello-world/&hellip;&quot;&gt;</code> or a regular <code>&lt;script&gt;</code> with code.</p>\r\n<p>\r\n\tThe example above can be split into two scripts to work:</p>\r\n<pre>\r\n<code>&lt;script src=&quot;file.js&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\n  alert(1);\r\n&lt;/script&gt;</code></pre>\r\n<h2>\r\n\tSummary<span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span></h2>\r\n<ul>\r\n\t<li>\r\n\t\tWe can use a <code>&lt;script&gt;</code> tag to add JavaScript code to the page.</li>\r\n\t<li>\r\n\t\tThe <code>type</code> and <code>language </code>attributes are not required.</li>\r\n\t<li>\r\n\t\tA script in an external file can be inserted with <code>&lt;script src=&quot;https://github.com/iliakan/javascript-tutorial-en/blob/master/1-js/02-first-steps/01-hello-world/path/to/script.js&quot;&gt;&lt;/script&gt;</code>.</li>\r\n</ul>\r\n<p>\r\n\tThere is much more to learn about browser scripts and their interaction with the web-page. But let&#39;s keep in mind that this part of the tutorial is devoted to the JavaScript language, so we shouldn&#39;t distract ourselves from it. We&#39;ll be using a browser as a way to run JavaScript, which is very convenient for online reading, but yet one of many.</p>"
          }
        },
        {
          "Code structure": {
            "content": "<p>\r\n\tThe first thing to study is the building blocks of the code.</p>\r\n<h2>\r\n\tStatements</h2>\r\n<p>\r\n\tStatements are syntax constructs and commands that perform actions.</p>\r\n<p>\r\n\tWe&#39;ve already seen a statement <code>alert(&#39;Hello, world!&#39;)</code>, which shows the message &quot;Hello world!&quot;.</p>\r\n<p>\r\n\tWe can have as many statements in the code as we want. Another statement can be separated with a semicolon.</p>\r\n<p>\r\n\tFor example, here we split the message into two:</p>\r\n<pre>\r\n<code>alert(&#39;Hello&#39;); alert(&#39;World&#39;);\r\n</code></pre>\r\n<p>\r\n\tUsually each statement is written on a separate line -- thus the code becomes more readable:</p>\r\n<pre>\r\n<code>alert(&#39;Hello&#39;);\r\nalert(&#39;World&#39;);\r\n</code></pre>\r\n<h2>\r\n\tSemicolons</h2>\r\n<p>\r\n\tA semicolon may be omitted in most cases when a line break exists.</p>\r\n<p>\r\n\tThis would also work:</p>\r\n<pre>\r\n<code>alert(&#39;Hello&#39;)\r\nalert(&#39;World&#39;)\r\n</code></pre>\r\n<p>\r\n\tHere JavaScript interprets the line break as an &quot;implicit&quot; semicolon. That&#39;s also called an <a href=\"https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion\" target=\"_blank\">automatic semicolon insertion</a>.</p>\r\n<p>\r\n\tIn most cases a newline implies a semicolon. But &quot;in most cases&quot; does not mean &quot;always&quot;!</p>\r\n<p>\r\n\tThere are cases when a newline does not mean a semicolon, for example:</p>\r\n<pre>\r\n<code>alert(3 +\r\n1\r\n+ 2);\r\n</code></pre>\r\n<p>\r\n\tThe code outputs <code>6</code> because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus <code>&quot;+&quot;</code>, then it is an &quot;incomplete expression&quot;, so the semicolon is not required. And in this case that works as intended.</p>\r\n<p>\r\n\tBut there are situations where JavaScript &quot;fails&quot; to assume a semicolon where it is really needed.</p>\r\n<p>\r\n\tErrors which occur in such cases are quite hard to find and fix.</p>\r\n<p>\r\n\tIf you&#39;re curious to see a concrete example of such an error, check this code out:</p>\r\n<pre>\r\n<code>[1, 2].forEach(alert)\r\n</code></pre>\r\n<p>\r\n\tNo need to think about the meaning of the brackets <code>[]</code> and <code>forEach</code> yet. We&#39;ll study them later, for now it does not matter. Let&#39;s just remember the result: it shows <code>1</code>, then <code>2</code>.</p>\r\n<p>\r\n\tNow let&#39;s add an <code>alert </code>before the code and not finish it with a semicolon:</p>\r\n<pre>\r\n<code>alert(&quot;There will be an error&quot;)\r\n[1, 2].forEach(alert)\r\n</code></pre>\r\n<p>\r\n\tNow if we run it, only the first <code>alert </code>is shown, and then we have an error!</p>\r\n<p>\r\n\tBut everything is fine again if we add a semicolon after <code>alert</code>:</p>\r\n<pre>\r\n<code>alert(&quot;All fine now&quot;);\r\n[1, 2].forEach(alert)  \r\n</code></pre>\r\n<p>\r\n\tNow we have the &quot;All fine now&quot; message and then <code>1</code> and <code>2</code>.</p>\r\n<p>\r\n\tThe error in the no-semicolon variant occurs because JavaScript does not imply a semicolon before square brackets <code>[...]</code>.</p>\r\n<p>\r\n\tSo, because the semicolon is not auto-inserted, the code in the first example is treated as a single statement. That&#39;s how the engine sees it:</p>\r\n<pre>\r\n<code>alert(&quot;There will be an error&quot;)[1, 2].forEach(alert)\r\n</code></pre>\r\n<p>\r\n\tBut it should be two separate statements, not a single one. Such a merging in this case is just wrong, hence the error. There are other situations when such a thing happens.</p>\r\n<p>\r\n\tIt&#39;s recommended to put semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let&#39;s note once again: it is possible to leave out semicolons most of the time. But it&#39;s safer, especially for a beginner, to use them.</p>\r\n<h2>\r\n\tComments</h2>\r\n<p>\r\n\tAs time goes on, the program becomes more and more complex. It becomes necessary to add comments which describe what happens and why.</p>\r\n<p>\r\n\tComments can be put into any place of the script. They don&#39;t affect the execution because the engine simply ignores them.</p>\r\n<p>\r\n\tOne-line comments start with two forward slash characters <code>//</code>.</p>\r\n<p>\r\n\tThe rest of the line is a comment. It may occupy a full line of its own or follow a statement.</p>\r\n<p>\r\n\tLike here:</p>\r\n<pre>\r\n<code>// This comment occupies a line of its own\r\nalert(&#39;Hello&#39;);\r\nalert(&#39;World&#39;); // This comment follows the statement\r\n</code></pre>\r\n<p>\r\n\tMultiline comments start with a forward slash and an asterisk <code>/*</code> and end with an asterisk and a forward slash <code>*/</code>.</p>\r\n<p>\r\n\tLike this:</p>\r\n<pre>\r\n<code>/* An example with two messages.\r\nThis is a multiline comment.\r\n*/\r\nalert(&#39;Hello&#39;);\r\nalert(&#39;World&#39;);\r\n</code></pre>\r\n<p>\r\n\tThe content of comments is ignored, so if we put code inside <code>/* ... */</code> it won&#39;t execute.</p>\r\n<p>\r\n\tSometimes it comes in handy to temporarily disable a part of code:</p>\r\n<pre>\r\n<code>/* Commenting out the code\r\nalert(&#39;Hello&#39;);\r\n*/\r\nalert(&#39;World&#39;);\r\n</code></pre>\r\n<p>\r\n\t<span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span>In most editors a line of code can be commented out by <code>key:Ctrl+/</code> hotkey for a single-line comment and something like <code>key:Ctrl+Shift+/</code>&nbsp;- for multiline comments (select a piece of code and press the hotkey). For Mac try <code>key:Cmd</code> instead of <code>key:Ctrl</code>.</p>\r\n<p>\r\n\tThere may not be<code> /*...*/ </code>inside another<code> /*...*/.</code></p>\r\n<p>\r\n\tSuch code will die with an error:</p>\r\n<pre>\r\n<code>/*\r\n  /* nested comment ?!? */\r\n*/\r\nalert( &#39;World&#39; );\r\n</code></pre>\r\n<p>\r\n\tPlease, don&#39;t hesitate to comment your code.</p>\r\n<p>\r\n\tComments increase the overall code footprint, but that&#39;s not a problem at all. There are many tools which minify the code before publishing to the production server. They remove comments, so they don&#39;t appear in the working scripts. Therefore comments do not have any negative effects on production at all.</p>\r\n<p>\r\n\tFurther in the tutorial there will be a chapter info:coding-style that also explains how to write better comments.</p>"
          }
        },
        {
          "The modern mode, \"use strict\"": {
            "content": "<p>\r\n\tFor a long time JavaScript was evolving without compatibility issues. New features were added to the language, but the old functionality did not change.</p>\r\n<p>\r\n\tThat had the benefit of never breaking existing code. But the downside was that any mistake or an imperfect decision made by JavaScript creators got stuck in the language forever.</p>\r\n<p>\r\n\tIt had been so until 2009 when ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most modifications are off by default. One needs to enable them explicitly with a special directive <code>&quot;use strict&quot;</code>.</p>\r\n<h2>\r\n\t<code>&quot;use strict&quot;</code></h2>\r\n<p>\r\n\tThe directive looks like a string: <code>&quot;use strict&quot;</code> or <code>&#39;use strict&#39;</code>. When it is located on the top of the script, then the whole script works the &quot;modern&quot; way.</p>\r\n<p>\r\n\tFor example</p>\r\n<pre>\r\n<code>&quot;use strict&quot;;\r\n// this code works the modern way\r\n...\r\n</code></pre>\r\n<p>\r\n\tWe will learn functions (a way to group commands) soon.</p>\r\n<p>\r\n\tLooking ahead let&#39;s just note that <code>&quot;use strict&quot;</code> can be put at the start of a function (most kinds of functions) instead of the whole script. Then strict mode is enabled in that function only. But usually people use it for the whole script.</p>\r\n<p>\r\n\tPlease make sure that <code>&quot;use strict&quot;</code>&nbsp;is on the top of the script, otherwise the strict mode may not be enabled.</p>\r\n<p>\r\n\tThere is no strict mode here:</p>\r\n<pre>\r\n<code>alert(&quot;some code&quot;);\r\n// &quot;use strict&quot; below is ignored, must be on the top\r\n&quot;use strict&quot;;\r\n// strict mode is not activated\r\n</code></pre>\r\n<p>\r\n\tOnly comments may appear above <code>&quot;use strict&quot;</code>.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tThere&#39;s no way to cancel <code>use strict</code></p>\r\n\t<p>\r\n\t\tThere is no directive <code>&quot;no use strict&quot;</code> or alike, that would return the old behavior.</p>\r\n</blockquote>\r\n<p>\r\n\tOnce we enter the strict mode, there&#39;s no return.</p>\r\n<p>\r\n\tThe differences of <code>&quot;use strict&quot;</code>&nbsp;versus the &quot;default&quot; mode are still to be covered.</p>\r\n<p>\r\n\tIn the next chapters, as we learn language features, we&#39;ll make notes about the differences of the strict and default mode. Luckily, there are not so many. And they actually make our life better.</p>\r\n<p>\r\n\tAt this point in time it&#39;s enough to know about it in general:</p>\r\n<p>\r\n\t1. The <code>&quot;use strict&quot;</code>&nbsp;directive switches the engine to the &quot;modern&quot; mode, changing the behavior of some built-in features. We&#39;ll see the details as we study.<br />\r\n\t2. The strict mode is enabled by <code>&quot;use strict&quot;</code>&nbsp;at the top. Also there are several language features like &quot;classes&quot; and &quot;modules&quot; that enable strict mode automatically.<br />\r\n\t3. The strict mode is supported by all modern browsers.<br />\r\n\t4. It&#39;s always recommended to start scripts with <code>&quot;use strict&quot;</code>. All examples in this tutorial assume so, unless (very rarely) specified otherwise.</p>"
          }
        },
        {
          "Variables": {
            "content": "<p>\r\n\tMost of the time, a JavaScript application needs to work with information. Here are 2 examples:</p>\r\n<ol>\r\n\t<li>\r\n\t\tAn online-shop - the information might include goods being sold and a shopping cart.</li>\r\n\t<li>\r\n\t\tA chat application - the information might include users, messages, and much more.</li>\r\n</ol>\r\n<p>\r\n\tVariables are used to store this information.</p>\r\n<h2>\r\n\tA variable</h2>\r\n<p>\r\n\tA <a href=\"https://en.wikipedia.org/wiki/Variable_(computer_science)\" target=\"_blank\">variable</a> is a &quot;named storage&quot; for data. We can use variables to store goodies, visitors and other data.</p>\r\n<p>\r\n\tTo create a variable in JavaScript, we need to use the <code>let</code> keyword.</p>\r\n<p>\r\n\tThe statement below creates (in other words: declares or defines) a variable with the name &quot;<code>message</code>&quot;:</p>\r\n<pre>\r\n<code>let message;\r\n</code></pre>\r\n<p>\r\n\tNow we can put some data into it by using the assignment operator<code> =</code>:</p>\r\n<pre>\r\n<code>let message;\r\n*!*\r\nmessage = &#39;Hello&#39;; // store the string\r\n*/!*\r\n</code></pre>\r\n<p>\r\n\tThe string is now saved into the memory area associated with the variable. We can access it using the variable name:</p>\r\n<pre>\r\n<code>let message;\r\nmessage = &#39;Hello!&#39;;\r\n*!*\r\nalert(message); // shows the variable content\r\n*/!*\r\n</code></pre>\r\n<p>\r\n\tTo be concise we can merge the variable declaration and assignment into a single line:</p>\r\n<pre>\r\n<code>let message = &#39;Hello!&#39;; // define the variable and assign the value\r\nalert(message); // Hello!\r\n</code></pre>\r\n<p>\r\n\tWe can also declare multiple variables in one line:</p>\r\n<pre>\r\n<code>let user = &#39;John&#39;, age = 25, message = &#39;Hello&#39;;\r\n</code></pre>\r\n<p>\r\n\tThat might seem shorter, but it&#39;s not recommended. For the sake of better readability, please use a single line per variable.</p>\r\n<p>\r\n\tThe multiline variant is a bit longer, but easier to read:</p>\r\n<pre>\r\n<code>let user = &#39;John&#39;;\r\nlet age = 25;\r\nlet message = &#39;Hello&#39;;\r\n</code></pre>\r\n<p>\r\n\tSome people also write many variables like that:</p>\r\n<pre>\r\n<code>let user = &#39;John&#39;,\r\nage = 25,\r\nmessage = &#39;Hello&#39;;\r\n</code></pre>\r\n<p>\r\n\t...Or even in the &quot;comma-first&quot; style:</p>\r\n<pre>\r\n<code>let user = &#39;John&#39;\r\n, age = 25\r\n, message = &#39;Hello&#39;;\r\n</code></pre>\r\n<p>\r\n\tTechnically, all these variants do the same. So, it&#39;s a matter of personal taste and aesthetics.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tIn older scripts you may also find another keyword: <code>var</code>&nbsp;instead of <code>let</code>:</p>\r\n</blockquote>\r\n<pre>\r\n<code>*!*var*/!* message = &#39;Hello&#39;;\r\n</code></pre>\r\n<p>\r\n\tThe <code>var</code> keyword is almost the same as <code>let</code>. It also declares a variable, but in a slightly different, &quot;old-school&quot; fashion.</p>\r\n<p>\r\n\tThere are subtle differences between <code>let</code> and <code>var</code>, but they do not matter for us yet. We&#39;ll cover them in detail later, in the chapter info:var.</p>\r\n<h2>\r\n\tA real-life analogy</h2>\r\n<p>\r\n\tWe can easily grasp the concept of a &quot;variable&quot; if we imagine it as a &quot;box&quot; for data, with a uniquely-named sticker on it.</p>\r\n<p>\r\n\tFor instance, the variable <code>message </code>can be imagined as a box labeled &quot;message&quot; with the value &quot;Hello!&quot; in it:</p>\r\n<p>\r\n\t[[ image(javascript-basics/variable.png, center) ]]</p>\r\n<p>\r\n\tWe can put any value into the box.</p>\r\n<p>\r\n\tAlso we can change it. The value can be changed as many times as needed:</p>\r\n<pre>\r\n<code>let message;\r\nmessage = &#39;Hello!&#39;;\r\nmessage = &#39;World!&#39;; // value changed\r\nalert(message);\r\n</code></pre>\r\n<p>\r\n\tWhen the value is changed, the old data is removed from the variable:</p>\r\n<p>\r\n\t[[ image(javascript-basics/variable-change.png, center) ]]</p>\r\n<p>\r\n\tWe can also declare two variables and copy data from one into the other.</p>\r\n<pre>\r\n<code>let hello = &#39;Hello world!&#39;;\r\nlet message;\r\n*!*\r\n// copy &#39;Hello world&#39; from hello into message\r\nmessage = hello;\r\n*/!*\r\n// now two variables hold the same data\r\nalert(hello); // Hello world!\r\nalert(message); // Hello world!</code></pre>\r\n<h3>\r\n\tFunctional languages</h3>\r\n<p>\r\n\tIt may be interesting to know that there also exist&nbsp;<a href=\"https://en.wikipedia.org/wiki/Functional_programming\" target=\"_blank\">functional programming</a>&nbsp;languages that forbid changing a variable value. For example,&nbsp;<a href=\"http://www.scala-lang.org/\" target=\"_blank\">Scala</a>&nbsp;or&nbsp;<a href=\"http://www.erlang.org/\" target=\"_blank\">Erlang</a>.</p>\r\n<p>\r\n\tIn such languages, once the value is stored &quot;in the box&quot;, it&#39;s there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can&#39;t reuse the old one.</p>\r\n<p>\r\n\tThough it may seem a little bit odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits. Studying such a language (even if not planning to use it soon) is recommended to broaden the mind.</p>\r\n<h2>\r\n\tVariable naming</h2>\r\n<p>\r\n\tThere are two limitations for a variable name in JavaScript:</p>\r\n<p>\r\n\t1. The name must contain only letters, digits, symbols <code>$</code> and <code>_</code>.<br />\r\n\t2. The first character must not be a digit.</p>\r\n<p>\r\n\tValid names, for instance:</p>\r\n<pre>\r\n<code>let userName;\r\nlet test123;\r\n</code></pre>\r\n<p>\r\n\tWhen the name contains multiple words, <a href=\"https://en.wikipedia.org/wiki/CamelCase\" target=\"_blank\">camelCase</a> is commonly used. That is: words go one after another, each word starts with a capital letter: <code>myVeryLongName</code>.</p>\r\n<p>\r\n\tWhat&#39;s interesting, the dollar sign <code>$</code> and the underscore <code>_</code> can also be used in names. They are regular symbols, just like letters, without any special meaning.</p>\r\n<p>\r\n\tThese names are valid:</p>\r\n<pre>\r\n<code>let $ = 1; // declared a variable with the name &quot;$&quot;\r\nlet _ = 2; // and now a variable with the name &quot;_&quot;\r\nalert($ + _); // 3\r\n</code></pre>\r\n<p>\r\n\tExamples of incorrect variable names:</p>\r\n<pre>\r\n<code>let 1a; // cannot start with a digit\r\nlet my-name; // a hyphen &#39;-&#39; is not allowed in the name</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tVariables named <code>apple</code>&nbsp;and <code>AppLE</code>&nbsp;are two different variables.</p>\r\n</blockquote>\r\n<h3>\r\n\tNon-English letters are allowed, but not recommended</h3>\r\n<p>\r\n\tIt is possible to use any language, including cyrillic letters or even hieroglyphs, like this:</p>\r\n<pre>\r\n<code>let \u0438\u043c\u044f = &#39;...&#39;;\r\nlet \u6211 = &#39;...&#39;;</code></pre>\r\n<p>\r\n\tTechnically, there is no error here, such names are allowed, but there is an international tradition to use English in variable names. Even if we&#39;re writing a small script, it may have a long life ahead. People from other countries may need to read it some time.</p>\r\n<p>\r\n\t<span>&nbsp;</span>There is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\" target=\"_blank\">list of reserved words</a>, which cannot be used as variable names, because they are used by the language itself.</p>\r\n<p>\r\n\t<span>&nbsp;</span>For example, words <code>let</code>, <code>class</code>, <code>return</code>, <code>function</code>&nbsp;are reserved.</p>\r\n<p>\r\n\tThe code below gives a syntax error:<span>&nbsp;</span></p>\r\n<pre>\r\n<code>let let = 5; // can&#39;t name a variable &quot;let&quot;, error!\r\nlet return = 5; // also can&#39;t name it &quot;return&quot;, error!\r\n</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tAn assignment without <code>use strict</code></p>\r\n\t<p>\r\n\t\tNormally, we need to define a variable before using it. But in the old times, it was technically possible to create a variable by a mere assignment of the value, without <code>let</code>. This still works now if we don&#39;t put <code>use strict</code>. The behavior is kept for compatibility with old scripts.</p>\r\n</blockquote>\r\n<pre>\r\n<code>\t     // note: no &quot;use strict&quot; in this example\r\n\r\nnum = 5;    // the variable &quot;num&quot; is created if didn&#39;t exist\r\n\r\nalert(num); // 5\r\n</code></pre>\r\n<p>\r\n\tThat&#39;s a bad practice, it gives an error in the strict mode:</p>\r\n<pre>\r\n<code>&quot;use strict&quot;;\r\n*!*\r\nnum = 5; // error: num is not defined\r\n*/!*\r\n</code></pre>\r\n<h2>\r\n\tConstants</h2>\r\n<p>\r\n\tTo declare a constant (unchanging) variable, one can use <code>const</code>&nbsp;instead of <code>let</code>:</p>\r\n<pre>\r\n<code>const myBirthday = &#39;18.04.1982&#39;;\r\n</code></pre>\r\n<p>\r\n\tVariables declared using <code>const </code>are called &quot;constants&quot;. They cannot be changed. An attempt to do it would cause an error:</p>\r\n<pre>\r\n<code>const myBirthday = &#39;18.04.1982&#39;;\r\nmyBirthday = &#39;01.01.2001&#39;; // error, can&#39;t reassign the constant!</code></pre>\r\n<p>\r\n\tWhen a programmer is sure that the variable should never change, they can use <code>const</code> to guarantee it, and also to clearly show that fact to everyone.</p>\r\n<h3>\r\n\tUppercase constants</h3>\r\n<p>\r\n\tThere is a widespread practice to use constants as aliases for difficult-to-remember values that are known prior to execution.</p>\r\n<p>\r\n\tSuch constants are named using capital letters and underscores.</p>\r\n<p>\r\n\tLike this:</p>\r\n<pre>\r\n<code>const COLOR_RED = &quot;#F00&quot;;\r\nconst COLOR_GREEN = &quot;#0F0&quot;;\r\nconst COLOR_BLUE = &quot;#00F&quot;;\r\nconst COLOR_ORANGE = &quot;#FF7F00&quot;;\r\n\r\n// ...when we need to pick a color\r\nlet color = COLOR_ORANGE;\r\nalert(color); // #FF7F00\r\n</code></pre>\r\n<p>\r\n\tBenefits:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<code>COLOR_ORANGE</code> is much easier to remember than &quot;#FF7F00&quot;.</li>\r\n\t<li>\r\n\t\tIt is much easier to mistype in &quot;#FF7F00&quot; than in <code>COLOR_ORANGE</code>.</li>\r\n\t<li>\r\n\t\tWhen reading the code, <code>COLOR_ORANGE</code> is much more meaningful than #FF7F00.</li>\r\n</ul>\r\n<p>\r\n\tWhen should we use capitals for a constant, and when should we name them normally? Let&#39;s make that clear.</p>\r\n<p>\r\n\tBeing a &quot;constant&quot; just means that the value never changes. But there are constants that are known prior to execution (like a hexadecimal value for red), and there are those that are *calculated* in run-time, during the execution, but do not change after the assignment.</p>\r\n<p>\r\n\tFor instance:</p>\r\n<pre>\r\n<code>const pageLoadTime = /* time taken by a webpage to load */;\r\n</code></pre>\r\n<p>\r\n\tThe value of <code>pageLoadTime</code> is not known prior to the page load, so it&#39;s named normally. But it&#39;s still a constant, because it doesn&#39;t change after assignment.</p>\r\n<p>\r\n\tIn other words, capital-named constants are only used as aliases for &quot;hard-coded&quot; values. &nbsp;</p>\r\n<h2>\r\n\tName things right</h2>\r\n<p>\r\n\tTalking about variables, there&#39;s one more extremely important thing.</p>\r\n<p>\r\n\tPlease name the variables sensibly. Take time to think if needed.</p>\r\n<p>\r\n\tVariable naming is one of the most important and complex skills in programming. A quick glance at variable names can reveal which code is written by a beginner and which by an experienced developer.</p>\r\n<p>\r\n\tIn a real project, most of the time is spent on modifying and extending the existing code base, rather than writing something completely separate from scratch. And when we return to the code after some time of doing something else, it&#39;s much easier to find information that is well-labeled. Or, in other words, when the variables have good names.</p>\r\n<p>\r\n\tPlease spend some time thinking about the right name for a variable before declaring it. This will repay you a lot.</p>\r\n<p>\r\n\tSome good-to-follow rules are:</p>\r\n<ul>\r\n\t<li>\r\n\t\tUse human-readable names like <code>userName</code>&nbsp;or <code>shoppingCart</code>.</li>\r\n\t<li>\r\n\t\tStay away from abbreviations or short names like <code>a</code>, <code>b</code>,<code>&nbsp;c</code>, unless you really know what you&#39;re doing.</li>\r\n\t<li>\r\n\t\tMake the name maximally descriptive and concise. Examples of bad names are <code>data</code>&nbsp;and <code>value</code>. Such a name says nothing. It is only ok to use them if it&#39;s exceptionally obvious from the context which data or value is meant.</li>\r\n\t<li>\r\n\t\tAgree on terms within your team and in your own mind. If a site visitor is called a &quot;user&quot; then we should name related variables like <code>currentUser</code>&nbsp;or<code>&nbsp;newUser</code>, but not <code>currentVisitor</code>&nbsp;or a <code>newManInTown</code>.</li>\r\n</ul>\r\n<p>\r\n\tSounds simple? Indeed it is, but creating good descriptive-and-concise names in practice is not. Go for it.</p>\r\n<h3>\r\n\tReuse or create?</h3>\r\n<p>\r\n\tAnd the last note. There are some lazy programmers who, instead of declaring a new variable, tend to reuse the existing ones.</p>\r\n<p>\r\n\tAs a result, the variable is like a box where people throw different things without changing the sticker. What is inside it now? Who knows... We need to come closer and check.</p>\r\n<p>\r\n\tSuch a programmer saves a little bit on variable declaration, but loses ten times more on debugging the code.</p>\r\n<p>\r\n\tAn extra variable is good, not evil.</p>\r\n<p>\r\n\tModern JavaScript minifiers and browsers optimize code well enough, so it won&#39;t create performance issues. Using different variables for different values can even help the engine to optimize.</p>\r\n<h2>\r\n\tSummary</h2>\r\n<p>\r\n\tWe can declare variables to store data. That can be done using <code>var</code>&nbsp;or <code>let</code>&nbsp;or <code>const</code>.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<code>let</code>&nbsp;is a modern variable declaration. The code must be in strict mode to use <code>let</code> in Chrome (V8).</li>\r\n\t<li>\r\n\t\t<code>var</code>&nbsp;is an old-school variable declaration. Normally we don&#39;t use it at all, but we&#39;ll cover subtle differences from <code>let</code> in the chapter &lt;info:var&gt;, just in case you need them.</li>\r\n\t<li>\r\n\t\t<code>const</code>&nbsp;is like <code>let</code>, but the value of the variable can&#39;t be changed.</li>\r\n</ul>\r\n<p>\r\n\tVariables should be named in a way that allows us to easily understand what&#39;s inside.</p>"
          }
        },
        {
          "Data types": {
            "content": "<p>\r\n\tA variable in JavaScript can contain any data. A variable can at one moment be a string and later receive a numeric value:</p>\r\n<pre>\r\n<code>// no error\r\nlet message = &quot;hello&quot;;\r\nmessage = 123456;\r\n</code></pre>\r\n<p>\r\n\tProgramming languages that allow such things are called &quot;dynamically typed&quot;, meaning that there are data types, but variables are not bound to any of them.</p>\r\n<p>\r\n\tThere are seven basic data types in JavaScript. Here we&#39;ll study the basics, and in the next chapters we&#39;ll talk about each of them in detail.</p>\r\n<h2>\r\n\tA number</h2>\r\n<pre>\r\n<code>let n = 123;\r\nn = 12.345;\r\n</code></pre>\r\n<p>\r\n\tThe number type serves both for integer and floating point numbers.</p>\r\n<p>\r\n\tThere are many operations for numbers, e.g. multiplication <code>*</code>, division <code>/</code>, addition <code>+</code>, subtraction <code>-</code> and so on.</p>\r\n<p>\r\n\tBesides regular numbers, there are so-called &quot;special numeric values&quot; which also belong to that type: <code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code>.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>Infinity</code> represents the mathematical <a href=\"https://en.wikipedia.org/wiki/Infinity\" target=\"_blank\">Infinity</a> &infin;. It is a special value that&#39;s greater than any number.</p>\r\n\t\t<p>\r\n\t\t\tWe can get it as a result of division by zero:</p>\r\n\t\t<pre>\r\n\t\t<code>alert( 1 / 0 ); // Infinity\r\n</code></pre>\r\n\t\t<p>\r\n\t\t\tOr just mention it in the code directly:</p>\r\n\t\t<pre>\r\n\t\t<code>alert( Infinity ); // Infinity\r\n</code></pre>\r\n\t\t<p>\r\n\t\t\t<code>NaN</code> represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance:</p>\r\n\t\t<pre>\r\n\t\t<code>alert( &quot;not a number&quot; / 2 ); // NaN, such division is erroneous\r\n</code></pre>\r\n\t</li>\r\n\t<li>\r\n\t\t<p>\r\n\t\t\t<code>NaN</code> is sticky. Any further operation on <code>NaN</code> would give <code>NaN</code>:</p>\r\n\t\t<pre>\r\n\t\t<code>alert( &quot;not a number&quot; / 2 + 5 ); // NaN\r\n</code></pre>\r\n\t\t<p>\r\n\t\t\tSo, if there&#39;s <code>NaN</code> somewhere in a mathematical expression, it propagates to the whole result.</p>\r\n\t</li>\r\n</ul>\r\n<p>\r\n\t<span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span>Doing maths is safe in JavaScript. We can do anything: divide by zero, treat non-numeric strings as numbers, etc.</p>\r\n<p>\r\n\tThe script will never stop with a fatal error (&quot;die&quot;). At worst we&#39;ll get <code>NaN</code> as the result.</p>\r\n<p>\r\n\tSpecial numeric values formally belong to the &quot;number&quot; type. Of course they are not numbers in a common sense of this word.</p>\r\n<p>\r\n\tWe&#39;ll see more about working with numbers in the chapter info:number.</p>\r\n<h2>\r\n\tA string</h2>\r\n<p>\r\n\tA string in JavaScript must be quoted.</p>\r\n<pre>\r\n<code>let str = &quot;Hello&quot;;\r\nlet str2 = &#39;Single quotes are ok too&#39;;\r\nlet phrase = `can embed ${str}`;\r\n</code></pre>\r\n<p>\r\n\tIn JavaScript, there are 3 types of quotes.</p>\r\n<ol>\r\n\t<li>\r\n\t\tDouble quotes: <code>&quot;Hello&quot;</code>.</li>\r\n\t<li>\r\n\t\tSingle quotes: <code>&#39;Hello&#39;</code>.</li>\r\n\t<li>\r\n\t\tBackticks: <code>`Hello`</code>.</li>\r\n</ol>\r\n<p>\r\n\tDouble and single quotes are &quot;simple&quot; quotes. There&#39;s no difference between them in JavaScript.</p>\r\n<p>\r\n\tBackticks are &quot;extended functionality&quot; quotes. They allow us to embed variables and expressions into a string by wrapping them in <code>${&hellip;}</code>, for example:</p>\r\n<pre>\r\n<code>let name = &quot;John&quot;;\r\n\r\n// embed a variable\r\nalert( `Hello, *!*${name}*/!*!` ); // Hello, John!\r\n\r\n// embed an expression\r\nalert( `the result is *!*${1 + 2}*/!*` ); // the result is 3\r\n</code></pre>\r\n<p>\r\n\tThe expression inside <code>${&hellip;}</code> is evaluated and the result becomes a part of the string. We can put anything there: a variable like <code>name</code> or an arithmetical expression like <code>1 + 2</code> or something more complex.</p>\r\n<p>\r\n\tPlease note that this can only be done in backticks. Other quotes do not allow such embedding!</p>\r\n<pre>\r\n<code>alert( &quot;the result is ${1 + 2}&quot; ); // the result is ${1 + 2} (double quotes do nothing)\r\n</code></pre>\r\n<p>\r\n\tWe&#39;ll cover strings more thoroughly in the chapter info:string.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\tIn some languages, there is a special &quot;character&quot; type for a single character. For example, in the C language and in Java it is <code>char</code>.</p>\r\n\t<p>\r\n\t\tIn JavaScript, there is no such type. There&#39;s only one type:&nbsp;<code>string</code>. A string may consist of only one character or many of them.</p>\r\n</blockquote>\r\n<h2>\r\n\tA boolean (logical type)</h2>\r\n<p>\r\n\tThe boolean type has only two values: <code>true</code> and <code>false</code>.</p>\r\n<p>\r\n\tThis type is commonly used to store yes/no values: <code>true</code> means &quot;yes, correct&quot;, and <code>false</code> means &quot;no, incorrect&quot;.</p>\r\n<p>\r\n\tFor instance:</p>\r\n<pre>\r\n<code>let nameFieldChecked = true; // yes, name field is checked\r\nlet ageFieldChecked = false; // no, age field is not checked\r\n</code></pre>\r\n<p>\r\n\tBoolean values also come as a result of comparisons:</p>\r\n<pre>\r\n<code>let isGreater = 4 &gt; 1;\r\n\r\nalert( isGreater ); // true (the comparison result is &quot;yes&quot;)\r\n</code></pre>\r\n<p>\r\n\tWe&#39;ll cover booleans more deeply later in the chapter info:logical-operators.</p>\r\n<h2>\r\n\tThe &quot;null&quot; value</h2>\r\n<p>\r\n\tThe special <code>null</code> value does not belong to any type of those described above.</p>\r\n<p>\r\n\tIt forms a separate type of its own, which contains only the <code>null</code> value:</p>\r\n<pre>\r\n<code>let age = null;\r\n</code></pre>\r\n<p>\r\n\tIn JavaScript <code>null</code> is not a &quot;reference to a non-existing object&quot; or a &quot;null pointer&quot; like in some other languages.</p>\r\n<p>\r\n\tIt&#39;s just a special value which has the sense of &quot;nothing&quot;, &quot;empty&quot; or &quot;value unknown&quot;.</p>\r\n<p>\r\n\tThe code above states that the <code>age</code> is unknown or empty for some reason.</p>\r\n<h2>\r\n\tThe &quot;undefined&quot; value</h2>\r\n<p>\r\n\tThe special value <code>undefined</code> stands apart. It makes a type of its own, just like <code>null</code>.</p>\r\n<p>\r\n\tThe meaning of <code>undefined</code> is &quot;value is not assigned&quot;.</p>\r\n<p>\r\n\tIf a variable is declared, but not assigned, then its value is exactly <code>undefined</code>:</p>\r\n<pre>\r\n<code>let x;\r\n\r\nalert(x); // shows &quot;undefined&quot;\r\n</code></pre>\r\n<p>\r\n\tTechnically, it is possible to assign <code>undefined</code> to any variable:</p>\r\n<pre>\r\n<code>let x = 123;\r\n\r\nx = undefined;\r\n\r\nalert(x); // &quot;undefined&quot;\r\n</code></pre>\r\n<p>\r\n\t...But it&#39;s not recommended to do that. Normally, we use <code>null</code> to write an &quot;empty&quot; or an &quot;unknown&quot; value into the variable, and <code>undefined</code> is only used for checks, to see if the variable is assigned or similar.</p>\r\n<h2>\r\n\tObjects and Symbols</h2>\r\n<p>\r\n\tThe <code>object</code> type is special.</p>\r\n<p>\r\n\tAll other types are called &quot;primitive&quot;, because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities. We&#39;ll deal with them later in the chapter info:object after we know enough about primitives.</p>\r\n<p>\r\n\tThe <code>symbol</code> type is used to create unique identifiers for objects. We have to mention it here for completeness, but it&#39;s better to study them after objects.</p>\r\n<h2>\r\n\tThe typeof operator</h2>\r\n<p>\r\n\tThe <code>typeof</code> operator returns the type of the argument. It&#39;s useful when we want to process values of different types differently, or just want to make a quick check.</p>\r\n<p>\r\n\tIt supports two forms of syntax:</p>\r\n<ol>\r\n\t<li>\r\n\t\tAs an operator: <code>typeof x</code>.</li>\r\n\t<li>\r\n\t\tFunction style: <code>typeof(x)</code>.</li>\r\n</ol>\r\n<p>\r\n\tIn other words, it works both with parentheses or without them. The result is the same.</p>\r\n<p>\r\n\tThe call to <code>typeof x</code> returns a string with the type name:</p>\r\n<pre>\r\n<code>typeof undefined // &quot;undefined&quot;\r\n\r\ntypeof 0 // &quot;number&quot;\r\n\r\ntypeof true // &quot;boolean&quot;\r\n\r\ntypeof &quot;foo&quot; // &quot;string&quot;\r\n\r\ntypeof Symbol(&quot;id&quot;) // &quot;symbol&quot;\r\n\r\n*!*\r\ntypeof Math // &quot;object&quot;  (1)\r\n*/!*\r\n\r\n*!*\r\ntypeof null // &quot;object&quot;  (2)\r\n*/!*\r\n\r\n*!*\r\ntypeof alert // &quot;function&quot;  (3)\r\n*/!*\r\n</code></pre>\r\n<p>\r\n\tThe last three lines may need additional explanations:</p>\r\n<ol>\r\n\t<li>\r\n\t\t<code>Math</code> is a built-in object that provides mathematical operations. We will learn it in the chapter info:number. Here it serves just as an example of an object.</li>\r\n\t<li>\r\n\t\tThe result of <code>typeof null</code> is <code>&quot;object&quot;</code>. That&#39;s wrong. It is an officially recognized error in <code>typeof</code>, kept for compatibility. Of course, <code>null</code> is not an object. It is a special value with a separate type of its own. So, again, that&#39;s an error in the language.</li>\r\n\t<li>\r\n\t\tThe result of <code>typeof alert</code> is <code>&quot;function&quot;</code>, because <code>alert</code> is a function of the language. We&#39;ll study functions in the next chapters, and we&#39;ll see that there&#39;s no special &quot;function&quot; type in the language. Functions belong to the object type. But <code>typeof</code> treats them differently. Formally, it&#39;s incorrect, but very convenient in practice.</li>\r\n</ol>\r\n<h2>\r\n\tSummary</h2>\r\n<p>\r\n\tThere are 7 basic types in JavaScript.</p>\r\n<ul>\r\n\t<li>\r\n\t\t<code>number</code> for numbers of any kind: integer or floating-point.</li>\r\n\t<li>\r\n\t\t<code>string</code> for strings. A string may have one or more characters, there&#39;s no separate single-character type.</li>\r\n\t<li>\r\n\t\t<code>boolean</code> for <code>true</code>/<code>false</code>.</li>\r\n\t<li>\r\n\t\t<code>null</code> for unknown values -- a standalone type that has a single value <code>null</code>.</li>\r\n\t<li>\r\n\t\t<code>undefined</code> for unassigned values -- a standalone type that has a single value <code>undefined</code>.</li>\r\n\t<li>\r\n\t\t<code>object</code> for more complex data structures.</li>\r\n\t<li>\r\n\t\t<code>symbol</code> for unique identifiers.</li>\r\n</ul>\r\n<p>\r\n\tThe <code>typeof</code> operator allows us to see which type is stored in the variable.</p>\r\n<ul>\r\n\t<li>\r\n\t\tTwo forms: <code>typeof x</code> or <code>typeof(x)</code>.</li>\r\n\t<li>\r\n\t\tReturns a string with the name of the type, like <code>&quot;string&quot;</code>.</li>\r\n\t<li>\r\n\t\tFor <code>null</code> returns <code>&quot;object&quot;</code> -- that&#39;s an error in the language, it&#39;s not an object in fact.</li>\r\n</ul>\r\n<p>\r\n\tIn the next chapters we&#39;ll concentrate on primitive values and once we&#39;re familiar with them, then we&#39;ll move on to objects.</p>"
          }
        },
        {
          "Type Conversions": {
            "content": "<p>\r\n\tMost of the time, operators and functions automatically convert a value to the right type. That&#39;s called &quot;type conversion&quot;.</p>\r\n<p>\r\n\tFor example, <code>alert</code> automatically converts any value to a string to show it. Mathematical operations convert values to numbers.</p>\r\n<p>\r\n\tThere are also cases when we need to explicitly convert a value to put things right.</p>\r\n<blockquote>\r\n\t<p>\r\n\t\t<span>&nbsp;</span>In this chapter we don&#39;t cover objects yet. Here we study primitives first. Later, after we learn objects, we&#39;ll see how object conversion works in the chapter &lt;info:object-toprimitive&gt;.<span>&nbsp;</span></p>\r\n</blockquote>\r\n<h2>\r\n\tToString</h2>\r\n<p>\r\n\tString conversion happens when we need the string form of a value.</p>\r\n<p>\r\n\tFor example, <code>alert(value)</code> does it to show the value.</p>\r\n<p>\r\n\tWe can also use a call <code>String(value)</code> function for that:</p>\r\n<pre>\r\n<code>let value = true;\r\nalert(typeof value); // boolean\r\n\r\n*!*\r\nvalue = String(value); // now value is a string &quot;true&quot;\r\nalert(typeof value); // string\r\n*/!*\r\n</code></pre>\r\n<p>\r\n\tString conversion is mostly obvious. A <code>false</code> becomes <code>&quot;false&quot;</code>, <code>null</code> becomes <code>&quot;null&quot;</code> etc.</p>\r\n<h2>\r\n\tToNumber</h2>\r\n<p>\r\n\tNumeric conversion happens in mathematical functions and expressions automatically.</p>\r\n<p>\r\n\tFor example, when division <code>/</code> is applied to non-numbers:</p>\r\n<pre>\r\n<code>alert( &quot;6&quot; / &quot;2&quot; ); // 3, strings are converted to numbers\r\n</code></pre>\r\n<p>\r\n\tWe can use a <code>Number(value)</code> function to explicitly convert a <code>value</code>:</p>\r\n<pre>\r\n<code>let str = &quot;123&quot;;\r\nalert(typeof str); // string\r\nlet num = Number(str); // becomes a number 123\r\nalert(typeof num); // number\r\n</code></pre>\r\n<p>\r\n\tExplicit conversion is usually required when we read a value from a string-based source like a text form, but we expect a number to be entered.</p>\r\n<p>\r\n\tIf the string is not a valid number, the result of such conversion is <code>NaN</code>, for instance:</p>\r\n<pre>\r\n<code>let age = Number(&quot;an arbitrary string instead of a number&quot;);\r\nalert(age); // NaN, conversion failed\r\n</code></pre>\r\n<p>\r\n\tNumeric conversion rules:</p>\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>\r\n\t\t\t\tValue</th>\r\n\t\t\t<th>\r\n\t\t\t\tBecomes...</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>undefined</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>NaN</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>null</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>0</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>true&nbsp;and&nbsp;false</code></td>\r\n\t\t\t<td>\r\n\t\t\t\t<code>1</code> and <code>0</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<code>string</code></td>\r\n\t\t\t<td>\r\n\t\t\t\tWhitespaces from the start and the end are removed. Then, if the remaining string is empty, the result is <code>0</code>. Otherwise, the number is &quot;read&quot; from the string. An error gives <code>NaN</code>.</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n<p>\r\n\tExamples:</p>\r\n<pre>\r\n<code>alert( Number(&quot;   123   &quot;) ); // 123\r\nalert( Number(&quot;123z&quot;) );      // NaN (error reading a number at &quot;z&quot;)\r\nalert( Number(true) );        // 1\r\nalert( Number(false) );       // 0\r\n</code></pre>\r\n<p>\r\n\tPlease note that <code>null</code> and <code>undefined</code> behave differently here: <code>null</code> becomes a zero, while <code>undefined</code> becomes <code>NaN</code>.</p>\r\n<p>\r\n\t<span _fck_bookmark=\"1\" style=\"display: none;\">&nbsp;</span>Almost all mathematical operations convert values to numbers. With a notable exception of the addition <code>+</code>. If one of the added values is a string, then another one is also converted to a string.</p>\r\n<p>\r\n\tThen it concatenates (joins) them:</p>\r\n<pre>\r\n<code>alert( 1 + &#39;2&#39; ); // &#39;12&#39; (string to the right)\r\nalert( &#39;1&#39; + 2 ); // &#39;12&#39; (string to the left)\r\n</code></pre>\r\n<p>\r\n\tThat only happens when at least one of the arguments is a string. Otherwise, values are converted to numbers.</p>\r\n<h2>\r\n\tToBoolean</h2>\r\n<p>\r\n\tBoolean conversion is the simplest one.</p>\r\n<p>\r\n\tIt happens in logical operations (later we&#39;ll meet condition tests and other kinds of them), but also can be performed manually with the call of <code>Boolean(value)</code>.</p>\r\n<p>\r\n\tThe conversion rule:</p>\r\n<ul>\r\n\t<li>\r\n\t\tValues that are intuitively &quot;empty&quot;, like <code>0</code>, an empty string, <code>null</code>, <code>undefined</code> and <code>NaN</code> become <code>false</code>.</li>\r\n\t<li>\r\n\t\tOther values become <code>true</code>.</li>\r\n</ul>\r\n<p>\r\n\tFor instance:</p>\r\n<pre>\r\n<code>alert( Boolean(1) ); // true\r\nalert( Boolean(0) ); // false\r\n\r\nalert( Boolean(&quot;hello&quot;) ); // true\r\nalert( Boolean(&quot;&quot;) ); // false\r\n</code></pre>\r\n<blockquote>\r\n\t<p>\r\n\t\tPlease note: the string with zero <code>\\&quot;0\\&quot;</code> is <code>true.</code>&nbsp;Some languages (namely PHP) treat <code>&quot;0&quot;</code> as <code>false</code>. But in JavaScript a non-empty string is always <code>true</code>.</p>\r\n</blockquote>\r\n<pre>\r\n<code>alert( Boolean(&quot;0&quot;) ); // true\r\nalert( Boolean(&quot; &quot;) ); // spaces, also true (any non-empty string is true)</code></pre>\r\n<h2>\r\n\tSummary</h2>\r\n<p>\r\n\tThere are three most widely used type conversions: to string, to number and to boolean.</p>\r\n<p>\r\n\t<code>ToString</code>&nbsp;- Occurs when we output something, can be performed with <code>String(value)</code>. The conversion to string is usually obvious for primitive values.</p>\r\n<p>\r\n\t<code>ToNumber</code> - Occurs in math operations, can be performed with <code>Number(value)</code>.</p>\r\n<p>\r\n\tThe conversion follows the rules:</p>\r\n<ul>\r\n\t<li>\r\n\t\tValue&nbsp;<code>undefined</code>&nbsp;becomes&nbsp;<code>NaN</code></li>\r\n\t<li>\r\n\t\tValue <code>null </code>becomes <code>0</code></li>\r\n\t<li>\r\n\t\tValue <code>true/false</code> becomes&nbsp; <code>1 / 0&nbsp;</code></li>\r\n\t<li>\r\n\t\tValue <code>string</code>&nbsp; - The string is read &quot;as is&quot;, whitespaces from both sides are ignored. An empty string becomes <code>0</code>. An error gives <code>NaN</code>.&nbsp;</li>\r\n</ul>\r\n<p>\r\n\t<code>ToBoolean</code> - Occurs in logical operations, or can be performed with <code>Boolean(value)</code>.</p>\r\n<p>\r\n\tFollows the rules:</p>\r\n<ul>\r\n\t<li>\r\n\t\tValues <code>0</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>&quot;&quot;</code>&nbsp;become <code>false</code></li>\r\n\t<li>\r\n\t\tany other values become <code>true&nbsp;</code></li>\r\n</ul>\r\n<p>\r\n\tMost of these rules are easy to understand and memorize. The notable exceptions where people usually make mistakes are:</p>\r\n<ul>\r\n\t<li>\r\n\t\t<code>undefined</code> is <code>NaN</code> as a number, not <code>0</code>.</li>\r\n\t<li>\r\n\t\t<code>&quot;0&quot;</code> and space-only strings like <code>&quot;&nbsp;&nbsp; &quot;</code> are true as a boolean.</li>\r\n</ul>\r\n<p>\r\n\tObjects are not covered here, we&#39;ll return to them later in the chapter &lt;info:object-toprimitive&gt; that is devoted exclusively to objects, after we learn more basic things about JavaScript.</p>"
          }
        }
      ]
    }
  }
]